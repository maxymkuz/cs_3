S_y = var(y)
f <- qf(alpha, 99, 49)
f
S_x = var(x)
S_y = var(y)
f_sample <= S_x / S_y
S_x = var(x)
S_y = var(y)
f_sample <= S_x / S_y
S_x = var(x)
S_y = var(y)
f_sample <= S_x / S_y
S_x = var(x)
S_y = var(y)
S_x = var(x)
S_y = var(y)
f_sample <- S_x / S_y
f_from_table <- qf(alpha, 99, 49)
f_sample
f_from_table
S_x = var(x)
S_y = var(y)
f_sample <- S_x / S_y
f <- qf(alpha, 99, 49)
if (f_sample > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
if
S_x = var(x)
S_y = var(y)
f_sample <- S_x / S_y
f <- qf(alpha, 99, 49)
if (f_sample > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf()
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
f_statistic
а
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
f_statistic
f
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(0.0035, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
f_statistic
f
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(0.0035, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
f_statistic
f
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(0.0035, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
f_statistic
f
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(0.0035, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
f_statistic
f
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(0.003, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
f_statistic
f
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf(f_statistic, 99, 49)
# As standard deviation and mean are unknown, let's estimate it from sample
S <- sd(x)
sample_mean <- mean(x)
student <- (sample_mean - 0)* sqrt(100) / S
t <- qt(0.05, df=99)
if (student <= t){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
t.test(x, mu = 0, alternative = "less")
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
f_statistic
а
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
f_statistic
f
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
f_statistic
f
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_x / S_y
f <- qf(alpha, 99, 49)
f_statistic
f
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_y / S_x
f <- qf(1 - alpha, 99, 49)
f_statistic
f
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_y / S_x
f <- qf(1 - alpha, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf(f_statistic, 99, 49)
S_x = var(x)
S_y = var(y)
f_statistic <- S_y / S_x
f <- qf(1 - alpha, 99, 49)
if (f_statistic > f){
print("The test concluded that the that the null hypothesis should be rejected at alpha = 0.05")
} else{
print("The test concluded that the that the null hypothesis should not be rejected at alpha = 0.05")
}
pf(f_statistic, 99, 49)
dataframe <- read.csv("insurance.csv")
dataframe <- read.csv("insurance.csv")
dataframe
dataframe <- read.csv("insurance.csv")
rquerry.cormat(dataframe)
install.packages("corrplot")
dataframe <- read.csv("insurance.csv")
rquerry.cormat(dataframe)
install.packages("corrplot")
source("http://www.sthda.com/upload/rquery_cormat.r")
dataframe <- read.csv("insurance.csv")
rquerry.cormat(dataframe)
install.packages("corrplot")
source("http://www.sthda.com/upload/rquery_cormat.r")
dataframe <- read.csv("insurance.csv")
rquerry.cormat(dataframe)
n <- 56  # our team id
alpha <- 0.05
install.packages("corrplot")
source("http://www.sthda.com/upload/rquery_cormat.r")
calculate_a_k <- function(k){
num <- k * log(k ** 2 * n + pi)
return(num - floor(num))
}
x <- qnorm(sapply(1:100, calculate_a_k))
y <- qnorm(sapply(101:150, calculate_a_k))
install.packages("corrplot")
dataframe <- read.csv("insurance.csv")
rquerry.cormat(dataframe)
dataframe <- read.csv("insurance.csv")
rquerry.cormat(dataframe)
#+++++++++++++++++++++++++
# Computing of correlation matrix
#+++++++++++++++++++++++++
# Required package : corrplot
# x : matrix
# type: possible values are "lower" (default), "upper", "full" or "flatten";
#display lower or upper triangular of the matrix, full  or flatten matrix.
# graph : if TRUE, a correlogram or heatmap is plotted
# graphType : possible values are "correlogram" or "heatmap"
# col: colors to use for the correlogram
# ... : Further arguments to be passed to cor or cor.test function
# Result is a list including the following components :
# r : correlation matrix, p :  p-values
# sym : Symbolic number coding of the correlation matrix
rquery.cormat<-function(x,
type=c('lower', 'upper', 'full', 'flatten'),
graph=TRUE,
graphType=c("correlogram", "heatmap"),
col=NULL, ...)
{
library(corrplot)
# Helper functions
#+++++++++++++++++
# Compute the matrix of correlation p-values
cor.pmat <- function(x, ...) {
mat <- as.matrix(x)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# Get lower triangle of the matrix
getLower.tri<-function(mat){
upper<-mat
upper[upper.tri(mat)]<-""
mat<-as.data.frame(upper)
mat
}
# Get upper triangle of the matrix
getUpper.tri<-function(mat){
lt<-mat
lt[lower.tri(mat)]<-""
mat<-as.data.frame(lt)
mat
}
# Get flatten matrix
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
# Define color
if (is.null(col)) {
col <- colorRampPalette(
c("#67001F", "#B2182B", "#D6604D", "#F4A582",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#4393C3", "#2166AC", "#053061"))(200)
col<-rev(col)
}
# Correlation matrix
cormat<-signif(cor(x, use = "complete.obs", ...),2)
pmat<-signif(cor.pmat(x, ...),2)
# Reorder correlation matrix
ord<-corrMatOrder(cormat, order="hclust")
cormat<-cormat[ord, ord]
pmat<-pmat[ord, ord]
# Replace correlation coeff by symbols
sym<-symnum(cormat, abbr.colnames=FALSE)
# Correlogram
if(graph & graphType[1]=="correlogram"){
corrplot(cormat, type=ifelse(type[1]=="flatten", "lower", type[1]),
tl.col="black", tl.srt=45,col=col,...)
}
else if(graphType[1]=="heatmap")
heatmap(cormat, col=col, symm=TRUE)
# Get lower/upper triangle
if(type[1]=="lower"){
cormat<-getLower.tri(cormat)
pmat<-getLower.tri(pmat)
}
else if(type[1]=="upper"){
cormat<-getUpper.tri(cormat)
pmat<-getUpper.tri(pmat)
sym=t(sym)
}
else if(type[1]=="flatten"){
cormat<-flattenCorrMatrix(cormat, pmat)
pmat=NULL
sym=NULL
}
list(r=cormat, p=pmat, sym=sym)
}
dataframe <- read.csv("insurance.csv")
rquerry.cormat(dataframe)
dataframe <- read.csv("insurance.csv")
rquery.cormat(dataframe)
dataframe <- read.csv("insurance.csv")
rquery.cormat(dataframe)
knitr::opts_chunk$set(echo = TRUE)
dataframe <- read.csv("insurance.csv")
rquery.cormat(dataframe)
multi.fit <- lm(charges~age, data=dataframe)
multi.fit <- lm(charges~age, data=dataframe)
multi.fit
multi.fit <- lm(charges ~ age, data=dataframe)
multi.fit
multi.fit <- lm(charges ~ age + smoker, data=dataframe)
multi.fit
multi.fit <- lm(charges ~ age + smoker, data=dataframe)
multi.fit$h
multi.fit <- lm(charges ~ age + smoker, data=dataframe)
multi.fit$age
multi.fit <- lm(charges ~ age + smoker, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ age, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ age + smoker, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ age + smoker, data=dataframe)
summary(multi.fit)
plot(multi.fit)
multi.fit <- lm(charges ~ smoker, data=dataframe)
summary(multi.fit)
plot(multi.fit)
multi.fit <- lm(charges ~ smoker, age, data=dataframe)
summary(multi.fit)
plot(multi.fit)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ smoker, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ age, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)
help(multi.fit)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
#summary(multi.fit)
help(multi.fit)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
#summary(multi.fit)
help(summary.lm)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
#summary(multi.fit)
help(summary.lm)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
#summary(multi.fit)
help(summary.lm)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
#summary(multi.fit)
help(summary.lm)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
#summary(multi.fit)
help(summary.lm)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)$r.squared
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)$r.squared
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)$r.squared
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ smoker, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ smoker, data=dataframe)
summary(multi.fit)
plot(summary(multi.fit))
multi.fit <- lm(charges ~ smoker, data=dataframe)
summary(multi.fit)
plot(summary(multi.fit))
multi.fit <- lm(charges ~ smoker, data=dataframe)
summary(multi.fit)
plot(multi.fit)
multi.fit <- lm(charges ~ smoker, data=dataframe)
summary(multi.fit)
install.packages("corrplot")
knitr::opts_chunk$set(echo = TRUE)
source("http://www.sthda.com/upload/rquery_cormat.r")
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)
install.packages("corrplot")
install.packages("corrplot")
knitr::opts_chunk$set(echo = TRUE)
source("http://www.sthda.com/upload/rquery_cormat.r")
multi.fit <- lm(charges ~ smoker + age + children, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ smoker + age + sex, data=dataframe)
summary(multi.fit)
multi.fit <- lm(charges ~ smoker + age, data=dataframe)
summary(multi.fit)
predict(f, newdata=data.frame(x=c(0, 20)), interval="prediction")
data_1 <- data.frame(age=0, smoker=0)
predict(multi.fit, newdata=daya_1, interval="prediction")
data_1 <- data.frame(age=0, smoker=0)
predict(multi.fit, newdata=data_1, interval="prediction")
data_1 <- data.frame(age=0, smoker=0)
data_1 <- data.frame(age=20, smoker=20)
predict(multi.fit, newdata=data_1, interval="prediction")
predict(multi.fit, newdata=data_2, interval="prediction")
data_1 <- data.frame(age=0, smoker=0)
data_2 <- data.frame(age=20, smoker=20)
predict(multi.fit, newdata=data_1, interval="prediction")
predict(multi.fit, newdata=data_2, interval="prediction")
predict(multi.fit, newdata=data_1, interval="prediction")
predict(multi.fit, newdata=data_2, interval="prediction")
