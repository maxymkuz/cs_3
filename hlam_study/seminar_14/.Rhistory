}
}
print_results_exponential(sample_sizes, alpha_vars)
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
#      cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(theta_in_interval_chi, mu, std, n, m, alpha, theta), "\n")
#      cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
#       cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
get_precision <- function(interval_function, mu, S, n, m, alpha, theta){
true_num = 0
for (i in 0:m) {
interval = interval_function(mu, n, lambda, alpha)
if ((theta >= interval[1]) && (theta <= interval[2])){
true_num = true_num + 1
}
}
return (true_num/m)
}
calculate_length <- function(interval_function, mu, sd, n, alpha){
interval = interval_function(mu, n, lambda, alpha)
print(interval[2] - interval[1])
return (interval[2] - interval[1])
}
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
#      cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(theta_in_interval_chi, mu, std, n, m, alpha, theta), "\n")
#      cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
#       cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
get_precision <- function(interval_function, mu, S, n, m, alpha, theta){
true_num = 0
for (i in 0:m) {
interval = interval_function(mu, n, lambda, alpha)
if ((theta >= interval[1]) && (theta <= interval[2])){
true_num = true_num + 1
}
}
return (true_num/m)
}
calculate_length <- function(interval_function, mu, sd, n, alpha){
interval = interval_function(mu, n, lambda, alpha)
x <- interval[2] - interval[1]
return (x)
}
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
#      cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(theta_in_interval_chi, mu, std, n, m, alpha, theta), "\n")
#      cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
#       cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
get_precision <- function(interval_function, mu, S, n, m, alpha, theta){
true_num = 0
for (i in 0:m) {
interval = interval_function(mu, n, lambda, alpha)
if ((theta >= interval[1]) && (theta <= interval[2])){
true_num = true_num + 1
}
}
return (true_num/m)
}
calculate_length <- function(interval_function, mu, sd, n, alpha){
interval = interval_function(mu, n, lambda, alpha)
print(interval)
x <- interval[2] - interval[1]
return (x)
}
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(theta_in_interval_chi, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
#      cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(theta_in_interval_chi, mu, std, n, m, alpha, theta), "\n")
#      cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
#       cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
#1
chi_interval <- function(X, S, n, alpha){
low <-  qchisq(alpha / 2, df=2*n) / (2 * n * X)
high <- qchisq(1 - alpha / 2, df=2*n) / (2 * n * X)
return (c(low, high))
}
#2
#normal_with_theta <- function(X, S, n, alpha){
#  print(alpha / 2)
#  low <-  X + qnorm(1 - alpha / 2)/ sqrt(n)
#  high <- X - qnorm(1 - alpha / 2)/ sqrt(n)
#  return (c(low, high))
#}
#3
normal_without_theta <- function(X, S, n, alpha){
print(qnorm(1 - alpha / 2))
low <- X / (1 + qnorm(alpha / 2) / sqrt(n))
high <- X / (1 - qnorm(alpha / 2) / sqrt(n))
return (c(1/low, 1/high))
}
#4
student <- function(X, S, n, alpha) {
low <- X + S * (qt(1 - alpha /2, df = n - 1)) / sqrt(n)
high <- X - S * (qt(1 - alpha / 2, df = n - 1)) / sqrt(n)
return (c(1/low, 1/high))
}
exponential = rexp(n, 1/theta)
mn = mean(exponential)
std = sd(exponential)
chi_interval(mn, std, n, 0.05)
normal_with_theta(mn, std, n, 0.05)
normal_without_theta(mn, std, n, 0.05)
student(mn, std, n, 0.05)
get_precision <- function(interval_function, mu, S, n, m, alpha, theta){
true_num = 0
for (i in 0:m) {
interval = interval_function(mu, n, lambda, alpha)
if ((theta >= interval[1]) && (theta <= interval[2])){
true_num = true_num + 1
}
}
return (true_num/m)
}
calculate_length <- function(interval_function, mu, sd, n, alpha){
interval = interval_function(mu, n, lambda, alpha)
print(interval)
x <- interval[2] - interval[1]
return (x)
}
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(student, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
#      cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(chi_interval, mu, std, n, m, alpha, theta), "\n")
#      cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
#       cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(student, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
#      cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(chi_interval, mu, std, n, m, alpha, theta), "\n")
#      cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
#       cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
#      cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(chi_interval, mu, std, n, m, alpha, theta), "\n")
#      cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
#       cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(chi_interval, mu, std, n, m, alpha, theta), "\n")
cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
#1
chi_interval <- function(X, S, n, alpha){
low <-  qchisq(alpha / 2, df=2*n) / (2 * n * X)
high <- qchisq(1 - alpha / 2, df=2*n) / (2 * n * X)
return (c(low, high))
}
#2
#normal_with_theta <- function(X, S, n, alpha){
#  print(alpha / 2)
#  low <-  X + qnorm(1 - alpha / 2)/ sqrt(n)
#  high <- X - qnorm(1 - alpha / 2)/ sqrt(n)
#  return (c(low, high))
#}
#3
normal_without_theta <- function(X, S, n, alpha){
low <- X / (1 + qnorm(alpha / 2) / sqrt(n))
high <- X / (1 - qnorm(alpha / 2) / sqrt(n))
return (c(1/low, 1/high))
}
#4
student <- function(X, S, n, alpha) {
low <- X + S * (qt(1 - alpha /2, df = n - 1)) / sqrt(n)
high <- X - S * (qt(1 - alpha / 2, df = n - 1)) / sqrt(n)
return (c(1/low, 1/high))
}
exponential = rexp(n, 1/theta)
mn = mean(exponential)
std = sd(exponential)
chi_interval(mn, std, n, 0.05)
normal_with_theta(mn, std, n, 0.05)
normal_without_theta(mn, std, n, 0.05)
student(mn, std, n, 0.05)
get_precision <- function(interval_function, mu, S, n, m, alpha, theta){
true_num = 0
for (i in 0:m) {
interval = interval_function(mu, n, lambda, alpha)
if ((theta >= interval[1]) && (theta <= interval[2])){
true_num = true_num + 1
}
}
return (true_num/m)
}
calculate_length <- function(interval_function, mu, sd, n, alpha){
interval = interval_function(mu, n, lambda, alpha)
x <- interval[2] - interval[1]
return (x)
}
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(chi_interval, mu, std, n, m, alpha, theta), "\n")
cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
get_precision <- function(interval_function, mu, S, n, m, alpha, theta){
true_num = 0
for (i in 0:m) {
interval = interval_function(mu, n, lambda, alpha)
if ((theta >= interval[1]) && (theta <= interval[2])){
print("sdljfhlasdfjlsdj")
true_num = true_num + 1
}
}
return (true_num/m)
}
calculate_length <- function(interval_function, mu, sd, n, alpha){
interval = interval_function(mu, n, lambda, alpha)
x <- interval[2] - interval[1]
return (x)
}
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(chi_interval, mu, std, n, m, alpha, theta), "\n")
cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
get_precision <- function(interval_function, mu, S, n, m, alpha, theta){
true_num = 0
for (i in 0:m) {
interval = interval_function(mu, n, lambda, alpha)
if ((theta <= interval[1]) && (theta >= interval[2])){
print("sdljfhlasdfjlsdj")
true_num = true_num + 1
}
}
return (true_num/m)
}
calculate_length <- function(interval_function, mu, sd, n, alpha){
interval = interval_function(mu, n, lambda, alpha)
x <- interval[2] - interval[1]
return (x)
}
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(chi_interval, mu, std, n, m, alpha, theta), "\n")
cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
get_precision <- function(interval_function, mu, S, n, m, alpha, theta){
true_num = 0
for (i in 0:m) {
interval = interval_function(mu, n, lambda, alpha)
if ((theta <= interval[1]) && (theta >= interval[2])){
true_num = true_num + 1
}
}
return (true_num/m)
}
calculate_length <- function(interval_function, mu, sd, n, alpha){
interval = interval_function(mu, n, lambda, alpha)
x <- interval[2] - interval[1]
return (x)
}
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
for (m in c(10, 100, 1000)){
cat("Precision for size", n, " and alpha for first =", alpha, "is", get_precision(chi_interval, mu, std, n, m, alpha, theta), "\n")
cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(normal_without_theta, mu, std, n, m, alpha, theta), "\n")
cat("Precision for size", n, "and alpha for first =", alpha, "is", get_precision(student, mu, std, n, m, alpha, theta), "\n")
#cat("Precision for size", n, "and alpha =", alpha, "is", get_precision(theta_in_interval_normal, n, m, alpha, sample_mean_exp), "\n")
}
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
}
}
}
print_results_exponential(sample_sizes, alpha_vars)
sample_size <- c(10, 100, 1000)
alpha_vars <- c(0.1, 0.05, 0.01)
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
}
cat("\n")
}
}
print_results_exponential(sample_sizes, alpha_vars)
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
cat("Sample size n =", n, "\n")
for (alpha in alpha_vars) {
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
}
cat("\n")
}
}
print_results_exponential(sample_sizes, alpha_vars)
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
cat("Sample size n =", n, "\n")
for (alpha in alpha_vars) {
cat("Alpha =", alpha, "\n")
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
}
cat("\n")
}
}
print_results_exponential(sample_sizes, alpha_vars)
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
cat("Sample size n =", n, "\n")
for (alpha in alpha_vars) {
cat("Alpha =", alpha, "\n")
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
}
}
cat("\n")
}
}
print_results_exponential <- function(sample_sizes, alpha_vars){
exponential = rexp(n, 1/theta)
mu = mean(exponential)
std = sd(exponential)
for (n in sample_sizes){
cat("Sample size n =", n, "\n")
for (alpha in alpha_vars) {
cat("Alpha =", alpha, "\n")
cat("Chi confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(chi_interval, mu, std, n, alpha), "\n")
cat("Normal confidence level method precision (length) for alpha ->", alpha, " :", calculate_length(normal_without_theta, mu, std, n, alpha), "\n")
cat("Student confidence level method precision (length) for alpha ->", alpha, " :", -1/calculate_length(student, mu, std, n, alpha), "\n")
}
cat("\n")
}
}
print_results_exponential(sample_sizes, alpha_vars)
