/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "i2s.h"
#include "spi.h"
#include "tim.h"
#include "usb_device.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void TIM10_reinit();
void TIM9_reinit();
void print_str(char str[]);
uint32_t get_us();
void udelay(uint32_t useconds);
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Timer setup
volatile uint32_t tim10_overflows = 0;
volatile uint32_t tim9_overflows = 0;
char str[] = "Time: %lu us, distance: %lu   \n";

typedef enum state_t {
 INITIAL_S,
 TRIGGERING_S,
 WAITING_FOR_ECHO_START_S,
 WAITING_FOR_ECHO_STOP_S,
 TRIG_NOT_WENT_LOW_S,
 ECHO_TIMEOUT_S,
 ECHO_NOT_WENT_LOW_S,
 READING_DATA_S,
 ERROR_S
} state_t;

volatile state_t state = INITIAL_S;

void TIM10_reinit()
{
 HAL_TIM_Base_Stop(&htim10);
 __HAL_TIM_SET_PRESCALER( &htim10, (96-1) );
 __HAL_TIM_SET_COUNTER( &htim10, 0 );
 tim10_overflows = 0;
 // STARTING TO SEND THE SIGNAL
 HAL_TIM_Base_Start_IT(&htim10);

 if (state == INITIAL_S){
	 state = TRIGGERING_S;

	 HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
	 TIM9_reinit();

	 // TODO if the pin did not go high...
 }
}

void TIM9_reinit()
{
 HAL_TIM_Base_Stop(&htim9);


 __HAL_TIM_SET_PRESCALER( &htim9, (96-1) );
 __HAL_TIM_SET_COUNTER( &htim9, 0 );
 tim9_overflows = 0;
 HAL_TIM_Base_Start_IT(&htim9);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if( htim->Instance == TIM10 )
  {
   ++tim10_overflows;
  }
  if( htim->Instance == TIM9 )
  {
   ++tim9_overflows;


   if (state == TRIGGERING_S){

		 HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);

		 state = WAITING_FOR_ECHO_START_S;
		 __HAL_TIM_DISABLE_IT(&htim9, TIM_IT_UPDATE); //! Дуже важливо!

		 // todo if the pin did not go low...
//	   }
   }
  }
}



uint32_t get_us()
{
 __HAL_TIM_DISABLE_IT(&htim10, TIM_IT_UPDATE); //! Дуже важливо!
 __disable_irq();
 uint32_t res = tim10_overflows * 10000 + __HAL_TIM_GET_COUNTER(&htim10);
 __enable_irq();
 __HAL_TIM_ENABLE_IT(&htim10, TIM_IT_UPDATE);
 return res;
}

void udelay(uint32_t useconds) {
 uint32_t before = get_us();
 while( get_us() < before+useconds){}
}


// Interrupt handler
volatile uint32_t echo_start;
volatile uint32_t echo_finish;
volatile uint32_t measured_time;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 if (GPIO_Pin == ECHOI_Pin )
 {
  switch (state) {
  case WAITING_FOR_ECHO_START_S: {

   echo_start =  get_us();
   state = WAITING_FOR_ECHO_STOP_S;
   break;
  }
  case WAITING_FOR_ECHO_STOP_S: {

   echo_finish = get_us();
   measured_time = echo_finish - echo_start;
   state = READING_DATA_S;

//  HAL_Delay(100);
//   if (distance > 700){
//	   print_str("Too far -- possibly no echo at all. \n");
//		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
//
//   }
//   else{ // when everything else is ok:
//		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
//		   print_str("Success. \n");
//
//	  snprintf(str1, 100, "Time: %lu us, distance: %lu cm   \n", measured_time, distance);
//	  print_str(str1);
//   }

   break;
  }
  default:
   state = ERROR_S;
  }
 }
}

void print_str(char str[]){
	CDC_Transmit_FS(str, strlen(str));
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_I2S2_Init();
  MX_I2S3_Init();
  MX_SPI1_Init();
  MX_TIM10_Init();
  MX_USB_DEVICE_Init();
  MX_TIM9_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  TIM10_reinit();

  while (1)
  {
	   if (state == READING_DATA_S){

		   uint32_t distance = measured_time/58;

		  snprintf(str, 100, "Time: %lu us, distance: %lu cm   \n", measured_time, distance);
		  print_str(str);

		   state = INITIAL_S;
		   HAL_Delay(100);


		   TIM10_reinit();
	   }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
