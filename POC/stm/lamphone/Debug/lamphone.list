
lamphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008984  08008984  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800898c  0800898c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800898c  0800898c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008990  08008990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  20000090  08008a24  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  08008a24  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cec3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b91  00000000  00000000  0003cf83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001690  00000000  00000000  00040b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001510  00000000  00000000  000421a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019dd4  00000000  00000000  000436b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013c59  00000000  00000000  0005d48c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095bba  00000000  00000000  000710e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106c9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060ec  00000000  00000000  00106d1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008950 	.word	0x08008950

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008950 	.word	0x08008950

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_TIM_PeriodElapsedCallback>:

// Timers
volatile uint32_t tim10_overflows = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if ( htim->Instance == TIM10 )
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d104      	bne.n	80004f4 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    ++tim10_overflows;
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80004f2:	6013      	str	r3, [r2, #0]
  }
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	40014400 	.word	0x40014400
 8000504:	200000ac 	.word	0x200000ac

08000508 <TIM10_reinit>:


void TIM10_reinit()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
 HAL_TIM_Base_Stop(&htim10);
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <TIM10_reinit+0x2c>)
 800050e:	f004 fa7e 	bl	8004a0e <HAL_TIM_Base_Stop>
 __HAL_TIM_SET_PRESCALER( &htim10, (96-1) );
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <TIM10_reinit+0x2c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	225f      	movs	r2, #95	; 0x5f
 8000518:	629a      	str	r2, [r3, #40]	; 0x28
 __HAL_TIM_SET_COUNTER( &htim10, 0 );
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <TIM10_reinit+0x2c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
 tim10_overflows = 0;
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <TIM10_reinit+0x30>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 HAL_TIM_Base_Start_IT(&htim10);
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <TIM10_reinit+0x2c>)
 800052a:	f004 fa9b 	bl	8004a64 <HAL_TIM_Base_Start_IT>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000118 	.word	0x20000118
 8000538:	200000ac 	.word	0x200000ac

0800053c <get_tim10_us>:

uint32_t get_tim10_us()
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 __HAL_TIM_DISABLE_IT(&htim10, TIM_IT_UPDATE); //! Дуже важливо!
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <get_tim10_us+0x4c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68da      	ldr	r2, [r3, #12]
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <get_tim10_us+0x4c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f022 0201 	bic.w	r2, r2, #1
 8000550:	60da      	str	r2, [r3, #12]
 //__disable_irq();
 uint32_t res = tim10_overflows * 10000 + __HAL_TIM_GET_COUNTER(&htim10);
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <get_tim10_us+0x50>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f242 7210 	movw	r2, #10000	; 0x2710
 800055a:	fb02 f203 	mul.w	r2, r2, r3
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <get_tim10_us+0x4c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000564:	4413      	add	r3, r2
 8000566:	607b      	str	r3, [r7, #4]
 //__enable_irq();
 __HAL_TIM_ENABLE_IT(&htim10, TIM_IT_UPDATE);
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <get_tim10_us+0x4c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	68da      	ldr	r2, [r3, #12]
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <get_tim10_us+0x4c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f042 0201 	orr.w	r2, r2, #1
 8000576:	60da      	str	r2, [r3, #12]
 return res;
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000118 	.word	0x20000118
 800058c:	200000ac 	.word	0x200000ac

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fe05 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f841 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fa2d 	bl	80009fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a2:	f000 f8c1 	bl	8000728 <MX_I2C1_Init>
  MX_I2S2_Init();
 80005a6:	f000 f8ed 	bl	8000784 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005aa:	f000 f919 	bl	80007e0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ae:	f000 f947 	bl	8000840 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005b2:	f007 fdc9 	bl	8008148 <MX_USB_HOST_Init>
  MX_TIM3_Init();
 80005b6:	f000 f979 	bl	80008ac <MX_TIM3_Init>
  MX_TIM10_Init();
 80005ba:	f000 f9d1 	bl	8000960 <MX_TIM10_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005be:	2100      	movs	r1, #0
 80005c0:	4815      	ldr	r0, [pc, #84]	; (8000618 <main+0x88>)
 80005c2:	f004 fa9f 	bl	8004b04 <HAL_TIM_PWM_Start>

  TIM10_reinit();
 80005c6:	f7ff ff9f 	bl	8000508 <TIM10_reinit>

  int lower_bound = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  int upper_bound = 60000;
 80005ce:	f64e 2360 	movw	r3, #60000	; 0xea60
 80005d2:	61bb      	str	r3, [r7, #24]
  uint32_t time = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  uint32_t time_dif = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]

  uint32_t freq = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
//  time = get_tim10_us() * 1000000;
  uint32_t start = get_tim10_us();
 80005e0:	f7ff ffac 	bl	800053c <get_tim10_us>
 80005e4:	60b8      	str	r0, [r7, #8]
  double time_seconds = 0;
 80005e6:	f04f 0300 	mov.w	r3, #0
 80005ea:	f04f 0400 	mov.w	r4, #0
 80005ee:	e9c7 3400 	strd	r3, r4, [r7]
  while (1)
  {
//    time = get_tim10_us();
    TIM3->CCR1 = 0;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <main+0x8c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fc:	f000 fe44 	bl	8001288 <HAL_Delay>
    TIM3->CCR1 = 60000;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <main+0x8c>)
 8000602:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f000 fe3c 	bl	8001288 <HAL_Delay>

//  generate_freq(lower_bound, upper_bound, 1);
//    TIM3->CCR1 = get_light(lower_bound, upper_bound, freq, time);

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000610:	f007 fdc0 	bl	8008194 <MX_USB_HOST_Process>
    TIM3->CCR1 = 0;
 8000614:	e7ed      	b.n	80005f2 <main+0x62>
 8000616:	bf00      	nop
 8000618:	20000158 	.word	0x20000158
 800061c:	40000400 	.word	0x40000400

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b09a      	sub	sp, #104	; 0x68
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f008 f8cc 	bl	80087cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
 8000654:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <SystemClock_Config+0x100>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	4a30      	ldr	r2, [pc, #192]	; (8000720 <SystemClock_Config+0x100>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	6413      	str	r3, [r2, #64]	; 0x40
 8000666:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <SystemClock_Config+0x100>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <SystemClock_Config+0x104>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a2a      	ldr	r2, [pc, #168]	; (8000724 <SystemClock_Config+0x104>)
 800067c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0x104>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068e:	2301      	movs	r3, #1
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006a6:	23c0      	movs	r3, #192	; 0xc0
 80006a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006ae:	2308      	movs	r3, #8
 80006b0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 fb7e 	bl	8003db8 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c2:	f000 fa75 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e0:	2103      	movs	r1, #3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fdd8 	bl	8004298 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ee:	f000 fa5f 	bl	8000bb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006f2:	2301      	movs	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006f6:	23c8      	movs	r3, #200	; 0xc8
 80006f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006fa:	2305      	movs	r3, #5
 80006fc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4618      	mov	r0, r3
 8000708:	f003 ffa4 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000712:	f000 fa4d 	bl	8000bb0 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3768      	adds	r7, #104	; 0x68
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f002 fd4f 	bl	8003208 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 fa1e 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000c4 	.word	0x200000c4
 800077c:	40005400 	.word	0x40005400
 8000780:	000186a0 	.word	0x000186a0

08000784 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2S2_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_I2S2_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2S2_Init+0x50>)
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2S2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_I2S2_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007aa:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <MX_I2S2_Init+0x58>)
 80007ac:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007bc:	2201      	movs	r2, #1
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007c2:	f002 fe59 	bl	8003478 <HAL_I2S_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 f9f0 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200001f0 	.word	0x200001f0
 80007d8:	40003800 	.word	0x40003800
 80007dc:	00017700 	.word	0x00017700

080007e0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_I2S3_Init+0x54>)
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <MX_I2S3_Init+0x58>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2S3_Init+0x54>)
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_I2S3_Init+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_I2S3_Init+0x54>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_I2S3_Init+0x54>)
 8000800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000804:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_I2S3_Init+0x54>)
 8000808:	4a0c      	ldr	r2, [pc, #48]	; (800083c <MX_I2S3_Init+0x5c>)
 800080a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_I2S3_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_I2S3_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_I2S3_Init+0x54>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_I2S3_Init+0x54>)
 8000820:	f002 fe2a 	bl	8003478 <HAL_I2S_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800082a:	f000 f9c1 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000238 	.word	0x20000238
 8000838:	40003c00 	.word	0x40003c00
 800083c:	00017700 	.word	0x00017700

08000840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <MX_SPI1_Init+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_SPI1_Init+0x64>)
 800084c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_SPI1_Init+0x64>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_SPI1_Init+0x64>)
 800088c:	220a      	movs	r2, #10
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000892:	f004 f82d 	bl	80048f0 <HAL_SPI_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800089c:	f000 f988 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000198 	.word	0x20000198
 80008a8:	40013000 	.word	0x40013000

080008ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
 80008ca:	615a      	str	r2, [r3, #20]
 80008cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_TIM3_Init+0xac>)
 80008d0:	4a22      	ldr	r2, [pc, #136]	; (800095c <MX_TIM3_Init+0xb0>)
 80008d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_TIM3_Init+0xac>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_TIM3_Init+0xac>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_TIM3_Init+0xac>)
 80008e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_TIM3_Init+0xac>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_TIM3_Init+0xac>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f4:	4818      	ldr	r0, [pc, #96]	; (8000958 <MX_TIM3_Init+0xac>)
 80008f6:	f004 f8d9 	bl	8004aac <HAL_TIM_PWM_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 f956 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4619      	mov	r1, r3
 8000912:	4811      	ldr	r0, [pc, #68]	; (8000958 <MX_TIM3_Init+0xac>)
 8000914:	f004 fd50 	bl	80053b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800091e:	f000 f947 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000922:	2360      	movs	r3, #96	; 0x60
 8000924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_TIM3_Init+0xac>)
 800093a:	f004 fa1d 	bl	8004d78 <HAL_TIM_PWM_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000944:	f000 f934 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_TIM3_Init+0xac>)
 800094a:	f000 fb0b 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000158 	.word	0x20000158
 800095c:	40000400 	.word	0x40000400

08000960 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_TIM10_Init+0x94>)
 800097a:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <MX_TIM10_Init+0x98>)
 800097c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 95;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_TIM10_Init+0x94>)
 8000980:	225f      	movs	r2, #95	; 0x5f
 8000982:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_TIM10_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_TIM10_Init+0x94>)
 800098c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000990:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM10_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_TIM10_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800099e:	4815      	ldr	r0, [pc, #84]	; (80009f4 <MX_TIM10_Init+0x94>)
 80009a0:	f004 f80a 	bl	80049b8 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80009aa:	f000 f901 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_TIM10_Init+0x94>)
 80009b0:	f004 f87c 	bl	8004aac <HAL_TIM_PWM_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80009ba:	f000 f8f9 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009be:	2360      	movs	r3, #96	; 0x60
 80009c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	4619      	mov	r1, r3
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_TIM10_Init+0x94>)
 80009d6:	f004 f9cf 	bl	8004d78 <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80009e0:	f000 f8e6 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MX_TIM10_Init+0x94>)
 80009e6:	f000 fabd 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000118 	.word	0x20000118
 80009f8:	40014400 	.word	0x40014400

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	4b60      	ldr	r3, [pc, #384]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a5f      	ldr	r2, [pc, #380]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a1c:	f043 0310 	orr.w	r3, r3, #16
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b5d      	ldr	r3, [pc, #372]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	4b59      	ldr	r3, [pc, #356]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a58      	ldr	r2, [pc, #352]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b56      	ldr	r3, [pc, #344]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b52      	ldr	r3, [pc, #328]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a51      	ldr	r2, [pc, #324]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b4f      	ldr	r3, [pc, #316]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b4b      	ldr	r3, [pc, #300]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a4a      	ldr	r2, [pc, #296]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b48      	ldr	r3, [pc, #288]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a43      	ldr	r2, [pc, #268]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b41      	ldr	r3, [pc, #260]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a3c      	ldr	r2, [pc, #240]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2108      	movs	r1, #8
 8000abe:	4837      	ldr	r0, [pc, #220]	; (8000b9c <MX_GPIO_Init+0x1a0>)
 8000ac0:	f000 fe98 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4835      	ldr	r0, [pc, #212]	; (8000ba0 <MX_GPIO_Init+0x1a4>)
 8000aca:	f000 fe93 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ad4:	4833      	ldr	r0, [pc, #204]	; (8000ba4 <MX_GPIO_Init+0x1a8>)
 8000ad6:	f000 fe8d 	bl	80017f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000ada:	2304      	movs	r3, #4
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	482b      	ldr	r0, [pc, #172]	; (8000b9c <MX_GPIO_Init+0x1a0>)
 8000aee:	f000 fcff 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000af2:	2308      	movs	r3, #8
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4824      	ldr	r0, [pc, #144]	; (8000b9c <MX_GPIO_Init+0x1a0>)
 8000b0a:	f000 fcf1 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000b0e:	2332      	movs	r3, #50	; 0x32
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_GPIO_Init+0x1ac>)
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481e      	ldr	r0, [pc, #120]	; (8000b9c <MX_GPIO_Init+0x1a0>)
 8000b22:	f000 fce5 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <MX_GPIO_Init+0x1a4>)
 8000b3e:	f000 fcd7 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_GPIO_Init+0x1ac>)
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4815      	ldr	r0, [pc, #84]	; (8000bac <MX_GPIO_Init+0x1b0>)
 8000b56:	f000 fccb 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b5a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b5e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_GPIO_Init+0x1a8>)
 8000b74:	f000 fcbc 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b78:	2320      	movs	r3, #32
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_GPIO_Init+0x1a8>)
 8000b8c:	f000 fcb0 	bl	80014f0 <HAL_GPIO_Init>

}
 8000b90:	bf00      	nop
 8000b92:	3730      	adds	r7, #48	; 0x30
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	10120000 	.word	0x10120000
 8000bac:	40020000 	.word	0x40020000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <Error_Handler+0x6>

08000bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf6:	2007      	movs	r0, #7
 8000bf8:	f000 fc38 	bl	800146c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12c      	bne.n	8000c84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c46:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	2312      	movs	r3, #18
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <HAL_I2C_MspInit+0x8c>)
 8000c64:	f000 fc44 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400

08000c98 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a59      	ldr	r2, [pc, #356]	; (8000e1c <HAL_I2S_MspInit+0x184>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d15b      	bne.n	8000d72 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	4b58      	ldr	r3, [pc, #352]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a57      	ldr	r2, [pc, #348]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b55      	ldr	r3, [pc, #340]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	623b      	str	r3, [r7, #32]
 8000cd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a50      	ldr	r2, [pc, #320]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b4e      	ldr	r3, [pc, #312]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d1e:	2306      	movs	r3, #6
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	483e      	ldr	r0, [pc, #248]	; (8000e24 <HAL_I2S_MspInit+0x18c>)
 8000d2a:	f000 fbe1 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4836      	ldr	r0, [pc, #216]	; (8000e24 <HAL_I2S_MspInit+0x18c>)
 8000d4a:	f000 fbd1 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d60:	2305      	movs	r3, #5
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	482f      	ldr	r0, [pc, #188]	; (8000e28 <HAL_I2S_MspInit+0x190>)
 8000d6c:	f000 fbc0 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d70:	e04f      	b.n	8000e12 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a2d      	ldr	r2, [pc, #180]	; (8000e2c <HAL_I2S_MspInit+0x194>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d14a      	bne.n	8000e12 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a26      	ldr	r2, [pc, #152]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de0:	2306      	movs	r3, #6
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4811      	ldr	r0, [pc, #68]	; (8000e30 <HAL_I2S_MspInit+0x198>)
 8000dec:	f000 fb80 	bl	80014f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000df0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e02:	2306      	movs	r3, #6
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <HAL_I2S_MspInit+0x18c>)
 8000e0e:	f000 fb6f 	bl	80014f0 <HAL_GPIO_Init>
}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40003800 	.word	0x40003800
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	40003c00 	.word	0x40003c00
 8000e30:	40020000 	.word	0x40020000

08000e34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_SPI_MspInit+0x84>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12b      	bne.n	8000eae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e8e:	23e0      	movs	r3, #224	; 0xe0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000eaa:	f000 fb21 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_TIM_PWM_MspInit+0x48>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d115      	bne.n	8000f02 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_TIM_PWM_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <HAL_TIM_PWM_MspInit+0x4c>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_TIM_PWM_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	201d      	movs	r0, #29
 8000ef8:	f000 fac3 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000efc:	201d      	movs	r0, #29
 8000efe:	f000 fadc 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_TIM_Base_MspInit+0x48>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d115      	bne.n	8000f52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_TIM_Base_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <HAL_TIM_Base_MspInit+0x4c>)
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_TIM_Base_MspInit+0x4c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2019      	movs	r0, #25
 8000f48:	f000 fa9b 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f4c:	2019      	movs	r0, #25
 8000f4e:	f000 fab4 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40014400 	.word	0x40014400
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a24      	ldr	r2, [pc, #144]	; (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d11e      	bne.n	8000fc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <HAL_TIM_MspPostInit+0xb4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <HAL_TIM_MspPostInit+0xb4>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_TIM_MspPostInit+0xb4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4817      	ldr	r0, [pc, #92]	; (800101c <HAL_TIM_MspPostInit+0xb8>)
 8000fbe:	f000 fa97 	bl	80014f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8000fc2:	e023      	b.n	800100c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM10)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a15      	ldr	r2, [pc, #84]	; (8001020 <HAL_TIM_MspPostInit+0xbc>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d11e      	bne.n	800100c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_TIM_MspPostInit+0xb4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_TIM_MspPostInit+0xb4>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_TIM_MspPostInit+0xb4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <HAL_TIM_MspPostInit+0xc0>)
 8001008:	f000 fa72 	bl	80014f0 <HAL_GPIO_Init>
}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40000400 	.word	0x40000400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020800 	.word	0x40020800
 8001020:	40014400 	.word	0x40014400
 8001024:	40020400 	.word	0x40020400

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 f8e8 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001082:	f003 fd71 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000118 	.word	0x20000118

08001090 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <TIM3_IRQHandler+0x10>)
 8001096:	f003 fd67 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000158 	.word	0x20000158

080010a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <OTG_FS_IRQHandler+0x10>)
 80010aa:	f000 fe4b 	bl	8001d44 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000065c 	.word	0x2000065c

080010b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c0:	4a14      	ldr	r2, [pc, #80]	; (8001114 <_sbrk+0x5c>)
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <_sbrk+0x60>)
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <_sbrk+0x64>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <_sbrk+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d207      	bcs.n	80010f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e8:	f007 fb36 	bl	8008758 <__errno>
 80010ec:	4602      	mov	r2, r0
 80010ee:	230c      	movs	r3, #12
 80010f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	e009      	b.n	800110c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <_sbrk+0x64>)
 8001108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20020000 	.word	0x20020000
 8001118:	00000400 	.word	0x00000400
 800111c:	200000b0 	.word	0x200000b0
 8001120:	20000928 	.word	0x20000928

08001124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <SystemInit+0x28>)
 800112a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112e:	4a07      	ldr	r2, [pc, #28]	; (800114c <SystemInit+0x28>)
 8001130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001134:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <SystemInit+0x28>)
 800113a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800113e:	609a      	str	r2, [r3, #8]
#endif
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001154:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001156:	e003      	b.n	8001160 <LoopCopyDataInit>

08001158 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800115a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800115c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800115e:	3104      	adds	r1, #4

08001160 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001164:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001166:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001168:	d3f6      	bcc.n	8001158 <CopyDataInit>
  ldr  r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800116c:	e002      	b.n	8001174 <LoopFillZerobss>

0800116e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800116e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001170:	f842 3b04 	str.w	r3, [r2], #4

08001174 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001176:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001178:	d3f9      	bcc.n	800116e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800117a:	f7ff ffd3 	bl	8001124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f007 faf1 	bl	8008764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff fa05 	bl	8000590 <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001188:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800118c:	08008994 	.word	0x08008994
  ldr  r0, =_sdata
 8001190:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001194:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001198:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800119c:	20000924 	.word	0x20000924

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_Init+0x40>)
 80011ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_Init+0x40>)
 80011ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_Init+0x40>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f94d 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 f808 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fcee 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f965 	bl	80014d6 <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f92d 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	20000008 	.word	0x20000008
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008
 800126c:	20000280 	.word	0x20000280

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000280 	.word	0x20000280

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_Delay+0x40>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000008 	.word	0x20000008

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff8e 	bl	800136c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff29 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff3e 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff8e 	bl	80013c0 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5d 	bl	800136c <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff31 	bl	8001330 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	e159      	b.n	80017c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	f040 8148 	bne.w	80017ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d00b      	beq.n	800154a <HAL_GPIO_Init+0x5a>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800153e:	2b11      	cmp	r3, #17
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b12      	cmp	r3, #18
 8001548:	d130      	bne.n	80015ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 0201 	and.w	r2, r3, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0xfc>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b12      	cmp	r3, #18
 80015ea:	d123      	bne.n	8001634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	08da      	lsrs	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3208      	adds	r2, #8
 80015f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	69b9      	ldr	r1, [r7, #24]
 8001630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0203 	and.w	r2, r3, #3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80a2 	beq.w	80017ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b56      	ldr	r3, [pc, #344]	; (80017d4 <HAL_GPIO_Init+0x2e4>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a55      	ldr	r2, [pc, #340]	; (80017d4 <HAL_GPIO_Init+0x2e4>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_GPIO_Init+0x2e4>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001692:	4a51      	ldr	r2, [pc, #324]	; (80017d8 <HAL_GPIO_Init+0x2e8>)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a48      	ldr	r2, [pc, #288]	; (80017dc <HAL_GPIO_Init+0x2ec>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d019      	beq.n	80016f2 <HAL_GPIO_Init+0x202>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a47      	ldr	r2, [pc, #284]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0x1fe>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a46      	ldr	r2, [pc, #280]	; (80017e4 <HAL_GPIO_Init+0x2f4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00d      	beq.n	80016ea <HAL_GPIO_Init+0x1fa>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a45      	ldr	r2, [pc, #276]	; (80017e8 <HAL_GPIO_Init+0x2f8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d007      	beq.n	80016e6 <HAL_GPIO_Init+0x1f6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a44      	ldr	r2, [pc, #272]	; (80017ec <HAL_GPIO_Init+0x2fc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_GPIO_Init+0x1f2>
 80016de:	2304      	movs	r3, #4
 80016e0:	e008      	b.n	80016f4 <HAL_GPIO_Init+0x204>
 80016e2:	2307      	movs	r3, #7
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x204>
 80016e6:	2303      	movs	r3, #3
 80016e8:	e004      	b.n	80016f4 <HAL_GPIO_Init+0x204>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e002      	b.n	80016f4 <HAL_GPIO_Init+0x204>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x204>
 80016f2:	2300      	movs	r3, #0
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f002 0203 	and.w	r2, r2, #3
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	4093      	lsls	r3, r2
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001704:	4934      	ldr	r1, [pc, #208]	; (80017d8 <HAL_GPIO_Init+0x2e8>)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <HAL_GPIO_Init+0x300>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001736:	4a2e      	ldr	r2, [pc, #184]	; (80017f0 <HAL_GPIO_Init+0x300>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800173c:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <HAL_GPIO_Init+0x300>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001760:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <HAL_GPIO_Init+0x300>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <HAL_GPIO_Init+0x300>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_GPIO_Init+0x300>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_GPIO_Init+0x300>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b4:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_GPIO_Init+0x300>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3301      	adds	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	f67f aea2 	bls.w	800150c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c8:	bf00      	nop
 80017ca:	3724      	adds	r7, #36	; 0x24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40013c00 	.word	0x40013c00

080017f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
 8001800:	4613      	mov	r3, r2
 8001802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001810:	e003      	b.n	800181a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	041a      	lsls	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	619a      	str	r2, [r3, #24]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001828:	b08f      	sub	sp, #60	; 0x3c
 800182a:	af0a      	add	r7, sp, #40	; 0x28
 800182c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e054      	b.n	80018e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f006 fcd6 	bl	8008204 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2203      	movs	r2, #3
 800185c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f003 fe92 	bl	80055a0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	687e      	ldr	r6, [r7, #4]
 8001884:	466d      	mov	r5, sp
 8001886:	f106 0410 	add.w	r4, r6, #16
 800188a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001892:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001896:	e885 0003 	stmia.w	r5, {r0, r1}
 800189a:	1d33      	adds	r3, r6, #4
 800189c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800189e:	6838      	ldr	r0, [r7, #0]
 80018a0:	f003 fe0c 	bl	80054bc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f003 fe89 	bl	80055c2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	687e      	ldr	r6, [r7, #4]
 80018b8:	466d      	mov	r5, sp
 80018ba:	f106 0410 	add.w	r4, r6, #16
 80018be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ce:	1d33      	adds	r3, r6, #4
 80018d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d2:	6838      	ldr	r0, [r7, #0]
 80018d4:	f003 ff9c 	bl	8005810 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80018ea:	b590      	push	{r4, r7, lr}
 80018ec:	b089      	sub	sp, #36	; 0x24
 80018ee:	af04      	add	r7, sp, #16
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	4608      	mov	r0, r1
 80018f4:	4611      	mov	r1, r2
 80018f6:	461a      	mov	r2, r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	70fb      	strb	r3, [r7, #3]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70bb      	strb	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_HCD_HC_Init+0x28>
 800190e:	2302      	movs	r3, #2
 8001910:	e07f      	b.n	8001a12 <HAL_HCD_HC_Init+0x128>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	333d      	adds	r3, #61	; 0x3d
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	3338      	adds	r3, #56	; 0x38
 800193e:	787a      	ldrb	r2, [r7, #1]
 8001940:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	3340      	adds	r3, #64	; 0x40
 8001952:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001954:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	3339      	adds	r3, #57	; 0x39
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	333f      	adds	r3, #63	; 0x3f
 800197a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800197e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	78bb      	ldrb	r3, [r7, #2]
 8001984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001988:	b2d8      	uxtb	r0, r3
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	333a      	adds	r3, #58	; 0x3a
 8001998:	4602      	mov	r2, r0
 800199a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800199c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da0a      	bge.n	80019ba <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	333b      	adds	r3, #59	; 0x3b
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e009      	b.n	80019ce <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019ba:	78fa      	ldrb	r2, [r7, #3]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	333b      	adds	r3, #59	; 0x3b
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	333c      	adds	r3, #60	; 0x3c
 80019de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019e2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	787c      	ldrb	r4, [r7, #1]
 80019ea:	78ba      	ldrb	r2, [r7, #2]
 80019ec:	78f9      	ldrb	r1, [r7, #3]
 80019ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4623      	mov	r3, r4
 8001a00:	f004 f888 	bl	8005b14 <USB_HC_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}

08001a1a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_HCD_HC_Halt+0x1e>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e00f      	b.n	8001a58 <HAL_HCD_HC_Halt+0x3e>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 fac4 	bl	8005fd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4603      	mov	r3, r0
 8001a70:	70fb      	strb	r3, [r7, #3]
 8001a72:	460b      	mov	r3, r1
 8001a74:	70bb      	strb	r3, [r7, #2]
 8001a76:	4613      	mov	r3, r2
 8001a78:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	333b      	adds	r3, #59	; 0x3b
 8001a8a:	78ba      	ldrb	r2, [r7, #2]
 8001a8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	333f      	adds	r3, #63	; 0x3f
 8001a9e:	787a      	ldrb	r2, [r7, #1]
 8001aa0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001aa2:	7c3b      	ldrb	r3, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d114      	bne.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3342      	adds	r3, #66	; 0x42
 8001ab8:	2203      	movs	r2, #3
 8001aba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	333d      	adds	r3, #61	; 0x3d
 8001acc:	7f3a      	ldrb	r2, [r7, #28]
 8001ace:	701a      	strb	r2, [r3, #0]
 8001ad0:	e009      	b.n	8001ae6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3342      	adds	r3, #66	; 0x42
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ae6:	787b      	ldrb	r3, [r7, #1]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	f200 80d6 	bhi.w	8001c9a <HAL_HCD_HC_SubmitRequest+0x23a>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b05 	.word	0x08001b05
 8001af8:	08001c85 	.word	0x08001c85
 8001afc:	08001b71 	.word	0x08001b71
 8001b00:	08001bfb 	.word	0x08001bfb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b04:	7c3b      	ldrb	r3, [r7, #16]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	f040 80c9 	bne.w	8001c9e <HAL_HCD_HC_SubmitRequest+0x23e>
 8001b0c:	78bb      	ldrb	r3, [r7, #2]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 80c5 	bne.w	8001c9e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001b14:	8b3b      	ldrh	r3, [r7, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b1a:	78fa      	ldrb	r2, [r7, #3]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	440b      	add	r3, r1
 8001b28:	3351      	adds	r3, #81	; 0x51
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3351      	adds	r3, #81	; 0x51
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10a      	bne.n	8001b5a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	440b      	add	r3, r1
 8001b52:	3342      	adds	r3, #66	; 0x42
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b58:	e0a1      	b.n	8001c9e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	3342      	adds	r3, #66	; 0x42
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	701a      	strb	r2, [r3, #0]
      break;
 8001b6e:	e096      	b.n	8001c9e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b70:	78bb      	ldrb	r3, [r7, #2]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d120      	bne.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	3351      	adds	r3, #81	; 0x51
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10a      	bne.n	8001ba2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3342      	adds	r3, #66	; 0x42
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ba0:	e07e      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	3342      	adds	r3, #66	; 0x42
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	701a      	strb	r2, [r3, #0]
      break;
 8001bb6:	e073      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3350      	adds	r3, #80	; 0x50
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10a      	bne.n	8001be4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	3342      	adds	r3, #66	; 0x42
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
      break;
 8001be2:	e05d      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3342      	adds	r3, #66	; 0x42
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	701a      	strb	r2, [r3, #0]
      break;
 8001bf8:	e052      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001bfa:	78bb      	ldrb	r3, [r7, #2]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d120      	bne.n	8001c42 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3351      	adds	r3, #81	; 0x51
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10a      	bne.n	8001c2c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	3342      	adds	r3, #66	; 0x42
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c2a:	e039      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	3342      	adds	r3, #66	; 0x42
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	701a      	strb	r2, [r3, #0]
      break;
 8001c40:	e02e      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	3350      	adds	r3, #80	; 0x50
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10a      	bne.n	8001c6e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	3342      	adds	r3, #66	; 0x42
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
      break;
 8001c6c:	e018      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3342      	adds	r3, #66	; 0x42
 8001c7e:	2202      	movs	r2, #2
 8001c80:	701a      	strb	r2, [r3, #0]
      break;
 8001c82:	e00d      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	3342      	adds	r3, #66	; 0x42
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
      break;
 8001c98:	e002      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001c9a:	bf00      	nop
 8001c9c:	e000      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001c9e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	440b      	add	r3, r1
 8001cae:	3344      	adds	r3, #68	; 0x44
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	8b39      	ldrh	r1, [r7, #24]
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4403      	add	r3, r0
 8001cc4:	3348      	adds	r3, #72	; 0x48
 8001cc6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cc8:	78fa      	ldrb	r2, [r7, #3]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	335c      	adds	r3, #92	; 0x5c
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	334c      	adds	r3, #76	; 0x4c
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3339      	adds	r3, #57	; 0x39
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	335d      	adds	r3, #93	; 0x5d
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	3338      	adds	r3, #56	; 0x38
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	18d1      	adds	r1, r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	f003 fff8 	bl	8005d28 <USB_HC_StartXfer>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop

08001d44 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fd15 	bl	800578a <USB_GetMode>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	f040 80ef 	bne.w	8001f46 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fcf9 	bl	8005764 <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80e5 	beq.w	8001f44 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fcf0 	bl	8005764 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d8e:	d104      	bne.n	8001d9a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 fce0 	bl	8005764 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dae:	d104      	bne.n	8001dba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001db8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 fcd0 	bl	8005764 <USB_ReadInterrupts>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dce:	d104      	bne.n	8001dda <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 fcc0 	bl	8005764 <USB_ReadInterrupts>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d103      	bne.n	8001df6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2202      	movs	r2, #2
 8001df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fcb2 	bl	8005764 <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e0a:	d115      	bne.n	8001e38 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e14:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d108      	bne.n	8001e38 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f006 fa6a 	bl	8008300 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fda8 	bl	8005988 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fc91 	bl	8005764 <USB_ReadInterrupts>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d102      	bne.n	8001e54 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f001 f966 	bl	8003120 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fc83 	bl	8005764 <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d106      	bne.n	8001e76 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f006 fa2d 	bl	80082c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2208      	movs	r2, #8
 8001e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fc72 	bl	8005764 <USB_ReadInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e8a:	d138      	bne.n	8001efe <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f004 f88f 	bl	8005fb4 <USB_HC_ReadInterrupt>
 8001e96:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e025      	b.n	8001eea <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d018      	beq.n	8001ee4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec8:	d106      	bne.n	8001ed8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8cf 	bl	8002074 <HCD_HC_IN_IRQHandler>
 8001ed6:	e005      	b.n	8001ee4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	4619      	mov	r1, r3
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fcfd 	bl	80028de <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d3d4      	bcc.n	8001e9e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f003 fc2e 	bl	8005764 <USB_ReadInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d101      	bne.n	8001f16 <HAL_HCD_IRQHandler+0x1d2>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_HCD_IRQHandler+0x1d4>
 8001f16:	2300      	movs	r3, #0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d014      	beq.n	8001f46 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0210 	bic.w	r2, r2, #16
 8001f2a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f001 f84b 	bl	8002fc8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0210 	orr.w	r2, r2, #16
 8001f40:	619a      	str	r2, [r3, #24]
 8001f42:	e000      	b.n	8001f46 <HAL_HCD_IRQHandler+0x202>
      return;
 8001f44:	bf00      	nop
    }
  }
}
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_HCD_Start+0x16>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e013      	b.n	8001f8a <HAL_HCD_Start+0x3e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fb05 	bl	800557e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fd68 	bl	8005a50 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_HCD_Stop+0x16>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e00d      	b.n	8001fc4 <HAL_HCD_Stop+0x32>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 f949 	bl	800624c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 fd0f 	bl	80059fc <USB_ResetPort>
 8001fde:	4603      	mov	r3, r0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	440b      	add	r3, r1
 8002002:	335c      	adds	r3, #92	; 0x5c
 8002004:	781b      	ldrb	r3, [r3, #0]
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	334c      	adds	r3, #76	; 0x4c
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fd51 	bl	8005af0 <USB_GetCurrentFrame>
 800204e:	4603      	mov	r3, r0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fd2c 	bl	8005ac2 <USB_GetHostSpeed>
 800206a:	4603      	mov	r3, r0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d119      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	461a      	mov	r2, r3
 80020b2:	2304      	movs	r3, #4
 80020b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	0151      	lsls	r1, r2, #5
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	440a      	add	r2, r1
 80020cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	60d3      	str	r3, [r2, #12]
 80020d6:	e0ce      	b.n	8002276 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ee:	d12c      	bne.n	800214a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	461a      	mov	r2, r3
 80020fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002102:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	335d      	adds	r3, #93	; 0x5d
 8002114:	2207      	movs	r2, #7
 8002116:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	0151      	lsls	r1, r2, #5
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	440a      	add	r2, r1
 800212e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f003 ff47 	bl	8005fd6 <USB_HC_Halt>
 8002148:	e095      	b.n	8002276 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b20      	cmp	r3, #32
 800215e:	d109      	bne.n	8002174 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216c:	461a      	mov	r2, r3
 800216e:	2320      	movs	r3, #32
 8002170:	6093      	str	r3, [r2, #8]
 8002172:	e080      	b.n	8002276 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b08      	cmp	r3, #8
 8002188:	d134      	bne.n	80021f4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	0151      	lsls	r1, r2, #5
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	440a      	add	r2, r1
 80021a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	335d      	adds	r3, #93	; 0x5d
 80021ba:	2205      	movs	r2, #5
 80021bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	461a      	mov	r2, r3
 80021cc:	2310      	movs	r3, #16
 80021ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	461a      	mov	r2, r3
 80021de:	2308      	movs	r3, #8
 80021e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f003 fef2 	bl	8005fd6 <USB_HC_Halt>
 80021f2:	e040      	b.n	8002276 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220a:	d134      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	0151      	lsls	r1, r2, #5
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	440a      	add	r2, r1
 8002222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fecd 	bl	8005fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002248:	461a      	mov	r2, r3
 800224a:	2310      	movs	r3, #16
 800224c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	335d      	adds	r3, #93	; 0x5d
 800225e:	2208      	movs	r2, #8
 8002260:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002274:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800228c:	d122      	bne.n	80022d4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	0151      	lsls	r1, r2, #5
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	440a      	add	r2, r1
 80022a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fe8c 	bl	8005fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022d2:	e300      	b.n	80028d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	f040 80fd 	bne.w	80024e6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01b      	beq.n	800232c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	3348      	adds	r3, #72	; 0x48
 8002304:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0159      	lsls	r1, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	440b      	add	r3, r1
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002318:	1ad1      	subs	r1, r2, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4403      	add	r3, r0
 8002328:	334c      	adds	r3, #76	; 0x4c
 800232a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	335d      	adds	r3, #93	; 0x5d
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	3358      	adds	r3, #88	; 0x58
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	2301      	movs	r3, #1
 8002364:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	440b      	add	r3, r1
 8002374:	333f      	adds	r3, #63	; 0x3f
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	440b      	add	r3, r1
 800238a:	333f      	adds	r3, #63	; 0x3f
 800238c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800238e:	2b02      	cmp	r3, #2
 8002390:	d121      	bne.n	80023d6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	0151      	lsls	r1, r2, #5
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	440a      	add	r2, r1
 80023a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f003 fe0a 	bl	8005fd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	461a      	mov	r2, r3
 80023d0:	2310      	movs	r3, #16
 80023d2:	6093      	str	r3, [r2, #8]
 80023d4:	e070      	b.n	80024b8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	440b      	add	r3, r1
 80023e4:	333f      	adds	r3, #63	; 0x3f
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d12a      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	0151      	lsls	r1, r2, #5
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	440a      	add	r2, r1
 8002402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800240a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	b2d8      	uxtb	r0, r3
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	335c      	adds	r3, #92	; 0x5c
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	4601      	mov	r1, r0
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f005 ff6e 	bl	800831c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002440:	e03a      	b.n	80024b8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	333f      	adds	r3, #63	; 0x3f
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d12f      	bne.n	80024b8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	335c      	adds	r3, #92	; 0x5c
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	3350      	adds	r3, #80	; 0x50
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2d8      	uxtb	r0, r3
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	3350      	adds	r3, #80	; 0x50
 8002494:	4602      	mov	r2, r0
 8002496:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	b2d8      	uxtb	r0, r3
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	335c      	adds	r3, #92	; 0x5c
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	4601      	mov	r1, r0
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f005 ff32 	bl	800831c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	3350      	adds	r3, #80	; 0x50
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2d8      	uxtb	r0, r3
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	3350      	adds	r3, #80	; 0x50
 80024e0:	4602      	mov	r2, r0
 80024e2:	701a      	strb	r2, [r3, #0]
}
 80024e4:	e1f7      	b.n	80028d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	f040 811a 	bne.w	8002732 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	0151      	lsls	r1, r2, #5
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	440a      	add	r2, r1
 8002514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002518:	f023 0302 	bic.w	r3, r3, #2
 800251c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	440b      	add	r3, r1
 800252c:	335d      	adds	r3, #93	; 0x5d
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10a      	bne.n	800254a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	335c      	adds	r3, #92	; 0x5c
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e0d9      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	335d      	adds	r3, #93	; 0x5d
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d10a      	bne.n	8002576 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	440b      	add	r3, r1
 800256e:	335c      	adds	r3, #92	; 0x5c
 8002570:	2205      	movs	r2, #5
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e0c3      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	335d      	adds	r3, #93	; 0x5d
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d00a      	beq.n	80025a2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	335d      	adds	r3, #93	; 0x5d
 800259c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d156      	bne.n	8002650 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	3358      	adds	r3, #88	; 0x58
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	1c59      	adds	r1, r3, #1
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4403      	add	r3, r0
 80025c4:	3358      	adds	r3, #88	; 0x58
 80025c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	3358      	adds	r3, #88	; 0x58
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d914      	bls.n	8002608 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	3358      	adds	r3, #88	; 0x58
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	335c      	adds	r3, #92	; 0x5c
 8002602:	2204      	movs	r2, #4
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	e009      	b.n	800261c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	335c      	adds	r3, #92	; 0x5c
 8002618:	2202      	movs	r2, #2
 800261a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002632:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800263a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e056      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	440b      	add	r3, r1
 800265e:	335d      	adds	r3, #93	; 0x5d
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d123      	bne.n	80026ae <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	335c      	adds	r3, #92	; 0x5c
 8002676:	2202      	movs	r2, #2
 8002678:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002690:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002698:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	461a      	mov	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e027      	b.n	80026fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	335d      	adds	r3, #93	; 0x5d
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b07      	cmp	r3, #7
 80026c2:	d11c      	bne.n	80026fe <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	3358      	adds	r3, #88	; 0x58
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c59      	adds	r1, r3, #1
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4403      	add	r3, r0
 80026e6:	3358      	adds	r3, #88	; 0x58
 80026e8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	335c      	adds	r3, #92	; 0x5c
 80026fa:	2204      	movs	r2, #4
 80026fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	461a      	mov	r2, r3
 800270c:	2302      	movs	r3, #2
 800270e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	b2d8      	uxtb	r0, r3
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	335c      	adds	r3, #92	; 0x5c
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	4601      	mov	r1, r0
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f005 fdf6 	bl	800831c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002730:	e0d1      	b.n	80028d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b80      	cmp	r3, #128	; 0x80
 8002746:	d13e      	bne.n	80027c6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	0151      	lsls	r1, r2, #5
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	440a      	add	r2, r1
 800275e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	3358      	adds	r3, #88	; 0x58
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	1c59      	adds	r1, r3, #1
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4403      	add	r3, r0
 800278a:	3358      	adds	r3, #88	; 0x58
 800278c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	335d      	adds	r3, #93	; 0x5d
 800279e:	2206      	movs	r2, #6
 80027a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fc12 	bl	8005fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027be:	461a      	mov	r2, r3
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	6093      	str	r3, [r2, #8]
}
 80027c4:	e087      	b.n	80028d6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d17c      	bne.n	80028d6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	333f      	adds	r3, #63	; 0x3f
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d122      	bne.n	8002838 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	3358      	adds	r3, #88	; 0x58
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	0151      	lsls	r1, r2, #5
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	440a      	add	r2, r1
 800281c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f003 fbd0 	bl	8005fd6 <USB_HC_Halt>
 8002836:	e045      	b.n	80028c4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	440b      	add	r3, r1
 8002846:	333f      	adds	r3, #63	; 0x3f
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	333f      	adds	r3, #63	; 0x3f
 800285e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002860:	2b02      	cmp	r3, #2
 8002862:	d12f      	bne.n	80028c4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	440b      	add	r3, r1
 8002872:	3358      	adds	r3, #88	; 0x58
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d121      	bne.n	80028c4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	335d      	adds	r3, #93	; 0x5d
 8002890:	2203      	movs	r2, #3
 8002892:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	0151      	lsls	r1, r2, #5
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	440a      	add	r2, r1
 80028aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fb89 	bl	8005fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	2310      	movs	r3, #16
 80028d4:	6093      	str	r3, [r2, #8]
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b04      	cmp	r3, #4
 800290c:	d119      	bne.n	8002942 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	2304      	movs	r3, #4
 800291e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	0151      	lsls	r1, r2, #5
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	440a      	add	r2, r1
 8002936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002940:	e33e      	b.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b20      	cmp	r3, #32
 8002956:	d141      	bne.n	80029dc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	2320      	movs	r3, #32
 8002968:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	333d      	adds	r3, #61	; 0x3d
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	f040 831f 	bne.w	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	333d      	adds	r3, #61	; 0x3d
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	335c      	adds	r3, #92	; 0x5c
 80029a6:	2202      	movs	r2, #2
 80029a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	0151      	lsls	r1, r2, #5
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	440a      	add	r2, r1
 80029c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	4611      	mov	r1, r2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 fafe 	bl	8005fd6 <USB_HC_Halt>
}
 80029da:	e2f1      	b.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d13f      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	335d      	adds	r3, #93	; 0x5d
 8002a02:	2204      	movs	r2, #4
 8002a04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	333d      	adds	r3, #61	; 0x3d
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	3358      	adds	r3, #88	; 0x58
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	0151      	lsls	r1, r2, #5
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	440a      	add	r2, r1
 8002a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f003 fabc 	bl	8005fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2340      	movs	r3, #64	; 0x40
 8002a6e:	6093      	str	r3, [r2, #8]
}
 8002a70:	e2a6      	b.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a88:	d122      	bne.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	0151      	lsls	r1, r2, #5
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	440a      	add	r2, r1
 8002aa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa4:	f043 0302 	orr.w	r3, r3, #2
 8002aa8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 fa8e 	bl	8005fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002acc:	6093      	str	r3, [r2, #8]
}
 8002ace:	e277      	b.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d135      	bne.n	8002b52 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	3358      	adds	r3, #88	; 0x58
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	0151      	lsls	r1, r2, #5
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	440a      	add	r2, r1
 8002b10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 fa56 	bl	8005fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	461a      	mov	r2, r3
 8002b38:	2301      	movs	r3, #1
 8002b3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	335d      	adds	r3, #93	; 0x5d
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
}
 8002b50:	e236      	b.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d12b      	bne.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	2308      	movs	r3, #8
 8002b78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	0151      	lsls	r1, r2, #5
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	440a      	add	r2, r1
 8002b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fa16 	bl	8005fd6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	335d      	adds	r3, #93	; 0x5d
 8002bba:	2205      	movs	r2, #5
 8002bbc:	701a      	strb	r2, [r3, #0]
}
 8002bbe:	e1ff      	b.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d155      	bne.n	8002c82 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	3358      	adds	r3, #88	; 0x58
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	335d      	adds	r3, #93	; 0x5d
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	333d      	adds	r3, #61	; 0x3d
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d114      	bne.n	8002c3e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	333c      	adds	r3, #60	; 0x3c
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	333d      	adds	r3, #61	; 0x3d
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	0151      	lsls	r1, r2, #5
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	440a      	add	r2, r1
 8002c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 f9b4 	bl	8005fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	6093      	str	r3, [r2, #8]
}
 8002c80:	e19e      	b.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c94:	2b80      	cmp	r3, #128	; 0x80
 8002c96:	d12b      	bne.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	0151      	lsls	r1, r2, #5
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	440a      	add	r2, r1
 8002cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f003 f987 	bl	8005fd6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	335d      	adds	r3, #93	; 0x5d
 8002cd8:	2206      	movs	r2, #6
 8002cda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	6093      	str	r3, [r2, #8]
}
 8002cee:	e167      	b.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d06:	d135      	bne.n	8002d74 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	0151      	lsls	r1, r2, #5
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	440a      	add	r2, r1
 8002d1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 f94f 	bl	8005fd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	2310      	movs	r3, #16
 8002d48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d56:	461a      	mov	r2, r3
 8002d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	335d      	adds	r3, #93	; 0x5d
 8002d6e:	2208      	movs	r2, #8
 8002d70:	701a      	strb	r2, [r3, #0]
}
 8002d72:	e125      	b.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	f040 811a 	bne.w	8002fc0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	0151      	lsls	r1, r2, #5
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	440a      	add	r2, r1
 8002da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002da6:	f023 0302 	bic.w	r3, r3, #2
 8002daa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	335d      	adds	r3, #93	; 0x5d
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d137      	bne.n	8002e32 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	335c      	adds	r3, #92	; 0x5c
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	333f      	adds	r3, #63	; 0x3f
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d00b      	beq.n	8002e04 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	333f      	adds	r3, #63	; 0x3f
 8002dfc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	f040 80c5 	bne.w	8002f8e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	3351      	adds	r3, #81	; 0x51
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	f083 0301 	eor.w	r3, r3, #1
 8002e1a:	b2d8      	uxtb	r0, r3
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	3351      	adds	r3, #81	; 0x51
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e0ad      	b.n	8002f8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	335d      	adds	r3, #93	; 0x5d
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d10a      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	335c      	adds	r3, #92	; 0x5c
 8002e58:	2202      	movs	r2, #2
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	e097      	b.n	8002f8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	335d      	adds	r3, #93	; 0x5d
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d10a      	bne.n	8002e8a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	335c      	adds	r3, #92	; 0x5c
 8002e84:	2202      	movs	r2, #2
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	e081      	b.n	8002f8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	335d      	adds	r3, #93	; 0x5d
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b05      	cmp	r3, #5
 8002e9e:	d10a      	bne.n	8002eb6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	335c      	adds	r3, #92	; 0x5c
 8002eb0:	2205      	movs	r2, #5
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e06b      	b.n	8002f8e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	440b      	add	r3, r1
 8002ec4:	335d      	adds	r3, #93	; 0x5d
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d00a      	beq.n	8002ee2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	440b      	add	r3, r1
 8002eda:	335d      	adds	r3, #93	; 0x5d
 8002edc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d155      	bne.n	8002f8e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	3358      	adds	r3, #88	; 0x58
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	1c59      	adds	r1, r3, #1
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4403      	add	r3, r0
 8002f04:	3358      	adds	r3, #88	; 0x58
 8002f06:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	440b      	add	r3, r1
 8002f16:	3358      	adds	r3, #88	; 0x58
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d914      	bls.n	8002f48 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3358      	adds	r3, #88	; 0x58
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	440b      	add	r3, r1
 8002f40:	335c      	adds	r3, #92	; 0x5c
 8002f42:	2204      	movs	r2, #4
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e009      	b.n	8002f5c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	440b      	add	r3, r1
 8002f56:	335c      	adds	r3, #92	; 0x5c
 8002f58:	2202      	movs	r2, #2
 8002f5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	b2d8      	uxtb	r0, r3
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	335c      	adds	r3, #92	; 0x5c
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4601      	mov	r1, r0
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f005 f9ae 	bl	800831c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	0c5b      	lsrs	r3, r3, #17
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ffc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d003      	beq.n	800300c <HCD_RXQLVL_IRQHandler+0x44>
 8003004:	2b05      	cmp	r3, #5
 8003006:	f000 8082 	beq.w	800310e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800300a:	e083      	b.n	8003114 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d07f      	beq.n	8003112 <HCD_RXQLVL_IRQHandler+0x14a>
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	440b      	add	r3, r1
 8003020:	3344      	adds	r3, #68	; 0x44
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d074      	beq.n	8003112 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	3344      	adds	r3, #68	; 0x44
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	b292      	uxth	r2, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f002 fb65 	bl	8005712 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	440b      	add	r3, r1
 8003056:	3344      	adds	r3, #68	; 0x44
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	18d1      	adds	r1, r2, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4403      	add	r3, r0
 800306c:	3344      	adds	r3, #68	; 0x44
 800306e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	440b      	add	r3, r1
 800307e:	334c      	adds	r3, #76	; 0x4c
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	18d1      	adds	r1, r2, r3
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4403      	add	r3, r0
 8003094:	334c      	adds	r3, #76	; 0x4c
 8003096:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HCD_RXQLVL_IRQHandler+0x154>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d031      	beq.n	8003112 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	461a      	mov	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	3350      	adds	r3, #80	; 0x50
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	f083 0301 	eor.w	r3, r3, #1
 80030f6:	b2d8      	uxtb	r0, r3
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	3350      	adds	r3, #80	; 0x50
 8003108:	4602      	mov	r2, r0
 800310a:	701a      	strb	r2, [r3, #0]
      break;
 800310c:	e001      	b.n	8003112 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800310e:	bf00      	nop
 8003110:	e000      	b.n	8003114 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003112:	bf00      	nop
  }
}
 8003114:	bf00      	nop
 8003116:	3728      	adds	r7, #40	; 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	1ff80000 	.word	0x1ff80000

08003120 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800314c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d10b      	bne.n	8003170 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f005 f8be 	bl	80082e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f043 0302 	orr.w	r3, r3, #2
 800316e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b08      	cmp	r3, #8
 8003178:	d132      	bne.n	80031e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d126      	bne.n	80031da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d113      	bne.n	80031bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800319a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800319e:	d106      	bne.n	80031ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2102      	movs	r1, #2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 fbee 	bl	8005988 <USB_InitFSLSPClkSel>
 80031ac:	e011      	b.n	80031d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2101      	movs	r1, #1
 80031b4:	4618      	mov	r0, r3
 80031b6:	f002 fbe7 	bl	8005988 <USB_InitFSLSPClkSel>
 80031ba:	e00a      	b.n	80031d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d106      	bne.n	80031d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ca:	461a      	mov	r2, r3
 80031cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f005 f8b0 	bl	8008338 <HAL_HCD_PortEnabled_Callback>
 80031d8:	e002      	b.n	80031e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f005 f8ba 	bl	8008354 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d103      	bne.n	80031f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f043 0320 	orr.w	r3, r3, #32
 80031f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6013      	str	r3, [r2, #0]
}
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e11f      	b.n	800345a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fcea 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2224      	movs	r2, #36	; 0x24
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800325a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800326a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800326c:	f001 f9de 	bl	800462c <HAL_RCC_GetPCLK1Freq>
 8003270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4a7b      	ldr	r2, [pc, #492]	; (8003464 <HAL_I2C_Init+0x25c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d807      	bhi.n	800328c <HAL_I2C_Init+0x84>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a7a      	ldr	r2, [pc, #488]	; (8003468 <HAL_I2C_Init+0x260>)
 8003280:	4293      	cmp	r3, r2
 8003282:	bf94      	ite	ls
 8003284:	2301      	movls	r3, #1
 8003286:	2300      	movhi	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e006      	b.n	800329a <HAL_I2C_Init+0x92>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a77      	ldr	r2, [pc, #476]	; (800346c <HAL_I2C_Init+0x264>)
 8003290:	4293      	cmp	r3, r2
 8003292:	bf94      	ite	ls
 8003294:	2301      	movls	r3, #1
 8003296:	2300      	movhi	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0db      	b.n	800345a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a72      	ldr	r2, [pc, #456]	; (8003470 <HAL_I2C_Init+0x268>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	0c9b      	lsrs	r3, r3, #18
 80032ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4a64      	ldr	r2, [pc, #400]	; (8003464 <HAL_I2C_Init+0x25c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d802      	bhi.n	80032dc <HAL_I2C_Init+0xd4>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3301      	adds	r3, #1
 80032da:	e009      	b.n	80032f0 <HAL_I2C_Init+0xe8>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	4a63      	ldr	r2, [pc, #396]	; (8003474 <HAL_I2C_Init+0x26c>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	3301      	adds	r3, #1
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4956      	ldr	r1, [pc, #344]	; (8003464 <HAL_I2C_Init+0x25c>)
 800330c:	428b      	cmp	r3, r1
 800330e:	d80d      	bhi.n	800332c <HAL_I2C_Init+0x124>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	1e59      	subs	r1, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	fbb1 f3f3 	udiv	r3, r1, r3
 800331e:	3301      	adds	r3, #1
 8003320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003324:	2b04      	cmp	r3, #4
 8003326:	bf38      	it	cc
 8003328:	2304      	movcc	r3, #4
 800332a:	e04f      	b.n	80033cc <HAL_I2C_Init+0x1c4>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d111      	bne.n	8003358 <HAL_I2C_Init+0x150>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e58      	subs	r0, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	440b      	add	r3, r1
 8003342:	fbb0 f3f3 	udiv	r3, r0, r3
 8003346:	3301      	adds	r3, #1
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf0c      	ite	eq
 8003350:	2301      	moveq	r3, #1
 8003352:	2300      	movne	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	e012      	b.n	800337e <HAL_I2C_Init+0x176>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1e58      	subs	r0, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	0099      	lsls	r1, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Init+0x17e>
 8003382:	2301      	movs	r3, #1
 8003384:	e022      	b.n	80033cc <HAL_I2C_Init+0x1c4>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10e      	bne.n	80033ac <HAL_I2C_Init+0x1a4>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1e58      	subs	r0, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	440b      	add	r3, r1
 800339c:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a0:	3301      	adds	r3, #1
 80033a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033aa:	e00f      	b.n	80033cc <HAL_I2C_Init+0x1c4>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e58      	subs	r0, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	0099      	lsls	r1, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	fbb0 f3f3 	udiv	r3, r0, r3
 80033c2:	3301      	adds	r3, #1
 80033c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	6809      	ldr	r1, [r1, #0]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6911      	ldr	r1, [r2, #16]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68d2      	ldr	r2, [r2, #12]
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	430b      	orrs	r3, r1
 800340e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	000186a0 	.word	0x000186a0
 8003468:	001e847f 	.word	0x001e847f
 800346c:	003d08ff 	.word	0x003d08ff
 8003470:	431bde83 	.word	0x431bde83
 8003474:	10624dd3 	.word	0x10624dd3

08003478 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e128      	b.n	80036dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a90      	ldr	r2, [pc, #576]	; (80036e4 <HAL_I2S_Init+0x26c>)
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7fd fbf7 	bl	8000c98 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034c0:	f023 030f 	bic.w	r3, r3, #15
 80034c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2202      	movs	r2, #2
 80034cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d060      	beq.n	8003598 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d102      	bne.n	80034e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80034de:	2310      	movs	r3, #16
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	e001      	b.n	80034e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d802      	bhi.n	80034f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80034f6:	2001      	movs	r0, #1
 80034f8:	f001 f99c 	bl	8004834 <HAL_RCCEx_GetPeriphCLKFreq>
 80034fc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003506:	d125      	bne.n	8003554 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	fbb2 f2f3 	udiv	r2, r2, r3
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	461a      	mov	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	3305      	adds	r3, #5
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	e01f      	b.n	8003572 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	fbb2 f2f3 	udiv	r2, r2, r3
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	461a      	mov	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	3305      	adds	r3, #5
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	e00e      	b.n	8003572 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fbb2 f2f3 	udiv	r2, r2, r3
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	461a      	mov	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	3305      	adds	r3, #5
 8003570:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4a5c      	ldr	r2, [pc, #368]	; (80036e8 <HAL_I2S_Init+0x270>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	08db      	lsrs	r3, r3, #3
 800357c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	e003      	b.n	80035a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003598:	2302      	movs	r3, #2
 800359a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d902      	bls.n	80035ac <HAL_I2S_Init+0x134>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	2bff      	cmp	r3, #255	; 0xff
 80035aa:	d907      	bls.n	80035bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	f043 0210 	orr.w	r2, r3, #16
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e08f      	b.n	80036dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	ea42 0103 	orr.w	r1, r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035da:	f023 030f 	bic.w	r3, r3, #15
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6851      	ldr	r1, [r2, #4]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6892      	ldr	r2, [r2, #8]
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68d2      	ldr	r2, [r2, #12]
 80035ec:	4311      	orrs	r1, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6992      	ldr	r2, [r2, #24]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d161      	bne.n	80036cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a38      	ldr	r2, [pc, #224]	; (80036ec <HAL_I2S_Init+0x274>)
 800360c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a37      	ldr	r2, [pc, #220]	; (80036f0 <HAL_I2S_Init+0x278>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d101      	bne.n	800361c <HAL_I2S_Init+0x1a4>
 8003618:	4b36      	ldr	r3, [pc, #216]	; (80036f4 <HAL_I2S_Init+0x27c>)
 800361a:	e001      	b.n	8003620 <HAL_I2S_Init+0x1a8>
 800361c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	4932      	ldr	r1, [pc, #200]	; (80036f0 <HAL_I2S_Init+0x278>)
 8003628:	428a      	cmp	r2, r1
 800362a:	d101      	bne.n	8003630 <HAL_I2S_Init+0x1b8>
 800362c:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <HAL_I2S_Init+0x27c>)
 800362e:	e001      	b.n	8003634 <HAL_I2S_Init+0x1bc>
 8003630:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003634:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003638:	f023 030f 	bic.w	r3, r3, #15
 800363c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2b      	ldr	r2, [pc, #172]	; (80036f0 <HAL_I2S_Init+0x278>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_I2S_Init+0x1d4>
 8003648:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <HAL_I2S_Init+0x27c>)
 800364a:	e001      	b.n	8003650 <HAL_I2S_Init+0x1d8>
 800364c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003650:	2202      	movs	r2, #2
 8003652:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <HAL_I2S_Init+0x278>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_I2S_Init+0x1ea>
 800365e:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <HAL_I2S_Init+0x27c>)
 8003660:	e001      	b.n	8003666 <HAL_I2S_Init+0x1ee>
 8003662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003672:	d003      	beq.n	800367c <HAL_I2S_Init+0x204>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d103      	bne.n	8003684 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800367c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	e001      	b.n	8003688 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	b299      	uxth	r1, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800369e:	4303      	orrs	r3, r0
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	430b      	orrs	r3, r1
 80036a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80036a6:	4313      	orrs	r3, r2
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	897b      	ldrh	r3, [r7, #10]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a0d      	ldr	r2, [pc, #52]	; (80036f0 <HAL_I2S_Init+0x278>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_I2S_Init+0x24c>
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <HAL_I2S_Init+0x27c>)
 80036c2:	e001      	b.n	80036c8 <HAL_I2S_Init+0x250>
 80036c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036c8:	897a      	ldrh	r2, [r7, #10]
 80036ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	080037ef 	.word	0x080037ef
 80036e8:	cccccccd 	.word	0xcccccccd
 80036ec:	08003905 	.word	0x08003905
 80036f0:	40003800 	.word	0x40003800
 80036f4:	40003400 	.word	0x40003400

080036f8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c9a      	adds	r2, r3, #2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10e      	bne.n	8003788 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003778:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffb8 	bl	80036f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	b292      	uxth	r2, r2
 80037a4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	1c9a      	adds	r2, r3, #2
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10e      	bne.n	80037e6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff93 	bl	800370c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b04      	cmp	r3, #4
 8003808:	d13a      	bne.n	8003880 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d109      	bne.n	8003828 <I2S_IRQHandler+0x3a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b40      	cmp	r3, #64	; 0x40
 8003820:	d102      	bne.n	8003828 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ffb4 	bl	8003790 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d126      	bne.n	8003880 <I2S_IRQHandler+0x92>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b20      	cmp	r3, #32
 800383e:	d11f      	bne.n	8003880 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800384e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f043 0202 	orr.w	r2, r3, #2
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ff50 	bl	8003720 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b03      	cmp	r3, #3
 800388a:	d136      	bne.n	80038fa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d109      	bne.n	80038aa <I2S_IRQHandler+0xbc>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b80      	cmp	r3, #128	; 0x80
 80038a2:	d102      	bne.n	80038aa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff45 	bl	8003734 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d122      	bne.n	80038fa <I2S_IRQHandler+0x10c>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d11b      	bne.n	80038fa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ec:	f043 0204 	orr.w	r2, r3, #4
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff13 	bl	8003720 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4aa2      	ldr	r2, [pc, #648]	; (8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800391e:	4ba2      	ldr	r3, [pc, #648]	; (8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003920:	e001      	b.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003922:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a9b      	ldr	r2, [pc, #620]	; (8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800393c:	4b9a      	ldr	r3, [pc, #616]	; (8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800393e:	e001      	b.n	8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003950:	d004      	beq.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 8099 	bne.w	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d107      	bne.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f925 	bl	8003bc0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f9c8 	bl	8003d20 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d13a      	bne.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d035      	beq.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a7e      	ldr	r2, [pc, #504]	; (8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039ae:	4b7e      	ldr	r3, [pc, #504]	; (8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039b0:	e001      	b.n	80039b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4979      	ldr	r1, [pc, #484]	; (8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039be:	428b      	cmp	r3, r1
 80039c0:	d101      	bne.n	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039c2:	4b79      	ldr	r3, [pc, #484]	; (8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039c4:	e001      	b.n	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fe88 	bl	8003720 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	f040 80be 	bne.w	8003b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80b8 	beq.w	8003b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a59      	ldr	r2, [pc, #356]	; (8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a42:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a44:	e001      	b.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4954      	ldr	r1, [pc, #336]	; (8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a52:	428b      	cmp	r3, r1
 8003a54:	d101      	bne.n	8003a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a56:	4b54      	ldr	r3, [pc, #336]	; (8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a58:	e001      	b.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f043 0204 	orr.w	r2, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fe4a 	bl	8003720 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a8c:	e084      	b.n	8003b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d107      	bne.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8be 	bl	8003c24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f8fd 	bl	8003cbc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d12f      	bne.n	8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d02a      	beq.n	8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ae4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2e      	ldr	r2, [pc, #184]	; (8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003af0:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003af2:	e001      	b.n	8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4929      	ldr	r1, [pc, #164]	; (8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d101      	bne.n	8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b06:	e001      	b.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f043 0202 	orr.w	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff fdfa 	bl	8003720 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d131      	bne.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02c      	beq.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b4a:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b4c:	e001      	b.n	8003b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4912      	ldr	r1, [pc, #72]	; (8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b5a:	428b      	cmp	r3, r1
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b60:	e001      	b.n	8003b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b7a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	f043 0204 	orr.w	r2, r3, #4
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff fdc5 	bl	8003720 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b96:	e000      	b.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b98:	bf00      	nop
}
 8003b9a:	bf00      	nop
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40003800 	.word	0x40003800
 8003ba8:	40003400 	.word	0x40003400

08003bac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	1c99      	adds	r1, r3, #2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6251      	str	r1, [r2, #36]	; 0x24
 8003bd2:	881a      	ldrh	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d113      	bne.n	8003c1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ffc9 	bl	8003bac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	1c99      	adds	r1, r3, #2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6251      	str	r1, [r2, #36]	; 0x24
 8003c36:	8819      	ldrh	r1, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <I2SEx_TxISR_I2SExt+0x90>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <I2SEx_TxISR_I2SExt+0x22>
 8003c42:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <I2SEx_TxISR_I2SExt+0x94>)
 8003c44:	e001      	b.n	8003c4a <I2SEx_TxISR_I2SExt+0x26>
 8003c46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c4a:	460a      	mov	r2, r1
 8003c4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d121      	bne.n	8003caa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <I2SEx_TxISR_I2SExt+0x90>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <I2SEx_TxISR_I2SExt+0x50>
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <I2SEx_TxISR_I2SExt+0x94>)
 8003c72:	e001      	b.n	8003c78 <I2SEx_TxISR_I2SExt+0x54>
 8003c74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	490d      	ldr	r1, [pc, #52]	; (8003cb4 <I2SEx_TxISR_I2SExt+0x90>)
 8003c80:	428b      	cmp	r3, r1
 8003c82:	d101      	bne.n	8003c88 <I2SEx_TxISR_I2SExt+0x64>
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <I2SEx_TxISR_I2SExt+0x94>)
 8003c86:	e001      	b.n	8003c8c <I2SEx_TxISR_I2SExt+0x68>
 8003c88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff81 	bl	8003bac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40003800 	.word	0x40003800
 8003cb8:	40003400 	.word	0x40003400

08003cbc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68d8      	ldr	r0, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	1c99      	adds	r1, r3, #2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cd4:	b282      	uxth	r2, r0
 8003cd6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d113      	bne.n	8003d18 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cfe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ff4a 	bl	8003bac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a20      	ldr	r2, [pc, #128]	; (8003db0 <I2SEx_RxISR_I2SExt+0x90>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <I2SEx_RxISR_I2SExt+0x16>
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <I2SEx_RxISR_I2SExt+0x94>)
 8003d34:	e001      	b.n	8003d3a <I2SEx_RxISR_I2SExt+0x1a>
 8003d36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d3a:	68d8      	ldr	r0, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	1c99      	adds	r1, r3, #2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d46:	b282      	uxth	r2, r0
 8003d48:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d121      	bne.n	8003da6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a12      	ldr	r2, [pc, #72]	; (8003db0 <I2SEx_RxISR_I2SExt+0x90>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <I2SEx_RxISR_I2SExt+0x50>
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <I2SEx_RxISR_I2SExt+0x94>)
 8003d6e:	e001      	b.n	8003d74 <I2SEx_RxISR_I2SExt+0x54>
 8003d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	490d      	ldr	r1, [pc, #52]	; (8003db0 <I2SEx_RxISR_I2SExt+0x90>)
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	d101      	bne.n	8003d84 <I2SEx_RxISR_I2SExt+0x64>
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <I2SEx_RxISR_I2SExt+0x94>)
 8003d82:	e001      	b.n	8003d88 <I2SEx_RxISR_I2SExt+0x68>
 8003d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d8c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ff03 	bl	8003bac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40003800 	.word	0x40003800
 8003db4:	40003400 	.word	0x40003400

08003db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e25b      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d075      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dd6:	4ba3      	ldr	r3, [pc, #652]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d00c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de2:	4ba0      	ldr	r3, [pc, #640]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d112      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b9d      	ldr	r3, [pc, #628]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfa:	d10b      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b99      	ldr	r3, [pc, #612]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05b      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x108>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d157      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e236      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x74>
 8003e1e:	4b91      	ldr	r3, [pc, #580]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a90      	ldr	r2, [pc, #576]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x98>
 8003e36:	4b8b      	ldr	r3, [pc, #556]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a8a      	ldr	r2, [pc, #552]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a87      	ldr	r2, [pc, #540]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e50:	4b84      	ldr	r3, [pc, #528]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a83      	ldr	r2, [pc, #524]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b81      	ldr	r3, [pc, #516]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a80      	ldr	r2, [pc, #512]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fd f9fe 	bl	8001270 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fd f9fa 	bl	8001270 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e1fb      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0xc0>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd f9ea 	bl	8001270 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fd f9e6 	bl	8001270 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e1e7      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	4b6c      	ldr	r3, [pc, #432]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xe8>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d063      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ece:	4b65      	ldr	r3, [pc, #404]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eda:	4b62      	ldr	r3, [pc, #392]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d11c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	4b5c      	ldr	r3, [pc, #368]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e1bb      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0a:	4b56      	ldr	r3, [pc, #344]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4952      	ldr	r1, [pc, #328]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	e03a      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f28:	4b4f      	ldr	r3, [pc, #316]	; (8004068 <HAL_RCC_OscConfig+0x2b0>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fd f99f 	bl	8001270 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fd f99b 	bl	8001270 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e19c      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f48:	4b46      	ldr	r3, [pc, #280]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4940      	ldr	r1, [pc, #256]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	e015      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6a:	4b3f      	ldr	r3, [pc, #252]	; (8004068 <HAL_RCC_OscConfig+0x2b0>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fd f97e 	bl	8001270 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f78:	f7fd f97a 	bl	8001270 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e17b      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	4b36      	ldr	r3, [pc, #216]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d030      	beq.n	8004004 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003faa:	4b30      	ldr	r3, [pc, #192]	; (800406c <HAL_RCC_OscConfig+0x2b4>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd f95e 	bl	8001270 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7fd f95a 	bl	8001270 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e15b      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x200>
 8003fd6:	e015      	b.n	8004004 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd8:	4b24      	ldr	r3, [pc, #144]	; (800406c <HAL_RCC_OscConfig+0x2b4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fde:	f7fd f947 	bl	8001270 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe6:	f7fd f943 	bl	8001270 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e144      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80a0 	beq.w	8004152 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_OscConfig+0x2b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d121      	bne.n	8004092 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <HAL_RCC_OscConfig+0x2b8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <HAL_RCC_OscConfig+0x2b8>)
 8004054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405a:	f7fd f909 	bl	8001270 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	e011      	b.n	8004086 <HAL_RCC_OscConfig+0x2ce>
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	42470000 	.word	0x42470000
 800406c:	42470e80 	.word	0x42470e80
 8004070:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004074:	f7fd f8fc 	bl	8001270 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0fd      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004086:	4b81      	ldr	r3, [pc, #516]	; (800428c <HAL_RCC_OscConfig+0x4d4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x2f0>
 800409a:	4b7d      	ldr	r3, [pc, #500]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a7c      	ldr	r2, [pc, #496]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	e01c      	b.n	80040e2 <HAL_RCC_OscConfig+0x32a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d10c      	bne.n	80040ca <HAL_RCC_OscConfig+0x312>
 80040b0:	4b77      	ldr	r3, [pc, #476]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	4a76      	ldr	r2, [pc, #472]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040b6:	f043 0304 	orr.w	r3, r3, #4
 80040ba:	6713      	str	r3, [r2, #112]	; 0x70
 80040bc:	4b74      	ldr	r3, [pc, #464]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a73      	ldr	r2, [pc, #460]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
 80040c8:	e00b      	b.n	80040e2 <HAL_RCC_OscConfig+0x32a>
 80040ca:	4b71      	ldr	r3, [pc, #452]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	4a70      	ldr	r2, [pc, #448]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6713      	str	r3, [r2, #112]	; 0x70
 80040d6:	4b6e      	ldr	r3, [pc, #440]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a6d      	ldr	r2, [pc, #436]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040dc:	f023 0304 	bic.w	r3, r3, #4
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ea:	f7fd f8c1 	bl	8001270 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fd f8bd 	bl	8001270 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e0bc      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	4b61      	ldr	r3, [pc, #388]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ee      	beq.n	80040f2 <HAL_RCC_OscConfig+0x33a>
 8004114:	e014      	b.n	8004140 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7fd f8ab 	bl	8001270 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fd f8a7 	bl	8001270 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0a6      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	4b56      	ldr	r3, [pc, #344]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ee      	bne.n	800411e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d105      	bne.n	8004152 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004146:	4b52      	ldr	r3, [pc, #328]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4a51      	ldr	r2, [pc, #324]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800414c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004150:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8092 	beq.w	8004280 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800415c:	4b4c      	ldr	r3, [pc, #304]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d05c      	beq.n	8004222 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d141      	bne.n	80041f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004170:	4b48      	ldr	r3, [pc, #288]	; (8004294 <HAL_RCC_OscConfig+0x4dc>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004176:	f7fd f87b 	bl	8001270 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417e:	f7fd f877 	bl	8001270 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e078      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004190:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f0      	bne.n	800417e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	019b      	lsls	r3, r3, #6
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	3b01      	subs	r3, #1
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	4933      	ldr	r1, [pc, #204]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c6:	4b33      	ldr	r3, [pc, #204]	; (8004294 <HAL_RCC_OscConfig+0x4dc>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fd f850 	bl	8001270 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fd f84c 	bl	8001270 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e04d      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x41c>
 80041f2:	e045      	b.n	8004280 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0x4dc>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fa:	f7fd f839 	bl	8001270 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004202:	f7fd f835 	bl	8001270 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e036      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004214:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f0      	bne.n	8004202 <HAL_RCC_OscConfig+0x44a>
 8004220:	e02e      	b.n	8004280 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e029      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800422e:	4b18      	ldr	r3, [pc, #96]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	429a      	cmp	r2, r3
 8004240:	d11c      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d115      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004256:	4013      	ands	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800425c:	4293      	cmp	r3, r2
 800425e:	d10d      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d106      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40007000 	.word	0x40007000
 8004290:	40023800 	.word	0x40023800
 8004294:	42470060 	.word	0x42470060

08004298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0cc      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ac:	4b68      	ldr	r3, [pc, #416]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d90c      	bls.n	80042d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b65      	ldr	r3, [pc, #404]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b63      	ldr	r3, [pc, #396]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0b8      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d020      	beq.n	8004322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a58      	ldr	r2, [pc, #352]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004304:	4b53      	ldr	r3, [pc, #332]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a52      	ldr	r2, [pc, #328]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800430e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	494d      	ldr	r1, [pc, #308]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d044      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d119      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e07f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d003      	beq.n	8004356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004352:	2b03      	cmp	r3, #3
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004356:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e06f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004366:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e067      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004376:	4b37      	ldr	r3, [pc, #220]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f023 0203 	bic.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4934      	ldr	r1, [pc, #208]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	4313      	orrs	r3, r2
 8004386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004388:	f7fc ff72 	bl	8001270 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004390:	f7fc ff6e 	bl	8001270 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	; 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e04f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 020c 	and.w	r2, r3, #12
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1eb      	bne.n	8004390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b8:	4b25      	ldr	r3, [pc, #148]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d20c      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e032      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4916      	ldr	r1, [pc, #88]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	490e      	ldr	r1, [pc, #56]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800441e:	f000 f821 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004422:	4601      	mov	r1, r0
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	5cd3      	ldrb	r3, [r2, r3]
 8004432:	fa21 f303 	lsr.w	r3, r1, r3
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_RCC_ClockConfig+0x1c8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fed2 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023c00 	.word	0x40023c00
 8004454:	40023800 	.word	0x40023800
 8004458:	0800896c 	.word	0x0800896c
 800445c:	20000000 	.word	0x20000000
 8004460:	20000004 	.word	0x20000004

08004464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	2300      	movs	r3, #0
 8004474:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800447a:	4b63      	ldr	r3, [pc, #396]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b04      	cmp	r3, #4
 8004484:	d007      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x32>
 8004486:	2b08      	cmp	r3, #8
 8004488:	d008      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x38>
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 80b4 	bne.w	80045f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b5e      	ldr	r3, [pc, #376]	; (800460c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004492:	60bb      	str	r3, [r7, #8]
       break;
 8004494:	e0b3      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004496:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004498:	60bb      	str	r3, [r7, #8]
      break;
 800449a:	e0b0      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800449c:	4b5a      	ldr	r3, [pc, #360]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a6:	4b58      	ldr	r3, [pc, #352]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d04a      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b2:	4b55      	ldr	r3, [pc, #340]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	f04f 0400 	mov.w	r4, #0
 80044bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	ea03 0501 	and.w	r5, r3, r1
 80044c8:	ea04 0602 	and.w	r6, r4, r2
 80044cc:	4629      	mov	r1, r5
 80044ce:	4632      	mov	r2, r6
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	f04f 0400 	mov.w	r4, #0
 80044d8:	0154      	lsls	r4, r2, #5
 80044da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044de:	014b      	lsls	r3, r1, #5
 80044e0:	4619      	mov	r1, r3
 80044e2:	4622      	mov	r2, r4
 80044e4:	1b49      	subs	r1, r1, r5
 80044e6:	eb62 0206 	sbc.w	r2, r2, r6
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	f04f 0400 	mov.w	r4, #0
 80044f2:	0194      	lsls	r4, r2, #6
 80044f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044f8:	018b      	lsls	r3, r1, #6
 80044fa:	1a5b      	subs	r3, r3, r1
 80044fc:	eb64 0402 	sbc.w	r4, r4, r2
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	00e2      	lsls	r2, r4, #3
 800450a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800450e:	00d9      	lsls	r1, r3, #3
 8004510:	460b      	mov	r3, r1
 8004512:	4614      	mov	r4, r2
 8004514:	195b      	adds	r3, r3, r5
 8004516:	eb44 0406 	adc.w	r4, r4, r6
 800451a:	f04f 0100 	mov.w	r1, #0
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	0262      	lsls	r2, r4, #9
 8004524:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004528:	0259      	lsls	r1, r3, #9
 800452a:	460b      	mov	r3, r1
 800452c:	4614      	mov	r4, r2
 800452e:	4618      	mov	r0, r3
 8004530:	4621      	mov	r1, r4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f04f 0400 	mov.w	r4, #0
 8004538:	461a      	mov	r2, r3
 800453a:	4623      	mov	r3, r4
 800453c:	f7fb fe4c 	bl	80001d8 <__aeabi_uldivmod>
 8004540:	4603      	mov	r3, r0
 8004542:	460c      	mov	r4, r1
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e049      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004548:	4b2f      	ldr	r3, [pc, #188]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	099b      	lsrs	r3, r3, #6
 800454e:	f04f 0400 	mov.w	r4, #0
 8004552:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	ea03 0501 	and.w	r5, r3, r1
 800455e:	ea04 0602 	and.w	r6, r4, r2
 8004562:	4629      	mov	r1, r5
 8004564:	4632      	mov	r2, r6
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	f04f 0400 	mov.w	r4, #0
 800456e:	0154      	lsls	r4, r2, #5
 8004570:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004574:	014b      	lsls	r3, r1, #5
 8004576:	4619      	mov	r1, r3
 8004578:	4622      	mov	r2, r4
 800457a:	1b49      	subs	r1, r1, r5
 800457c:	eb62 0206 	sbc.w	r2, r2, r6
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	f04f 0400 	mov.w	r4, #0
 8004588:	0194      	lsls	r4, r2, #6
 800458a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800458e:	018b      	lsls	r3, r1, #6
 8004590:	1a5b      	subs	r3, r3, r1
 8004592:	eb64 0402 	sbc.w	r4, r4, r2
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	00e2      	lsls	r2, r4, #3
 80045a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045a4:	00d9      	lsls	r1, r3, #3
 80045a6:	460b      	mov	r3, r1
 80045a8:	4614      	mov	r4, r2
 80045aa:	195b      	adds	r3, r3, r5
 80045ac:	eb44 0406 	adc.w	r4, r4, r6
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	02a2      	lsls	r2, r4, #10
 80045ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045be:	0299      	lsls	r1, r3, #10
 80045c0:	460b      	mov	r3, r1
 80045c2:	4614      	mov	r4, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	4621      	mov	r1, r4
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f04f 0400 	mov.w	r4, #0
 80045ce:	461a      	mov	r2, r3
 80045d0:	4623      	mov	r3, r4
 80045d2:	f7fb fe01 	bl	80001d8 <__aeabi_uldivmod>
 80045d6:	4603      	mov	r3, r0
 80045d8:	460c      	mov	r4, r1
 80045da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	3301      	adds	r3, #1
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	60bb      	str	r3, [r7, #8]
      break;
 80045f6:	e002      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045fa:	60bb      	str	r3, [r7, #8]
      break;
 80045fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045fe:	68bb      	ldr	r3, [r7, #8]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004608:	40023800 	.word	0x40023800
 800460c:	00f42400 	.word	0x00f42400
 8004610:	007a1200 	.word	0x007a1200

08004614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <HAL_RCC_GetHCLKFreq+0x14>)
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000000 	.word	0x20000000

0800462c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004630:	f7ff fff0 	bl	8004614 <HAL_RCC_GetHCLKFreq>
 8004634:	4601      	mov	r1, r0
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	0a9b      	lsrs	r3, r3, #10
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	4a03      	ldr	r2, [pc, #12]	; (8004650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004648:	4618      	mov	r0, r3
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40023800 	.word	0x40023800
 8004650:	0800897c 	.word	0x0800897c

08004654 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004678:	2b00      	cmp	r3, #0
 800467a:	d038      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800467c:	4b68      	ldr	r3, [pc, #416]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004682:	f7fc fdf5 	bl	8001270 <HAL_GetTick>
 8004686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004688:	e008      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800468a:	f7fc fdf1 	bl	8001270 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e0bd      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800469c:	4b61      	ldr	r3, [pc, #388]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	071b      	lsls	r3, r3, #28
 80046ba:	495a      	ldr	r1, [pc, #360]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046c2:	4b57      	ldr	r3, [pc, #348]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046c8:	f7fc fdd2 	bl	8001270 <HAL_GetTick>
 80046cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046d0:	f7fc fdce 	bl	8001270 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e09a      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046e2:	4b50      	ldr	r3, [pc, #320]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8083 	beq.w	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	4b48      	ldr	r3, [pc, #288]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	4a47      	ldr	r2, [pc, #284]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470a:	6413      	str	r3, [r2, #64]	; 0x40
 800470c:	4b45      	ldr	r3, [pc, #276]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004718:	4b43      	ldr	r3, [pc, #268]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a42      	ldr	r2, [pc, #264]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800471e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004722:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004724:	f7fc fda4 	bl	8001270 <HAL_GetTick>
 8004728:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800472a:	e008      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800472c:	f7fc fda0 	bl	8001270 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e06c      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800473e:	4b3a      	ldr	r3, [pc, #232]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800474a:	4b36      	ldr	r3, [pc, #216]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004752:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d02f      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d028      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004768:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004770:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004772:	4b2e      	ldr	r3, [pc, #184]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004778:	4b2c      	ldr	r3, [pc, #176]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800477e:	4a29      	ldr	r2, [pc, #164]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004784:	4b27      	ldr	r3, [pc, #156]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b01      	cmp	r3, #1
 800478e:	d114      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004790:	f7fc fd6e 	bl	8001270 <HAL_GetTick>
 8004794:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004796:	e00a      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004798:	f7fc fd6a 	bl	8001270 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e034      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0ee      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c6:	d10d      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80047c8:	4b16      	ldr	r3, [pc, #88]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047dc:	4911      	ldr	r1, [pc, #68]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
 80047e2:	e005      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80047e4:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a0e      	ldr	r2, [pc, #56]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ee:	6093      	str	r3, [r2, #8]
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fc:	4909      	ldr	r1, [pc, #36]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	7d1a      	ldrb	r2, [r3, #20]
 8004812:	4b07      	ldr	r3, [pc, #28]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004814:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	42470068 	.word	0x42470068
 8004824:	40023800 	.word	0x40023800
 8004828:	40007000 	.word	0x40007000
 800482c:	42470e40 	.word	0x42470e40
 8004830:	424711e0 	.word	0x424711e0

08004834 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d13f      	bne.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004852:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800485a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004862:	2b01      	cmp	r3, #1
 8004864:	d131      	bne.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004866:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004868:	617b      	str	r3, [r7, #20]
          break;
 800486a:	e031      	b.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800486c:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004878:	d109      	bne.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800487c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004884:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	e008      	b.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004898:	4a14      	ldr	r2, [pc, #80]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800489a:	fbb2 f3f3 	udiv	r3, r2, r3
 800489e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ba:	0f1b      	lsrs	r3, r3, #28
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	617b      	str	r3, [r7, #20]
          break;
 80048c8:	e002      	b.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
          break;
 80048ce:	bf00      	nop
        }
      }
      break;
 80048d0:	bf00      	nop
    }
  }
  return frequency;
 80048d2:	697b      	ldr	r3, [r7, #20]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40023800 	.word	0x40023800
 80048e4:	00bb8000 	.word	0x00bb8000
 80048e8:	007a1200 	.word	0x007a1200
 80048ec:	00f42400 	.word	0x00f42400

080048f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e056      	b.n	80049b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fc fa89 	bl	8000e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004938:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	ea42 0103 	orr.w	r1, r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	f003 0104 	and.w	r1, r3, #4
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e01d      	b.n	8004a06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fc fa98 	bl	8000f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f000 faac 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a1a      	ldr	r2, [r3, #32]
 8004a24:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <HAL_TIM_Base_Stop+0x40>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a1a      	ldr	r2, [r3, #32]
 8004a34:	f240 4344 	movw	r3, #1092	; 0x444
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_Base_Stop+0x40>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0201 	bic.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d007      	beq.n	8004a9e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e01d      	b.n	8004afa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc f9f6 	bl	8000ec4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f000 fa32 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2201      	movs	r2, #1
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fc28 	bl	800536c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <HAL_TIM_PWM_Start+0x60>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d107      	bne.n	8004b36 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b06      	cmp	r3, #6
 8004b46:	d007      	beq.n	8004b58 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000

08004b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d122      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0202 	mvn.w	r2, #2
 8004b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f9b4 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9a6 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f9b7 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d122      	bne.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d11b      	bne.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0204 	mvn.w	r2, #4
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f98a 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f97c 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f98d 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d122      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d11b      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0208 	mvn.w	r2, #8
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f960 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f952 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f963 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d122      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d11b      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0210 	mvn.w	r2, #16
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2208      	movs	r2, #8
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f936 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f928 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f939 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d10e      	bne.n	8004cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d107      	bne.n	8004cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0201 	mvn.w	r2, #1
 8004ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fb fbf6 	bl	80004d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b80      	cmp	r3, #128	; 0x80
 8004cf8:	d10e      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d107      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fbc8 	bl	80054a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b40      	cmp	r3, #64	; 0x40
 8004d24:	d10e      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8fe 	bl	8004f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d10e      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0220 	mvn.w	r2, #32
 8004d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fb92 	bl	8005494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e0b4      	b.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	f200 809f 	bhi.w	8004ee8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004ee9 	.word	0x08004ee9
 8004db8:	08004ee9 	.word	0x08004ee9
 8004dbc:	08004ee9 	.word	0x08004ee9
 8004dc0:	08004e25 	.word	0x08004e25
 8004dc4:	08004ee9 	.word	0x08004ee9
 8004dc8:	08004ee9 	.word	0x08004ee9
 8004dcc:	08004ee9 	.word	0x08004ee9
 8004dd0:	08004e67 	.word	0x08004e67
 8004dd4:	08004ee9 	.word	0x08004ee9
 8004dd8:	08004ee9 	.word	0x08004ee9
 8004ddc:	08004ee9 	.word	0x08004ee9
 8004de0:	08004ea7 	.word	0x08004ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 f932 	bl	8005054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0208 	orr.w	r2, r2, #8
 8004dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0204 	bic.w	r2, r2, #4
 8004e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6999      	ldr	r1, [r3, #24]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	619a      	str	r2, [r3, #24]
      break;
 8004e22:	e062      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f978 	bl	8005120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6999      	ldr	r1, [r3, #24]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	021a      	lsls	r2, r3, #8
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	619a      	str	r2, [r3, #24]
      break;
 8004e64:	e041      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f9c3 	bl	80051f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0208 	orr.w	r2, r2, #8
 8004e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0204 	bic.w	r2, r2, #4
 8004e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69d9      	ldr	r1, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	61da      	str	r2, [r3, #28]
      break;
 8004ea4:	e021      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fa0d 	bl	80052cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69d9      	ldr	r1, [r3, #28]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	021a      	lsls	r2, r3, #8
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	61da      	str	r2, [r3, #28]
      break;
 8004ee6:	e000      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004ee8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a34      	ldr	r2, [pc, #208]	; (8005038 <TIM_Base_SetConfig+0xe4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00f      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f72:	d00b      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a31      	ldr	r2, [pc, #196]	; (800503c <TIM_Base_SetConfig+0xe8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a30      	ldr	r2, [pc, #192]	; (8005040 <TIM_Base_SetConfig+0xec>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a2f      	ldr	r2, [pc, #188]	; (8005044 <TIM_Base_SetConfig+0xf0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a25      	ldr	r2, [pc, #148]	; (8005038 <TIM_Base_SetConfig+0xe4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01b      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d017      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a22      	ldr	r2, [pc, #136]	; (800503c <TIM_Base_SetConfig+0xe8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a21      	ldr	r2, [pc, #132]	; (8005040 <TIM_Base_SetConfig+0xec>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00f      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a20      	ldr	r2, [pc, #128]	; (8005044 <TIM_Base_SetConfig+0xf0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <TIM_Base_SetConfig+0xf4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a1e      	ldr	r2, [pc, #120]	; (800504c <TIM_Base_SetConfig+0xf8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <TIM_Base_SetConfig+0xfc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a08      	ldr	r2, [pc, #32]	; (8005038 <TIM_Base_SetConfig+0xe4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d103      	bne.n	8005024 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	615a      	str	r2, [r3, #20]
}
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40010000 	.word	0x40010000
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800

08005054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f023 0201 	bic.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 0302 	bic.w	r3, r3, #2
 800509c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1c      	ldr	r2, [pc, #112]	; (800511c <TIM_OC1_SetConfig+0xc8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10c      	bne.n	80050ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0308 	bic.w	r3, r3, #8
 80050b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 0304 	bic.w	r3, r3, #4
 80050c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a13      	ldr	r2, [pc, #76]	; (800511c <TIM_OC1_SetConfig+0xc8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d111      	bne.n	80050f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	621a      	str	r2, [r3, #32]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40010000 	.word	0x40010000

08005120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0210 	bic.w	r2, r3, #16
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0320 	bic.w	r3, r3, #32
 800516a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <TIM_OC2_SetConfig+0xd4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10d      	bne.n	800519c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <TIM_OC2_SetConfig+0xd4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d113      	bne.n	80051cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000

080051f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <TIM_OC3_SetConfig+0xd0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10d      	bne.n	8005272 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800525c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <TIM_OC3_SetConfig+0xd0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d113      	bne.n	80052a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	621a      	str	r2, [r3, #32]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40010000 	.word	0x40010000

080052cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005316:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	031b      	lsls	r3, r3, #12
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a10      	ldr	r2, [pc, #64]	; (8005368 <TIM_OC4_SetConfig+0x9c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d109      	bne.n	8005340 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40010000 	.word	0x40010000

0800536c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	2201      	movs	r2, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a1a      	ldr	r2, [r3, #32]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	43db      	mvns	r3, r3
 800538e:	401a      	ands	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1a      	ldr	r2, [r3, #32]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	fa01 f303 	lsl.w	r3, r1, r3
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e050      	b.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1c      	ldr	r2, [pc, #112]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d018      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541c:	d013      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a18      	ldr	r2, [pc, #96]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00e      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a16      	ldr	r2, [pc, #88]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a15      	ldr	r2, [pc, #84]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a13      	ldr	r2, [pc, #76]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d10c      	bne.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	4313      	orrs	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40010000 	.word	0x40010000
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40014000 	.word	0x40014000

08005494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054bc:	b084      	sub	sp, #16
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	f107 001c 	add.w	r0, r7, #28
 80054ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d122      	bne.n	800551a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d105      	bne.n	800550e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f94a 	bl	80057a8 <USB_CoreReset>
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]
 8005518:	e01a      	b.n	8005550 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f93e 	bl	80057a8 <USB_CoreReset>
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
 8005542:	e005      	b.n	8005550 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10b      	bne.n	800556e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f043 0206 	orr.w	r2, r3, #6
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f043 0220 	orr.w	r2, r3, #32
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800557a:	b004      	add	sp, #16
 800557c:	4770      	bx	lr

0800557e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f043 0201 	orr.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f023 0201 	bic.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b082      	sub	sp, #8
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	460b      	mov	r3, r1
 80055cc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d106      	bne.n	80055ee <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]
 80055ec:	e00b      	b.n	8005606 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
 8005600:	e001      	b.n	8005606 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e003      	b.n	800560e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005606:	2032      	movs	r0, #50	; 0x32
 8005608:	f7fb fe3e 	bl	8001288 <HAL_Delay>

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	019b      	lsls	r3, r3, #6
 800562a:	f043 0220 	orr.w	r2, r3, #32
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3301      	adds	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a09      	ldr	r2, [pc, #36]	; (8005660 <USB_FlushTxFifo+0x48>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d901      	bls.n	8005644 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e006      	b.n	8005652 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b20      	cmp	r3, #32
 800564e:	d0f0      	beq.n	8005632 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	00030d40 	.word	0x00030d40

08005664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2210      	movs	r2, #16
 8005674:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3301      	adds	r3, #1
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <USB_FlushRxFifo+0x40>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d901      	bls.n	8005688 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e006      	b.n	8005696 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d0f0      	beq.n	8005676 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	00030d40 	.word	0x00030d40

080056a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b089      	sub	sp, #36	; 0x24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	4611      	mov	r1, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	460b      	mov	r3, r1
 80056b8:	71fb      	strb	r3, [r7, #7]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80056c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d11a      	bne.n	8005704 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056ce:	88bb      	ldrh	r3, [r7, #4]
 80056d0:	3303      	adds	r3, #3
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e00f      	b.n	80056fc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	031a      	lsls	r2, r3, #12
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e8:	461a      	mov	r2, r3
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3304      	adds	r3, #4
 80056f4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	3301      	adds	r3, #1
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	429a      	cmp	r2, r3
 8005702:	d3eb      	bcc.n	80056dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3724      	adds	r7, #36	; 0x24
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005712:	b480      	push	{r7}
 8005714:	b089      	sub	sp, #36	; 0x24
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	4613      	mov	r3, r2
 800571e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	3303      	adds	r3, #3
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005730:	2300      	movs	r3, #0
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	e00b      	b.n	800574e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	601a      	str	r2, [r3, #0]
    pDest++;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3304      	adds	r3, #4
 8005746:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	3301      	adds	r3, #1
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	429a      	cmp	r2, r3
 8005754:	d3ef      	bcc.n	8005736 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005756:	69fb      	ldr	r3, [r7, #28]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3724      	adds	r7, #36	; 0x24
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4013      	ands	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800577c:	68fb      	ldr	r3, [r7, #12]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0301 	and.w	r3, r3, #1
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4a13      	ldr	r2, [pc, #76]	; (800580c <USB_CoreReset+0x64>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d901      	bls.n	80057c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e01b      	b.n	80057fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	daf2      	bge.n	80057b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f043 0201 	orr.w	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <USB_CoreReset+0x64>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d901      	bls.n	80057f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e006      	b.n	80057fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d0f0      	beq.n	80057de <USB_CoreReset+0x36>

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	00030d40 	.word	0x00030d40

08005810 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005810:	b084      	sub	sp, #16
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	f107 001c 	add.w	r0, r7, #28
 800581e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585e:	2b00      	cmp	r3, #0
 8005860:	d018      	beq.n	8005894 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10a      	bne.n	800587e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005876:	f043 0304 	orr.w	r3, r3, #4
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e014      	b.n	80058a8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800588c:	f023 0304 	bic.w	r3, r3, #4
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e009      	b.n	80058a8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058a2:	f023 0304 	bic.w	r3, r3, #4
 80058a6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80058a8:	2110      	movs	r1, #16
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff feb4 	bl	8005618 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fed7 	bl	8005664 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	e015      	b.n	80058e8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c8:	461a      	mov	r2, r3
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295
 80058ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058dc:	461a      	mov	r2, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3301      	adds	r3, #1
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d3e5      	bcc.n	80058bc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80058f0:	2101      	movs	r1, #1
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f8ac 	bl	8005a50 <USB_DriveVbus>

  HAL_Delay(200U);
 80058f8:	20c8      	movs	r0, #200	; 0xc8
 80058fa:	f7fb fcc5 	bl	8001288 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f04f 32ff 	mov.w	r2, #4294967295
 800590a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00b      	beq.n	8005930 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a14      	ldr	r2, [pc, #80]	; (8005974 <USB_HostInit+0x164>)
 8005924:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a13      	ldr	r2, [pc, #76]	; (8005978 <USB_HostInit+0x168>)
 800592a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800592e:	e009      	b.n	8005944 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2280      	movs	r2, #128	; 0x80
 8005934:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a10      	ldr	r2, [pc, #64]	; (800597c <USB_HostInit+0x16c>)
 800593a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a10      	ldr	r2, [pc, #64]	; (8005980 <USB_HostInit+0x170>)
 8005940:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	2b00      	cmp	r3, #0
 8005948:	d105      	bne.n	8005956 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f043 0210 	orr.w	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <USB_HostInit+0x174>)
 800595c:	4313      	orrs	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800596e:	b004      	add	sp, #16
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	01000200 	.word	0x01000200
 8005978:	00e00300 	.word	0x00e00300
 800597c:	00600080 	.word	0x00600080
 8005980:	004000e0 	.word	0x004000e0
 8005984:	a3200008 	.word	0xa3200008

08005988 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059a6:	f023 0303 	bic.w	r3, r3, #3
 80059aa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d107      	bne.n	80059da <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059d0:	461a      	mov	r2, r3
 80059d2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80059d6:	6053      	str	r3, [r2, #4]
 80059d8:	e009      	b.n	80059ee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d106      	bne.n	80059ee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e6:	461a      	mov	r2, r3
 80059e8:	f241 7370 	movw	r3, #6000	; 0x1770
 80059ec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a2c:	2064      	movs	r0, #100	; 0x64
 8005a2e:	f7fb fc2b 	bl	8001288 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a3e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a40:	200a      	movs	r0, #10
 8005a42:	f7fb fc21 	bl	8001288 <HAL_Delay>

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <USB_DriveVbus+0x44>
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d106      	bne.n	8005a94 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a92:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9e:	d109      	bne.n	8005ab4 <USB_DriveVbus+0x64>
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	0c5b      	lsrs	r3, r3, #17
 8005ae0:	f003 0303 	and.w	r3, r3, #3
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	b29b      	uxth	r3, r3
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	70fb      	strb	r3, [r7, #3]
 8005b26:	460b      	mov	r3, r1
 8005b28:	70bb      	strb	r3, [r7, #2]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b42:	461a      	mov	r2, r3
 8005b44:	f04f 33ff 	mov.w	r3, #4294967295
 8005b48:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005b4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d87e      	bhi.n	8005c50 <USB_HC_Init+0x13c>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <USB_HC_Init+0x44>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005c13 	.word	0x08005c13
 8005b60:	08005b69 	.word	0x08005b69
 8005b64:	08005bd5 	.word	0x08005bd5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b74:	461a      	mov	r2, r3
 8005b76:	f240 439d 	movw	r3, #1181	; 0x49d
 8005b7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da10      	bge.n	8005ba6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005ba4:	e057      	b.n	8005c56 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d051      	beq.n	8005c56 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	78fa      	ldrb	r2, [r7, #3]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bd0:	60d3      	str	r3, [r2, #12]
      break;
 8005bd2:	e040      	b.n	8005c56 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be0:	461a      	mov	r2, r3
 8005be2:	f240 639d 	movw	r3, #1693	; 0x69d
 8005be6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005be8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	da34      	bge.n	8005c5a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c10:	e023      	b.n	8005c5a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f240 2325 	movw	r3, #549	; 0x225
 8005c24:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	da17      	bge.n	8005c5e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c48:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005c4c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005c4e:	e006      	b.n	8005c5e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	75fb      	strb	r3, [r7, #23]
      break;
 8005c54:	e004      	b.n	8005c60 <USB_HC_Init+0x14c>
      break;
 8005c56:	bf00      	nop
 8005c58:	e002      	b.n	8005c60 <USB_HC_Init+0x14c>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e000      	b.n	8005c60 <USB_HC_Init+0x14c>
      break;
 8005c5e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	2101      	movs	r1, #1
 8005c70:	fa01 f303 	lsl.w	r3, r1, r3
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	da03      	bge.n	8005c9a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	e001      	b.n	8005c9e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005c9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d103      	bne.n	8005cae <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e001      	b.n	8005cb2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cb2:	787b      	ldrb	r3, [r7, #1]
 8005cb4:	059b      	lsls	r3, r3, #22
 8005cb6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005cba:	78bb      	ldrb	r3, [r7, #2]
 8005cbc:	02db      	lsls	r3, r3, #11
 8005cbe:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cc2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cc8:	049b      	lsls	r3, r3, #18
 8005cca:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005cce:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cd6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	0159      	lsls	r1, r3, #5
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	440b      	add	r3, r1
 8005ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cee:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d10f      	bne.n	8005d18 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d16:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop

08005d28 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08c      	sub	sp, #48	; 0x30
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d44:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d028      	beq.n	8005da4 <USB_HC_StartXfer+0x7c>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	791b      	ldrb	r3, [r3, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d124      	bne.n	8005da4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10b      	bne.n	8005d78 <USB_HC_StartXfer+0x50>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	795b      	ldrb	r3, [r3, #5]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d107      	bne.n	8005d78 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fa30 	bl	80061d4 <USB_DoPing>
      return HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	e114      	b.n	8005fa2 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d112      	bne.n	8005da4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	6a3a      	ldr	r2, [r7, #32]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d98:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005d9c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2200      	movs	r2, #0
 8005da2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d018      	beq.n	8005dde <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	8912      	ldrh	r2, [r2, #8]
 8005db4:	4413      	add	r3, r2
 8005db6:	3b01      	subs	r3, #1
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	8912      	ldrh	r2, [r2, #8]
 8005dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dc0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005dc2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005dc4:	8b7b      	ldrh	r3, [r7, #26]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d90b      	bls.n	8005de2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005dca:	8b7b      	ldrh	r3, [r7, #26]
 8005dcc:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005dce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	8912      	ldrh	r2, [r2, #8]
 8005dd4:	fb02 f203 	mul.w	r2, r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	611a      	str	r2, [r3, #16]
 8005ddc:	e001      	b.n	8005de2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005dde:	2301      	movs	r3, #1
 8005de0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	78db      	ldrb	r3, [r3, #3]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d006      	beq.n	8005df8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005dea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	8912      	ldrh	r2, [r2, #8]
 8005df0:	fb02 f203 	mul.w	r2, r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005e02:	04d9      	lsls	r1, r3, #19
 8005e04:	4b69      	ldr	r3, [pc, #420]	; (8005fac <USB_HC_StartXfer+0x284>)
 8005e06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	7a9b      	ldrb	r3, [r3, #10]
 8005e0e:	075b      	lsls	r3, r3, #29
 8005e10:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e14:	69f9      	ldr	r1, [r7, #28]
 8005e16:	0148      	lsls	r0, r1, #5
 8005e18:	6a39      	ldr	r1, [r7, #32]
 8005e1a:	4401      	add	r1, r0
 8005e1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	68d9      	ldr	r1, [r3, #12]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3a:	460a      	mov	r2, r1
 8005e3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bf0c      	ite	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	2300      	movne	r3, #0
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	7e7b      	ldrb	r3, [r7, #25]
 8005e86:	075b      	lsls	r3, r3, #29
 8005e88:	69f9      	ldr	r1, [r7, #28]
 8005e8a:	0148      	lsls	r0, r1, #5
 8005e8c:	6a39      	ldr	r1, [r7, #32]
 8005e8e:	4401      	add	r1, r0
 8005e90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005e94:	4313      	orrs	r3, r2
 8005e96:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a42      	ldr	r2, [pc, #264]	; (8005fb0 <USB_HC_StartXfer+0x288>)
 8005ea8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005eaa:	4b41      	ldr	r3, [pc, #260]	; (8005fb0 <USB_HC_StartXfer+0x288>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005eb2:	4a3f      	ldr	r2, [pc, #252]	; (8005fb0 <USB_HC_StartXfer+0x288>)
 8005eb4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	78db      	ldrb	r3, [r3, #3]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ebe:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <USB_HC_StartXfer+0x288>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec6:	4a3a      	ldr	r2, [pc, #232]	; (8005fb0 <USB_HC_StartXfer+0x288>)
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e005      	b.n	8005ed8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ecc:	4b38      	ldr	r3, [pc, #224]	; (8005fb0 <USB_HC_StartXfer+0x288>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ed4:	4a36      	ldr	r2, [pc, #216]	; (8005fb0 <USB_HC_StartXfer+0x288>)
 8005ed6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ed8:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <USB_HC_StartXfer+0x288>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ee0:	4a33      	ldr	r2, [pc, #204]	; (8005fb0 <USB_HC_StartXfer+0x288>)
 8005ee2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4b2f      	ldr	r3, [pc, #188]	; (8005fb0 <USB_HC_StartXfer+0x288>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e04f      	b.n	8005fa2 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	78db      	ldrb	r3, [r3, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d14a      	bne.n	8005fa0 <USB_HC_StartXfer+0x278>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d046      	beq.n	8005fa0 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	79db      	ldrb	r3, [r3, #7]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d830      	bhi.n	8005f7c <USB_HC_StartXfer+0x254>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <USB_HC_StartXfer+0x1f8>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f31 	.word	0x08005f31
 8005f24:	08005f55 	.word	0x08005f55
 8005f28:	08005f31 	.word	0x08005f31
 8005f2c:	08005f55 	.word	0x08005f55
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	3303      	adds	r3, #3
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f3a:	8afa      	ldrh	r2, [r7, #22]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d91c      	bls.n	8005f80 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f52:	e015      	b.n	8005f80 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	3303      	adds	r3, #3
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f5e:	8afa      	ldrh	r2, [r7, #22]
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d90a      	bls.n	8005f84 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f7a:	e003      	b.n	8005f84 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005f7c:	bf00      	nop
 8005f7e:	e002      	b.n	8005f86 <USB_HC_StartXfer+0x25e>
        break;
 8005f80:	bf00      	nop
 8005f82:	e000      	b.n	8005f86 <USB_HC_StartXfer+0x25e>
        break;
 8005f84:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	68d9      	ldr	r1, [r3, #12]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	785a      	ldrb	r2, [r3, #1]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	b298      	uxth	r0, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	4603      	mov	r3, r0
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff fb84 	bl	80056a8 <USB_WritePacket>
  }

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3728      	adds	r7, #40	; 0x28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	1ff80000 	.word	0x1ff80000
 8005fb0:	200000b4 	.word	0x200000b4

08005fb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	b29b      	uxth	r3, r3
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b087      	sub	sp, #28
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	0c9b      	lsrs	r3, r3, #18
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <USB_HC_Halt+0x3a>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d16c      	bne.n	80060ea <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4413      	add	r3, r2
 8006018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	440a      	add	r2, r1
 8006026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800602e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d143      	bne.n	80060c4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	4413      	add	r3, r2
 8006044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	440a      	add	r2, r1
 8006052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800605a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	4413      	add	r3, r2
 8006064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	440a      	add	r2, r1
 8006072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006076:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800607a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	4413      	add	r3, r2
 8006084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	440a      	add	r2, r1
 8006092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006096:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800609a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	3301      	adds	r3, #1
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060a8:	d81d      	bhi.n	80060e6 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c0:	d0ec      	beq.n	800609c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060c2:	e080      	b.n	80061c6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060e4:	e06f      	b.n	80061c6 <USB_HC_Halt+0x1f0>
          break;
 80060e6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060e8:	e06d      	b.n	80061c6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006104:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006108:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d143      	bne.n	80061a2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	440a      	add	r2, r1
 8006130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006138:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4413      	add	r3, r2
 8006142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	440a      	add	r2, r1
 8006150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006158:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	4413      	add	r3, r2
 8006162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	440a      	add	r2, r1
 8006170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006174:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006178:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	3301      	adds	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006186:	d81d      	bhi.n	80061c4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4413      	add	r3, r2
 8006190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800619a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800619e:	d0ec      	beq.n	800617a <USB_HC_Halt+0x1a4>
 80061a0:	e011      	b.n	80061c6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	e000      	b.n	80061c6 <USB_HC_Halt+0x1f0>
          break;
 80061c4:	bf00      	nop
    }
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80061e8:	2301      	movs	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	04da      	lsls	r2, r3, #19
 80061f0:	4b15      	ldr	r3, [pc, #84]	; (8006248 <USB_DoPing+0x74>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006204:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800621c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006224:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	461a      	mov	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	1ff80000 	.word	0x1ff80000

0800624c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff f99f 	bl	80055a0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006262:	2110      	movs	r1, #16
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff f9d7 	bl	8005618 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff f9fa 	bl	8005664 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006270:	2300      	movs	r3, #0
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	e01f      	b.n	80062b6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4413      	add	r3, r2
 800627e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800628c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006294:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800629c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	461a      	mov	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	3301      	adds	r3, #1
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b0f      	cmp	r3, #15
 80062ba:	d9dc      	bls.n	8006276 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	e034      	b.n	800632c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f6:	461a      	mov	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	3301      	adds	r3, #1
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006308:	d80c      	bhi.n	8006324 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800631c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006320:	d0ec      	beq.n	80062fc <USB_StopHost+0xb0>
 8006322:	e000      	b.n	8006326 <USB_StopHost+0xda>
        break;
 8006324:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3301      	adds	r3, #1
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	d9c7      	bls.n	80062c2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006338:	461a      	mov	r2, r3
 800633a:	f04f 33ff 	mov.w	r3, #4294967295
 800633e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f04f 32ff 	mov.w	r2, #4294967295
 8006346:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7ff f918 	bl	800557e <USB_EnableGlobalInt>

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b089      	sub	sp, #36	; 0x24
 800635c:	af04      	add	r7, sp, #16
 800635e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006360:	2301      	movs	r3, #1
 8006362:	2202      	movs	r2, #2
 8006364:	2102      	movs	r1, #2
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fc68 	bl	8006c3c <USBH_FindInterface>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2bff      	cmp	r3, #255	; 0xff
 8006374:	d002      	beq.n	800637c <USBH_CDC_InterfaceInit+0x24>
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d901      	bls.n	8006380 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800637c:	2302      	movs	r3, #2
 800637e:	e13d      	b.n	80065fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fc3d 	bl	8006c04 <USBH_SelectInterface>
 800638a:	4603      	mov	r3, r0
 800638c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006394:	2302      	movs	r3, #2
 8006396:	e131      	b.n	80065fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800639e:	2050      	movs	r0, #80	; 0x50
 80063a0:	f002 fa04 	bl	80087ac <malloc>
 80063a4:	4603      	mov	r3, r0
 80063a6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80063b8:	2302      	movs	r3, #2
 80063ba:	e11f      	b.n	80065fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80063bc:	2250      	movs	r2, #80	; 0x50
 80063be:	2100      	movs	r1, #0
 80063c0:	68b8      	ldr	r0, [r7, #8]
 80063c2:	f002 fa03 	bl	80087cc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	211a      	movs	r1, #26
 80063cc:	fb01 f303 	mul.w	r3, r1, r3
 80063d0:	4413      	add	r3, r2
 80063d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	b25b      	sxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	da15      	bge.n	800640a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	211a      	movs	r1, #26
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063ee:	781a      	ldrb	r2, [r3, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	211a      	movs	r1, #26
 80063fa:	fb01 f303 	mul.w	r3, r1, r3
 80063fe:	4413      	add	r3, r2
 8006400:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006404:	881a      	ldrh	r2, [r3, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	785b      	ldrb	r3, [r3, #1]
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f001 fe36 	bl	8008082 <USBH_AllocPipe>
 8006416:	4603      	mov	r3, r0
 8006418:	461a      	mov	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	7819      	ldrb	r1, [r3, #0]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	7858      	ldrb	r0, [r3, #1]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	8952      	ldrh	r2, [r2, #10]
 8006436:	9202      	str	r2, [sp, #8]
 8006438:	2203      	movs	r2, #3
 800643a:	9201      	str	r2, [sp, #4]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	4623      	mov	r3, r4
 8006440:	4602      	mov	r2, r0
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 fdee 	bl	8008024 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2200      	movs	r2, #0
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f002 f8fb 	bl	800864c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006456:	2300      	movs	r3, #0
 8006458:	2200      	movs	r2, #0
 800645a:	210a      	movs	r1, #10
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fbed 	bl	8006c3c <USBH_FindInterface>
 8006462:	4603      	mov	r3, r0
 8006464:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2bff      	cmp	r3, #255	; 0xff
 800646a:	d002      	beq.n	8006472 <USBH_CDC_InterfaceInit+0x11a>
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d901      	bls.n	8006476 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006472:	2302      	movs	r3, #2
 8006474:	e0c2      	b.n	80065fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	211a      	movs	r1, #26
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	4413      	add	r3, r2
 8006482:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	b25b      	sxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	da16      	bge.n	80064bc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	211a      	movs	r1, #26
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	4413      	add	r3, r2
 800649a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800649e:	781a      	ldrb	r2, [r3, #0]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	211a      	movs	r1, #26
 80064aa:	fb01 f303 	mul.w	r3, r1, r3
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064b4:	881a      	ldrh	r2, [r3, #0]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	835a      	strh	r2, [r3, #26]
 80064ba:	e015      	b.n	80064e8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	211a      	movs	r1, #26
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	4413      	add	r3, r2
 80064c8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064cc:	781a      	ldrb	r2, [r3, #0]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	211a      	movs	r1, #26
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	4413      	add	r3, r2
 80064de:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064e2:	881a      	ldrh	r2, [r3, #0]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	211a      	movs	r1, #26
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	b25b      	sxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	da16      	bge.n	800652e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	211a      	movs	r1, #26
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006510:	781a      	ldrb	r2, [r3, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	211a      	movs	r1, #26
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	4413      	add	r3, r2
 8006522:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006526:	881a      	ldrh	r2, [r3, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	835a      	strh	r2, [r3, #26]
 800652c:	e015      	b.n	800655a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	211a      	movs	r1, #26
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	4413      	add	r3, r2
 800653a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800653e:	781a      	ldrb	r2, [r3, #0]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	211a      	movs	r1, #26
 800654a:	fb01 f303 	mul.w	r3, r1, r3
 800654e:	4413      	add	r3, r2
 8006550:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006554:	881a      	ldrh	r2, [r3, #0]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	7b9b      	ldrb	r3, [r3, #14]
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 fd8e 	bl	8008082 <USBH_AllocPipe>
 8006566:	4603      	mov	r3, r0
 8006568:	461a      	mov	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	7bdb      	ldrb	r3, [r3, #15]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fd84 	bl	8008082 <USBH_AllocPipe>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	7b59      	ldrb	r1, [r3, #13]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	7b98      	ldrb	r0, [r3, #14]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	8b12      	ldrh	r2, [r2, #24]
 800659a:	9202      	str	r2, [sp, #8]
 800659c:	2202      	movs	r2, #2
 800659e:	9201      	str	r2, [sp, #4]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	4623      	mov	r3, r4
 80065a4:	4602      	mov	r2, r0
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fd3c 	bl	8008024 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	7b19      	ldrb	r1, [r3, #12]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	7bd8      	ldrb	r0, [r3, #15]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	8b52      	ldrh	r2, [r2, #26]
 80065c4:	9202      	str	r2, [sp, #8]
 80065c6:	2202      	movs	r2, #2
 80065c8:	9201      	str	r2, [sp, #4]
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	4623      	mov	r3, r4
 80065ce:	4602      	mov	r2, r0
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 fd27 	bl	8008024 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	7b5b      	ldrb	r3, [r3, #13]
 80065e2:	2200      	movs	r2, #0
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f002 f830 	bl	800864c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	7b1b      	ldrb	r3, [r3, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f002 f829 	bl	800864c <USBH_LL_SetToggle>

  return USBH_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	bd90      	pop	{r4, r7, pc}

08006604 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00e      	beq.n	800663c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 fd1c 	bl	8008062 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 fd47 	bl	80080c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	7b1b      	ldrb	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00e      	beq.n	8006662 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	7b1b      	ldrb	r3, [r3, #12]
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 fd09 	bl	8008062 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	7b1b      	ldrb	r3, [r3, #12]
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 fd34 	bl	80080c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	7b5b      	ldrb	r3, [r3, #13]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00e      	beq.n	8006688 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	7b5b      	ldrb	r3, [r3, #13]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 fcf6 	bl	8008062 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	7b5b      	ldrb	r3, [r3, #13]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fd21 	bl	80080c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	4618      	mov	r0, r3
 800669e:	f002 f88d 	bl	80087bc <free>
    phost->pActiveClass->pData = 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066a8:	2200      	movs	r2, #0
 80066aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3340      	adds	r3, #64	; 0x40
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8b1 	bl	8006836 <GetLineCoding>
 80066d4:	4603      	mov	r3, r0
 80066d6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066e4:	2102      	movs	r1, #2
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80066ea:	7afb      	ldrb	r3, [r7, #11]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066fc:	2301      	movs	r3, #1
 80066fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006714:	2b04      	cmp	r3, #4
 8006716:	d877      	bhi.n	8006808 <USBH_CDC_Process+0x114>
 8006718:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <USBH_CDC_Process+0x2c>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	08006735 	.word	0x08006735
 8006724:	0800673b 	.word	0x0800673b
 8006728:	0800676b 	.word	0x0800676b
 800672c:	080067df 	.word	0x080067df
 8006730:	080067ed 	.word	0x080067ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
      break;
 8006738:	e06d      	b.n	8006816 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f897 	bl	8006874 <SetLineCoding>
 8006746:	4603      	mov	r3, r0
 8006748:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006758:	e058      	b.n	800680c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800675a:	7bbb      	ldrb	r3, [r7, #14]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d055      	beq.n	800680c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2204      	movs	r2, #4
 8006764:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006768:	e050      	b.n	800680c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	3340      	adds	r3, #64	; 0x40
 800676e:	4619      	mov	r1, r3
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f860 	bl	8006836 <GetLineCoding>
 8006776:	4603      	mov	r3, r0
 8006778:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d126      	bne.n	80067ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006792:	791b      	ldrb	r3, [r3, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d13b      	bne.n	8006810 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d133      	bne.n	8006810 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d12b      	bne.n	8006810 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d124      	bne.n	8006810 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f95a 	bl	8006a80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067cc:	e020      	b.n	8006810 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80067ce:	7bbb      	ldrb	r3, [r7, #14]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d01d      	beq.n	8006810 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2204      	movs	r2, #4
 80067d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067dc:	e018      	b.n	8006810 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f867 	bl	80068b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f8dc 	bl	80069a2 <CDC_ProcessReception>
      break;
 80067ea:	e014      	b.n	8006816 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80067ec:	2100      	movs	r1, #0
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 ffe5 	bl	80077be <USBH_ClrFeature>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006806:	e005      	b.n	8006814 <USBH_CDC_Process+0x120>

    default:
      break;
 8006808:	bf00      	nop
 800680a:	e004      	b.n	8006816 <USBH_CDC_Process+0x122>
      break;
 800680c:	bf00      	nop
 800680e:	e002      	b.n	8006816 <USBH_CDC_Process+0x122>
      break;
 8006810:	bf00      	nop
 8006812:	e000      	b.n	8006816 <USBH_CDC_Process+0x122>
      break;
 8006814:	bf00      	nop

  }

  return status;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	22a1      	movs	r2, #161	; 0xa1
 8006844:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2221      	movs	r2, #33	; 0x21
 800684a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2207      	movs	r2, #7
 800685c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2207      	movs	r2, #7
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 f98a 	bl	8007b7e <USBH_CtlReq>
 800686a:	4603      	mov	r3, r0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2221      	movs	r2, #33	; 0x21
 8006882:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2207      	movs	r2, #7
 800689a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2207      	movs	r2, #7
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f96b 	bl	8007b7e <USBH_CtlReq>
 80068a8:	4603      	mov	r3, r0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af02      	add	r7, sp, #8
 80068b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d002      	beq.n	80068d8 <CDC_ProcessTransmission+0x26>
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d025      	beq.n	8006922 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80068d6:	e060      	b.n	800699a <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	8b12      	ldrh	r2, [r2, #24]
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d90c      	bls.n	80068fe <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	69d9      	ldr	r1, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8b1a      	ldrh	r2, [r3, #24]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	7b58      	ldrb	r0, [r3, #13]
 80068f0:	2301      	movs	r3, #1
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	4603      	mov	r3, r0
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fb51 	bl	8007f9e <USBH_BulkSendData>
 80068fc:	e00c      	b.n	8006918 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	7b58      	ldrb	r0, [r3, #13]
 800690c:	2301      	movs	r3, #1
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	4603      	mov	r3, r0
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 fb43 	bl	8007f9e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006920:	e03b      	b.n	800699a <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	7b5b      	ldrb	r3, [r3, #13]
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fe65 	bl	80085f8 <USBH_LL_GetURBState>
 800692e:	4603      	mov	r3, r0
 8006930:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d128      	bne.n	800698a <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	8b12      	ldrh	r2, [r2, #24]
 8006940:	4293      	cmp	r3, r2
 8006942:	d90e      	bls.n	8006962 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	8b12      	ldrh	r2, [r2, #24]
 800694c:	1a9a      	subs	r2, r3, r2
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	8b12      	ldrh	r2, [r2, #24]
 800695a:	441a      	add	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	61da      	str	r2, [r3, #28]
 8006960:	e002      	b.n	8006968 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006978:	e00e      	b.n	8006998 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f868 	bl	8006a58 <USBH_CDC_TransmitCallback>
      break;
 8006988:	e006      	b.n	8006998 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800698a:	7afb      	ldrb	r3, [r7, #11]
 800698c:	2b02      	cmp	r3, #2
 800698e:	d103      	bne.n	8006998 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006998:	bf00      	nop
  }
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d002      	beq.n	80069c8 <CDC_ProcessReception+0x26>
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d00e      	beq.n	80069e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80069c6:	e043      	b.n	8006a50 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	6a19      	ldr	r1, [r3, #32]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	8b5a      	ldrh	r2, [r3, #26]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	7b1b      	ldrb	r3, [r3, #12]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fb07 	bl	8007fe8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2204      	movs	r2, #4
 80069de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80069e2:	e035      	b.n	8006a50 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	7b1b      	ldrb	r3, [r3, #12]
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 fe04 	bl	80085f8 <USBH_LL_GetURBState>
 80069f0:	4603      	mov	r3, r0
 80069f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80069f4:	7cfb      	ldrb	r3, [r7, #19]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d129      	bne.n	8006a4e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	7b1b      	ldrb	r3, [r3, #12]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fd67 	bl	80084d4 <USBH_LL_GetLastXferSize>
 8006a06:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d016      	beq.n	8006a40 <CDC_ProcessReception+0x9e>
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	8b5b      	ldrh	r3, [r3, #26]
 8006a16:	461a      	mov	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d910      	bls.n	8006a40 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1ad2      	subs	r2, r2, r3
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6a1a      	ldr	r2, [r3, #32]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	441a      	add	r2, r3
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2203      	movs	r2, #3
 8006a3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a3e:	e006      	b.n	8006a4e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f80f 	bl	8006a6c <USBH_CDC_ReceiveCallback>
      break;
 8006a4e:	bf00      	nop
  }
}
 8006a50:	bf00      	nop
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e029      	b.n	8006b00 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	79fa      	ldrb	r2, [r7, #7]
 8006ab0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f81f 	bl	8006b08 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f001 fc39 	bl	8008370 <USBH_LL_Init>

  return USBH_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e009      	b.n	8006b2e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	33e0      	adds	r3, #224	; 0xe0
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	2200      	movs	r2, #0
 8006b26:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b0e      	cmp	r3, #14
 8006b32:	d9f2      	bls.n	8006b1a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e009      	b.n	8006b4e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b44:	2200      	movs	r2, #0
 8006b46:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b54:	d3f1      	bcc.n	8006b3a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2240      	movs	r2, #64	; 0x40
 8006b7a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d016      	beq.n	8006bf2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10e      	bne.n	8006bec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bd4:	1c59      	adds	r1, r3, #1
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	33de      	adds	r3, #222	; 0xde
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]
 8006bea:	e004      	b.n	8006bf6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bec:	2302      	movs	r3, #2
 8006bee:	73fb      	strb	r3, [r7, #15]
 8006bf0:	e001      	b.n	8006bf6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006c1a:	78fa      	ldrb	r2, [r7, #3]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d204      	bcs.n	8006c2a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	78fa      	ldrb	r2, [r7, #3]
 8006c24:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c28:	e001      	b.n	8006c2e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	4608      	mov	r0, r1
 8006c46:	4611      	mov	r1, r2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	70fb      	strb	r3, [r7, #3]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	70bb      	strb	r3, [r7, #2]
 8006c52:	4613      	mov	r3, r2
 8006c54:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c64:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c66:	e025      	b.n	8006cb4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	221a      	movs	r2, #26
 8006c6c:	fb02 f303 	mul.w	r3, r2, r3
 8006c70:	3308      	adds	r3, #8
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	3302      	adds	r3, #2
 8006c78:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	795b      	ldrb	r3, [r3, #5]
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d002      	beq.n	8006c8a <USBH_FindInterface+0x4e>
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	2bff      	cmp	r3, #255	; 0xff
 8006c88:	d111      	bne.n	8006cae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c8e:	78ba      	ldrb	r2, [r7, #2]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d002      	beq.n	8006c9a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c94:	78bb      	ldrb	r3, [r7, #2]
 8006c96:	2bff      	cmp	r3, #255	; 0xff
 8006c98:	d109      	bne.n	8006cae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c9e:	787a      	ldrb	r2, [r7, #1]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d002      	beq.n	8006caa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ca4:	787b      	ldrb	r3, [r7, #1]
 8006ca6:	2bff      	cmp	r3, #255	; 0xff
 8006ca8:	d101      	bne.n	8006cae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	e006      	b.n	8006cbc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d9d6      	bls.n	8006c68 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006cba:	23ff      	movs	r3, #255	; 0xff
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fb89 	bl	80083e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fca0 	bl	800861e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af04      	add	r7, sp, #16
 8006cee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d102      	bne.n	8006d0a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2203      	movs	r2, #3
 8006d08:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b0b      	cmp	r3, #11
 8006d12:	f200 81b3 	bhi.w	800707c <USBH_Process+0x394>
 8006d16:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <USBH_Process+0x34>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d4d 	.word	0x08006d4d
 8006d20:	08006d7f 	.word	0x08006d7f
 8006d24:	08006de7 	.word	0x08006de7
 8006d28:	08007017 	.word	0x08007017
 8006d2c:	0800707d 	.word	0x0800707d
 8006d30:	08006e8b 	.word	0x08006e8b
 8006d34:	08006fbd 	.word	0x08006fbd
 8006d38:	08006ec1 	.word	0x08006ec1
 8006d3c:	08006ee1 	.word	0x08006ee1
 8006d40:	08006f01 	.word	0x08006f01
 8006d44:	08006f2f 	.word	0x08006f2f
 8006d48:	08006fff 	.word	0x08006fff
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8193 	beq.w	8007080 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d60:	20c8      	movs	r0, #200	; 0xc8
 8006d62:	f001 fca6 	bl	80086b2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 fb99 	bl	800849e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006d7c:	e180      	b.n	8007080 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d107      	bne.n	8006d98 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d96:	e182      	b.n	800709e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006da2:	d914      	bls.n	8006dce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006daa:	3301      	adds	r3, #1
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d903      	bls.n	8006dc6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	220d      	movs	r2, #13
 8006dc2:	701a      	strb	r2, [r3, #0]
      break;
 8006dc4:	e16b      	b.n	800709e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
      break;
 8006dcc:	e167      	b.n	800709e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006dd4:	f103 020a 	add.w	r2, r3, #10
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006dde:	200a      	movs	r0, #10
 8006de0:	f001 fc67 	bl	80086b2 <USBH_Delay>
      break;
 8006de4:	e15b      	b.n	800709e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006df6:	2104      	movs	r1, #4
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006dfc:	2064      	movs	r0, #100	; 0x64
 8006dfe:	f001 fc58 	bl	80086b2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fb26 	bl	8008454 <USBH_LL_GetSpeed>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2205      	movs	r2, #5
 8006e16:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e18:	2100      	movs	r1, #0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 f931 	bl	8008082 <USBH_AllocPipe>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e28:	2180      	movs	r1, #128	; 0x80
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 f929 	bl	8008082 <USBH_AllocPipe>
 8006e30:	4603      	mov	r3, r0
 8006e32:	461a      	mov	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	7919      	ldrb	r1, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e4c:	b292      	uxth	r2, r2
 8006e4e:	9202      	str	r2, [sp, #8]
 8006e50:	2200      	movs	r2, #0
 8006e52:	9201      	str	r2, [sp, #4]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	4603      	mov	r3, r0
 8006e58:	2280      	movs	r2, #128	; 0x80
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 f8e2 	bl	8008024 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7959      	ldrb	r1, [r3, #5]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e74:	b292      	uxth	r2, r2
 8006e76:	9202      	str	r2, [sp, #8]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	9201      	str	r2, [sp, #4]
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2200      	movs	r2, #0
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 f8ce 	bl	8008024 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e88:	e109      	b.n	800709e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f90c 	bl	80070a8 <USBH_HandleEnum>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e94:	7bbb      	ldrb	r3, [r7, #14]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f040 80f3 	bne.w	8007084 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d103      	bne.n	8006eb8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2208      	movs	r2, #8
 8006eb4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006eb6:	e0e5      	b.n	8007084 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2207      	movs	r2, #7
 8006ebc:	701a      	strb	r2, [r3, #0]
      break;
 8006ebe:	e0e1      	b.n	8007084 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 80de 	beq.w	8007088 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2208      	movs	r2, #8
 8006edc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ede:	e0d3      	b.n	8007088 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fc20 	bl	8007730 <USBH_SetCfg>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f040 80ca 	bne.w	800708c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2209      	movs	r2, #9
 8006efc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006efe:	e0c5      	b.n	800708c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00b      	beq.n	8006f26 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006f0e:	2101      	movs	r1, #1
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc30 	bl	8007776 <USBH_SetFeature>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f040 80b9 	bne.w	8007090 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	220a      	movs	r2, #10
 8006f22:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f24:	e0b4      	b.n	8007090 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	220a      	movs	r2, #10
 8006f2a:	701a      	strb	r2, [r3, #0]
      break;
 8006f2c:	e0b0      	b.n	8007090 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80ad 	beq.w	8007094 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
 8006f46:	e016      	b.n	8006f76 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f48:	7bfa      	ldrb	r2, [r7, #15]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32de      	adds	r2, #222	; 0xde
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	791a      	ldrb	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d108      	bne.n	8006f70 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f5e:	7bfa      	ldrb	r2, [r7, #15]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	32de      	adds	r2, #222	; 0xde
 8006f64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006f6e:	e005      	b.n	8006f7c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	3301      	adds	r3, #1
 8006f74:	73fb      	strb	r3, [r7, #15]
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0e5      	beq.n	8006f48 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d016      	beq.n	8006fb4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2206      	movs	r2, #6
 8006f9c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fa4:	2103      	movs	r1, #3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006faa:	e073      	b.n	8007094 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	220d      	movs	r2, #13
 8006fb0:	701a      	strb	r2, [r3, #0]
      break;
 8006fb2:	e06f      	b.n	8007094 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	220d      	movs	r2, #13
 8006fb8:	701a      	strb	r2, [r3, #0]
      break;
 8006fba:	e06b      	b.n	8007094 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d017      	beq.n	8006ff6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	220b      	movs	r2, #11
 8006fe2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fe4:	e058      	b.n	8007098 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d154      	bne.n	8007098 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	220d      	movs	r2, #13
 8006ff2:	701a      	strb	r2, [r3, #0]
      break;
 8006ff4:	e050      	b.n	8007098 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	220d      	movs	r2, #13
 8006ffa:	701a      	strb	r2, [r3, #0]
      break;
 8006ffc:	e04c      	b.n	8007098 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d049      	beq.n	800709c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
      }
      break;
 8007014:	e042      	b.n	800709c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff fd72 	bl	8006b08 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007052:	2105      	movs	r1, #5
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b01      	cmp	r3, #1
 8007062:	d107      	bne.n	8007074 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff fe2b 	bl	8006cc8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007072:	e014      	b.n	800709e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 f9b7 	bl	80083e8 <USBH_LL_Start>
      break;
 800707a:	e010      	b.n	800709e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800707c:	bf00      	nop
 800707e:	e00e      	b.n	800709e <USBH_Process+0x3b6>
      break;
 8007080:	bf00      	nop
 8007082:	e00c      	b.n	800709e <USBH_Process+0x3b6>
      break;
 8007084:	bf00      	nop
 8007086:	e00a      	b.n	800709e <USBH_Process+0x3b6>
    break;
 8007088:	bf00      	nop
 800708a:	e008      	b.n	800709e <USBH_Process+0x3b6>
      break;
 800708c:	bf00      	nop
 800708e:	e006      	b.n	800709e <USBH_Process+0x3b6>
      break;
 8007090:	bf00      	nop
 8007092:	e004      	b.n	800709e <USBH_Process+0x3b6>
      break;
 8007094:	bf00      	nop
 8007096:	e002      	b.n	800709e <USBH_Process+0x3b6>
      break;
 8007098:	bf00      	nop
 800709a:	e000      	b.n	800709e <USBH_Process+0x3b6>
      break;
 800709c:	bf00      	nop
  }
  return USBH_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af04      	add	r7, sp, #16
 80070ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80070b4:	2301      	movs	r3, #1
 80070b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b07      	cmp	r3, #7
 80070be:	f200 81c1 	bhi.w	8007444 <USBH_HandleEnum+0x39c>
 80070c2:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <USBH_HandleEnum+0x20>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080070e9 	.word	0x080070e9
 80070cc:	080071a7 	.word	0x080071a7
 80070d0:	08007211 	.word	0x08007211
 80070d4:	0800729f 	.word	0x0800729f
 80070d8:	08007309 	.word	0x08007309
 80070dc:	08007379 	.word	0x08007379
 80070e0:	080073bf 	.word	0x080073bf
 80070e4:	08007405 	.word	0x08007405
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80070e8:	2108      	movs	r1, #8
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa50 	bl	8007590 <USBH_Get_DevDesc>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d130      	bne.n	800715c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	7919      	ldrb	r1, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800711e:	b292      	uxth	r2, r2
 8007120:	9202      	str	r2, [sp, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	9201      	str	r2, [sp, #4]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	4603      	mov	r3, r0
 800712a:	2280      	movs	r2, #128	; 0x80
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 ff79 	bl	8008024 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7959      	ldrb	r1, [r3, #5]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007146:	b292      	uxth	r2, r2
 8007148:	9202      	str	r2, [sp, #8]
 800714a:	2200      	movs	r2, #0
 800714c:	9201      	str	r2, [sp, #4]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4603      	mov	r3, r0
 8007152:	2200      	movs	r2, #0
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 ff65 	bl	8008024 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800715a:	e175      	b.n	8007448 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b03      	cmp	r3, #3
 8007160:	f040 8172 	bne.w	8007448 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800716a:	3301      	adds	r3, #1
 800716c:	b2da      	uxtb	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800717a:	2b03      	cmp	r3, #3
 800717c:	d903      	bls.n	8007186 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	220d      	movs	r2, #13
 8007182:	701a      	strb	r2, [r3, #0]
      break;
 8007184:	e160      	b.n	8007448 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	795b      	ldrb	r3, [r3, #5]
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 ff99 	bl	80080c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	791b      	ldrb	r3, [r3, #4]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 ff93 	bl	80080c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	701a      	strb	r2, [r3, #0]
      break;
 80071a4:	e150      	b.n	8007448 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80071a6:	2112      	movs	r1, #18
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f9f1 	bl	8007590 <USBH_Get_DevDesc>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d103      	bne.n	80071c0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071be:	e145      	b.n	800744c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	f040 8142 	bne.w	800744c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071ce:	3301      	adds	r3, #1
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d903      	bls.n	80071ea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	220d      	movs	r2, #13
 80071e6:	701a      	strb	r2, [r3, #0]
      break;
 80071e8:	e130      	b.n	800744c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	795b      	ldrb	r3, [r3, #5]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 ff67 	bl	80080c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	791b      	ldrb	r3, [r3, #4]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 ff61 	bl	80080c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
      break;
 800720e:	e11d      	b.n	800744c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007210:	2101      	movs	r1, #1
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa68 	bl	80076e8 <USBH_SetAddress>
 8007218:	4603      	mov	r3, r0
 800721a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d132      	bne.n	8007288 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007222:	2002      	movs	r0, #2
 8007224:	f001 fa45 	bl	80086b2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2203      	movs	r2, #3
 8007234:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	7919      	ldrb	r1, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800724a:	b292      	uxth	r2, r2
 800724c:	9202      	str	r2, [sp, #8]
 800724e:	2200      	movs	r2, #0
 8007250:	9201      	str	r2, [sp, #4]
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	2280      	movs	r2, #128	; 0x80
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fee3 	bl	8008024 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	7959      	ldrb	r1, [r3, #5]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007272:	b292      	uxth	r2, r2
 8007274:	9202      	str	r2, [sp, #8]
 8007276:	2200      	movs	r2, #0
 8007278:	9201      	str	r2, [sp, #4]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	4603      	mov	r3, r0
 800727e:	2200      	movs	r2, #0
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fecf 	bl	8008024 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007286:	e0e3      	b.n	8007450 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b03      	cmp	r3, #3
 800728c:	f040 80e0 	bne.w	8007450 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	220d      	movs	r2, #13
 8007294:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	705a      	strb	r2, [r3, #1]
      break;
 800729c:	e0d8      	b.n	8007450 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800729e:	2109      	movs	r1, #9
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f99d 	bl	80075e0 <USBH_Get_CfgDesc>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d103      	bne.n	80072b8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2204      	movs	r2, #4
 80072b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072b6:	e0cd      	b.n	8007454 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	f040 80ca 	bne.w	8007454 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072c6:	3301      	adds	r3, #1
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d903      	bls.n	80072e2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	220d      	movs	r2, #13
 80072de:	701a      	strb	r2, [r3, #0]
      break;
 80072e0:	e0b8      	b.n	8007454 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	795b      	ldrb	r3, [r3, #5]
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 feeb 	bl	80080c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	791b      	ldrb	r3, [r3, #4]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fee5 	bl	80080c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]
      break;
 8007306:	e0a5      	b.n	8007454 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f965 	bl	80075e0 <USBH_Get_CfgDesc>
 8007316:	4603      	mov	r3, r0
 8007318:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d103      	bne.n	8007328 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2205      	movs	r2, #5
 8007324:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007326:	e097      	b.n	8007458 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b03      	cmp	r3, #3
 800732c:	f040 8094 	bne.w	8007458 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007336:	3301      	adds	r3, #1
 8007338:	b2da      	uxtb	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007346:	2b03      	cmp	r3, #3
 8007348:	d903      	bls.n	8007352 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	220d      	movs	r2, #13
 800734e:	701a      	strb	r2, [r3, #0]
      break;
 8007350:	e082      	b.n	8007458 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	795b      	ldrb	r3, [r3, #5]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 feb3 	bl	80080c4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	791b      	ldrb	r3, [r3, #4]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fead 	bl	80080c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	701a      	strb	r2, [r3, #0]
      break;
 8007376:	e06f      	b.n	8007458 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800737e:	2b00      	cmp	r3, #0
 8007380:	d019      	beq.n	80073b6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800738e:	23ff      	movs	r3, #255	; 0xff
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f949 	bl	8007628 <USBH_Get_StringDesc>
 8007396:	4603      	mov	r3, r0
 8007398:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d103      	bne.n	80073a8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2206      	movs	r2, #6
 80073a4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073a6:	e059      	b.n	800745c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d156      	bne.n	800745c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2206      	movs	r2, #6
 80073b2:	705a      	strb	r2, [r3, #1]
      break;
 80073b4:	e052      	b.n	800745c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2206      	movs	r2, #6
 80073ba:	705a      	strb	r2, [r3, #1]
      break;
 80073bc:	e04e      	b.n	800745c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d019      	beq.n	80073fc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073d4:	23ff      	movs	r3, #255	; 0xff
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f926 	bl	8007628 <USBH_Get_StringDesc>
 80073dc:	4603      	mov	r3, r0
 80073de:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d103      	bne.n	80073ee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2207      	movs	r2, #7
 80073ea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073ec:	e038      	b.n	8007460 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d135      	bne.n	8007460 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2207      	movs	r2, #7
 80073f8:	705a      	strb	r2, [r3, #1]
      break;
 80073fa:	e031      	b.n	8007460 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2207      	movs	r2, #7
 8007400:	705a      	strb	r2, [r3, #1]
      break;
 8007402:	e02d      	b.n	8007460 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800740a:	2b00      	cmp	r3, #0
 800740c:	d017      	beq.n	800743e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800741a:	23ff      	movs	r3, #255	; 0xff
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f903 	bl	8007628 <USBH_Get_StringDesc>
 8007422:	4603      	mov	r3, r0
 8007424:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d102      	bne.n	8007432 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007430:	e018      	b.n	8007464 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	2b03      	cmp	r3, #3
 8007436:	d115      	bne.n	8007464 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73fb      	strb	r3, [r7, #15]
      break;
 800743c:	e012      	b.n	8007464 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]
      break;
 8007442:	e00f      	b.n	8007464 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007444:	bf00      	nop
 8007446:	e00e      	b.n	8007466 <USBH_HandleEnum+0x3be>
      break;
 8007448:	bf00      	nop
 800744a:	e00c      	b.n	8007466 <USBH_HandleEnum+0x3be>
      break;
 800744c:	bf00      	nop
 800744e:	e00a      	b.n	8007466 <USBH_HandleEnum+0x3be>
      break;
 8007450:	bf00      	nop
 8007452:	e008      	b.n	8007466 <USBH_HandleEnum+0x3be>
      break;
 8007454:	bf00      	nop
 8007456:	e006      	b.n	8007466 <USBH_HandleEnum+0x3be>
      break;
 8007458:	bf00      	nop
 800745a:	e004      	b.n	8007466 <USBH_HandleEnum+0x3be>
      break;
 800745c:	bf00      	nop
 800745e:	e002      	b.n	8007466 <USBH_HandleEnum+0x3be>
      break;
 8007460:	bf00      	nop
 8007462:	e000      	b.n	8007466 <USBH_HandleEnum+0x3be>
      break;
 8007464:	bf00      	nop
  }
  return Status;
 8007466:	7bfb      	ldrb	r3, [r7, #15]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007482:	bf00      	nop
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f804 	bl	80074b2 <USBH_HandleSof>
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b0b      	cmp	r3, #11
 80074c2:	d10a      	bne.n	80074da <USBH_HandleSof+0x28>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	4798      	blx	r3
  }
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80074f2:	bf00      	nop
}
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800750e:	bf00      	nop
}
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 ff58 	bl	800841e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	791b      	ldrb	r3, [r3, #4]
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fda5 	bl	80080c4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	795b      	ldrb	r3, [r3, #5]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fd9f 	bl	80080c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af02      	add	r7, sp, #8
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	4613      	mov	r3, r2
 80075aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ae:	2100      	movs	r1, #0
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f864 	bl	800767e <USBH_GetDescriptor>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	b292      	uxth	r2, r2
 80075d0:	4619      	mov	r1, r3
 80075d2:	f000 f918 	bl	8007806 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	331c      	adds	r3, #28
 80075f0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80075f2:	887b      	ldrh	r3, [r7, #2]
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075fc:	2100      	movs	r1, #0
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f83d 	bl	800767e <USBH_GetDescriptor>
 8007604:	4603      	mov	r3, r0
 8007606:	72fb      	strb	r3, [r7, #11]
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d107      	bne.n	800761e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007614:	887a      	ldrh	r2, [r7, #2]
 8007616:	68f9      	ldr	r1, [r7, #12]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f964 	bl	80078e6 <USBH_ParseCfgDesc>
  }

  return status;
 800761e:	7afb      	ldrb	r3, [r7, #11]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	607a      	str	r2, [r7, #4]
 8007632:	461a      	mov	r2, r3
 8007634:	460b      	mov	r3, r1
 8007636:	72fb      	strb	r3, [r7, #11]
 8007638:	4613      	mov	r3, r2
 800763a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	b29b      	uxth	r3, r3
 8007640:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007644:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800764c:	893b      	ldrh	r3, [r7, #8]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	460b      	mov	r3, r1
 8007652:	2100      	movs	r1, #0
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f812 	bl	800767e <USBH_GetDescriptor>
 800765a:	4603      	mov	r3, r0
 800765c:	75fb      	strb	r3, [r7, #23]
 800765e:	7dfb      	ldrb	r3, [r7, #23]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d107      	bne.n	8007674 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800766a:	893a      	ldrh	r2, [r7, #8]
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fa37 	bl	8007ae2 <USBH_ParseStringDesc>
  }

  return status;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	607b      	str	r3, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	72fb      	strb	r3, [r7, #11]
 800768c:	4613      	mov	r3, r2
 800768e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	789b      	ldrb	r3, [r3, #2]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d11c      	bne.n	80076d2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2206      	movs	r2, #6
 80076a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	893a      	ldrh	r2, [r7, #8]
 80076ae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80076b0:	893b      	ldrh	r3, [r7, #8]
 80076b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076ba:	d104      	bne.n	80076c6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f240 4209 	movw	r2, #1033	; 0x409
 80076c2:	829a      	strh	r2, [r3, #20]
 80076c4:	e002      	b.n	80076cc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8b3a      	ldrh	r2, [r7, #24]
 80076d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80076d2:	8b3b      	ldrh	r3, [r7, #24]
 80076d4:	461a      	mov	r2, r3
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fa50 	bl	8007b7e <USBH_CtlReq>
 80076de:	4603      	mov	r3, r0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	789b      	ldrb	r3, [r3, #2]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d10f      	bne.n	800771c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2205      	movs	r2, #5
 8007706:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fa2c 	bl	8007b7e <USBH_CtlReq>
 8007726:	4603      	mov	r3, r0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	789b      	ldrb	r3, [r3, #2]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d10e      	bne.n	8007762 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2209      	movs	r2, #9
 800774e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	887a      	ldrh	r2, [r7, #2]
 8007754:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007762:	2200      	movs	r2, #0
 8007764:	2100      	movs	r1, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fa09 	bl	8007b7e <USBH_CtlReq>
 800776c:	4603      	mov	r3, r0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	789b      	ldrb	r3, [r3, #2]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d10f      	bne.n	80077aa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2203      	movs	r2, #3
 8007794:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80077aa:	2200      	movs	r2, #0
 80077ac:	2100      	movs	r1, #0
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f9e5 	bl	8007b7e <USBH_CtlReq>
 80077b4:	4603      	mov	r3, r0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	789b      	ldrb	r3, [r3, #2]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d10f      	bne.n	80077f2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2202      	movs	r2, #2
 80077d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80077f2:	2200      	movs	r2, #0
 80077f4:	2100      	movs	r1, #0
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9c1 	bl	8007b7e <USBH_CtlReq>
 80077fc:	4603      	mov	r3, r0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	4613      	mov	r3, r2
 8007812:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	781a      	ldrb	r2, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	785a      	ldrb	r2, [r3, #1]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	3302      	adds	r3, #2
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	b29a      	uxth	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	3303      	adds	r3, #3
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	021b      	lsls	r3, r3, #8
 8007836:	b29b      	uxth	r3, r3
 8007838:	4313      	orrs	r3, r2
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	791a      	ldrb	r2, [r3, #4]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	795a      	ldrb	r2, [r3, #5]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	799a      	ldrb	r2, [r3, #6]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	79da      	ldrb	r2, [r3, #7]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	2b08      	cmp	r3, #8
 8007864:	d939      	bls.n	80078da <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	3308      	adds	r3, #8
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	b29a      	uxth	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	3309      	adds	r3, #9
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	b29b      	uxth	r3, r3
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	b29b      	uxth	r3, r3
 800787a:	4313      	orrs	r3, r2
 800787c:	b29a      	uxth	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	330a      	adds	r3, #10
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	b29a      	uxth	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	330b      	adds	r3, #11
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	b29b      	uxth	r3, r3
 8007896:	4313      	orrs	r3, r2
 8007898:	b29a      	uxth	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	330c      	adds	r3, #12
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	330d      	adds	r3, #13
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	4313      	orrs	r3, r2
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	7b9a      	ldrb	r2, [r3, #14]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	7bda      	ldrb	r2, [r3, #15]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	7c1a      	ldrb	r2, [r3, #16]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	7c5a      	ldrb	r2, [r3, #17]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	745a      	strb	r2, [r3, #17]
  }
}
 80078da:	bf00      	nop
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b08a      	sub	sp, #40	; 0x28
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	4613      	mov	r3, r2
 80078f2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	785a      	ldrb	r2, [r3, #1]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	3302      	adds	r3, #2
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	b29a      	uxth	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	3303      	adds	r3, #3
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	b29b      	uxth	r3, r3
 800792c:	4313      	orrs	r3, r2
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	791a      	ldrb	r2, [r3, #4]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	795a      	ldrb	r2, [r3, #5]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	799a      	ldrb	r2, [r3, #6]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	79da      	ldrb	r2, [r3, #7]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	7a1a      	ldrb	r2, [r3, #8]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	2b09      	cmp	r3, #9
 8007960:	d95f      	bls.n	8007a22 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007962:	2309      	movs	r3, #9
 8007964:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007966:	2300      	movs	r3, #0
 8007968:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800796a:	e051      	b.n	8007a10 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800796c:	f107 0316 	add.w	r3, r7, #22
 8007970:	4619      	mov	r1, r3
 8007972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007974:	f000 f8e8 	bl	8007b48 <USBH_GetNextDesc>
 8007978:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d146      	bne.n	8007a10 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007982:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007986:	221a      	movs	r2, #26
 8007988:	fb02 f303 	mul.w	r3, r2, r3
 800798c:	3308      	adds	r3, #8
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	3302      	adds	r3, #2
 8007994:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007998:	69f8      	ldr	r0, [r7, #28]
 800799a:	f000 f846 	bl	8007a2a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079a8:	e022      	b.n	80079f0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079aa:	f107 0316 	add.w	r3, r7, #22
 80079ae:	4619      	mov	r1, r3
 80079b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079b2:	f000 f8c9 	bl	8007b48 <USBH_GetNextDesc>
 80079b6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	2b05      	cmp	r3, #5
 80079be:	d117      	bne.n	80079f0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80079c8:	3201      	adds	r2, #1
 80079ca:	00d2      	lsls	r2, r2, #3
 80079cc:	211a      	movs	r1, #26
 80079ce:	fb01 f303 	mul.w	r3, r1, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	3308      	adds	r3, #8
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80079de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079e0:	69b8      	ldr	r0, [r7, #24]
 80079e2:	f000 f851 	bl	8007a88 <USBH_ParseEPDesc>
            ep_ix++;
 80079e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80079ea:	3301      	adds	r3, #1
 80079ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	791b      	ldrb	r3, [r3, #4]
 80079f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d204      	bcs.n	8007a06 <USBH_ParseCfgDesc+0x120>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	885a      	ldrh	r2, [r3, #2]
 8007a00:	8afb      	ldrh	r3, [r7, #22]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d8d1      	bhi.n	80079aa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d804      	bhi.n	8007a22 <USBH_ParseCfgDesc+0x13c>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	885a      	ldrh	r2, [r3, #2]
 8007a1c:	8afb      	ldrh	r3, [r7, #22]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d8a4      	bhi.n	800796c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007a22:	bf00      	nop
 8007a24:	3728      	adds	r7, #40	; 0x28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781a      	ldrb	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	785a      	ldrb	r2, [r3, #1]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	789a      	ldrb	r2, [r3, #2]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	78da      	ldrb	r2, [r3, #3]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	791a      	ldrb	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	795a      	ldrb	r2, [r3, #5]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	799a      	ldrb	r2, [r3, #6]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	79da      	ldrb	r2, [r3, #7]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	7a1a      	ldrb	r2, [r3, #8]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	721a      	strb	r2, [r3, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	785a      	ldrb	r2, [r3, #1]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	789a      	ldrb	r2, [r3, #2]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	78da      	ldrb	r2, [r3, #3]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	3305      	adds	r3, #5
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	799a      	ldrb	r2, [r3, #6]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	719a      	strb	r2, [r3, #6]
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b087      	sub	sp, #28
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	4613      	mov	r3, r2
 8007aee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	3301      	adds	r3, #1
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d120      	bne.n	8007b3c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	1e9a      	subs	r2, r3, #2
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	4293      	cmp	r3, r2
 8007b04:	bf28      	it	cs
 8007b06:	4613      	movcs	r3, r2
 8007b08:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007b10:	2300      	movs	r3, #0
 8007b12:	82fb      	strh	r3, [r7, #22]
 8007b14:	e00b      	b.n	8007b2e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007b16:	8afb      	ldrh	r3, [r7, #22]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	781a      	ldrb	r2, [r3, #0]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007b28:	8afb      	ldrh	r3, [r7, #22]
 8007b2a:	3302      	adds	r3, #2
 8007b2c:	82fb      	strh	r3, [r7, #22]
 8007b2e:	8afa      	ldrh	r2, [r7, #22]
 8007b30:	8abb      	ldrh	r3, [r7, #20]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d3ef      	bcc.n	8007b16 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	701a      	strb	r2, [r3, #0]
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	371c      	adds	r7, #28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	881a      	ldrh	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	4413      	add	r3, r2
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b70:	68fb      	ldr	r3, [r7, #12]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	789b      	ldrb	r3, [r3, #2]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d002      	beq.n	8007b9e <USBH_CtlReq+0x20>
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d00f      	beq.n	8007bbc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007b9c:	e027      	b.n	8007bee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	88fa      	ldrh	r2, [r7, #6]
 8007ba8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2201      	movs	r2, #1
 8007bae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bba:	e018      	b.n	8007bee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f81b 	bl	8007bf8 <USBH_HandleControl>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <USBH_CtlReq+0x54>
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d106      	bne.n	8007be0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	761a      	strb	r2, [r3, #24]
      break;
 8007bde:	e005      	b.n	8007bec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d102      	bne.n	8007bec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	709a      	strb	r2, [r3, #2]
      break;
 8007bec:	bf00      	nop
  }
  return status;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c00:	2301      	movs	r3, #1
 8007c02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	7e1b      	ldrb	r3, [r3, #24]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	2b0a      	cmp	r3, #10
 8007c10:	f200 8158 	bhi.w	8007ec4 <USBH_HandleControl+0x2cc>
 8007c14:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <USBH_HandleControl+0x24>)
 8007c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1a:	bf00      	nop
 8007c1c:	08007c49 	.word	0x08007c49
 8007c20:	08007c63 	.word	0x08007c63
 8007c24:	08007ccd 	.word	0x08007ccd
 8007c28:	08007cf3 	.word	0x08007cf3
 8007c2c:	08007d2b 	.word	0x08007d2b
 8007c30:	08007d57 	.word	0x08007d57
 8007c34:	08007da9 	.word	0x08007da9
 8007c38:	08007dcb 	.word	0x08007dcb
 8007c3c:	08007e07 	.word	0x08007e07
 8007c40:	08007e2f 	.word	0x08007e2f
 8007c44:	08007e6d 	.word	0x08007e6d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f103 0110 	add.w	r1, r3, #16
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	795b      	ldrb	r3, [r3, #5]
 8007c52:	461a      	mov	r2, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f945 	bl	8007ee4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	761a      	strb	r2, [r3, #24]
      break;
 8007c60:	e13b      	b.n	8007eda <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	795b      	ldrb	r3, [r3, #5]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fcc5 	bl	80085f8 <USBH_LL_GetURBState>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d11e      	bne.n	8007cb6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7c1b      	ldrb	r3, [r3, #16]
 8007c7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	8adb      	ldrh	r3, [r3, #22]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007c8a:	7b7b      	ldrb	r3, [r7, #13]
 8007c8c:	2b80      	cmp	r3, #128	; 0x80
 8007c8e:	d103      	bne.n	8007c98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2203      	movs	r2, #3
 8007c94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c96:	e117      	b.n	8007ec8 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2205      	movs	r2, #5
 8007c9c:	761a      	strb	r2, [r3, #24]
      break;
 8007c9e:	e113      	b.n	8007ec8 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007ca0:	7b7b      	ldrb	r3, [r7, #13]
 8007ca2:	2b80      	cmp	r3, #128	; 0x80
 8007ca4:	d103      	bne.n	8007cae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2209      	movs	r2, #9
 8007caa:	761a      	strb	r2, [r3, #24]
      break;
 8007cac:	e10c      	b.n	8007ec8 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	761a      	strb	r2, [r3, #24]
      break;
 8007cb4:	e108      	b.n	8007ec8 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d003      	beq.n	8007cc4 <USBH_HandleControl+0xcc>
 8007cbc:	7bbb      	ldrb	r3, [r7, #14]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	f040 8102 	bne.w	8007ec8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	220b      	movs	r2, #11
 8007cc8:	761a      	strb	r2, [r3, #24]
      break;
 8007cca:	e0fd      	b.n	8007ec8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6899      	ldr	r1, [r3, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	899a      	ldrh	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	791b      	ldrb	r3, [r3, #4]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f93c 	bl	8007f62 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2204      	movs	r2, #4
 8007cee:	761a      	strb	r2, [r3, #24]
      break;
 8007cf0:	e0f3      	b.n	8007eda <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	791b      	ldrb	r3, [r3, #4]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fc7d 	bl	80085f8 <USBH_LL_GetURBState>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d102      	bne.n	8007d0e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2209      	movs	r2, #9
 8007d0c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007d0e:	7bbb      	ldrb	r3, [r7, #14]
 8007d10:	2b05      	cmp	r3, #5
 8007d12:	d102      	bne.n	8007d1a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007d14:	2303      	movs	r3, #3
 8007d16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d18:	e0d8      	b.n	8007ecc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	f040 80d5 	bne.w	8007ecc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	220b      	movs	r2, #11
 8007d26:	761a      	strb	r2, [r3, #24]
      break;
 8007d28:	e0d0      	b.n	8007ecc <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6899      	ldr	r1, [r3, #8]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	899a      	ldrh	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	7958      	ldrb	r0, [r3, #5]
 8007d36:	2301      	movs	r3, #1
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f8eb 	bl	8007f18 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2206      	movs	r2, #6
 8007d52:	761a      	strb	r2, [r3, #24]
      break;
 8007d54:	e0c1      	b.n	8007eda <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	795b      	ldrb	r3, [r3, #5]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fc4b 	bl	80085f8 <USBH_LL_GetURBState>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d103      	bne.n	8007d74 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2207      	movs	r2, #7
 8007d70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d72:	e0ad      	b.n	8007ed0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	2b05      	cmp	r3, #5
 8007d78:	d105      	bne.n	8007d86 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	220c      	movs	r2, #12
 8007d7e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007d80:	2303      	movs	r3, #3
 8007d82:	73fb      	strb	r3, [r7, #15]
      break;
 8007d84:	e0a4      	b.n	8007ed0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d103      	bne.n	8007d94 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2205      	movs	r2, #5
 8007d90:	761a      	strb	r2, [r3, #24]
      break;
 8007d92:	e09d      	b.n	8007ed0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	f040 809a 	bne.w	8007ed0 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	220b      	movs	r2, #11
 8007da0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007da2:	2302      	movs	r3, #2
 8007da4:	73fb      	strb	r3, [r7, #15]
      break;
 8007da6:	e093      	b.n	8007ed0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	791b      	ldrb	r3, [r3, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	2100      	movs	r1, #0
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f8d6 	bl	8007f62 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	761a      	strb	r2, [r3, #24]

      break;
 8007dc8:	e087      	b.n	8007eda <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	791b      	ldrb	r3, [r3, #4]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fc11 	bl	80085f8 <USBH_LL_GetURBState>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d105      	bne.n	8007dec <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	220d      	movs	r2, #13
 8007de4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007dea:	e073      	b.n	8007ed4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d103      	bne.n	8007dfa <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	220b      	movs	r2, #11
 8007df6:	761a      	strb	r2, [r3, #24]
      break;
 8007df8:	e06c      	b.n	8007ed4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b05      	cmp	r3, #5
 8007dfe:	d169      	bne.n	8007ed4 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007e00:	2303      	movs	r3, #3
 8007e02:	73fb      	strb	r3, [r7, #15]
      break;
 8007e04:	e066      	b.n	8007ed4 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	795a      	ldrb	r2, [r3, #5]
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	2200      	movs	r2, #0
 8007e12:	2100      	movs	r1, #0
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f87f 	bl	8007f18 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	220a      	movs	r2, #10
 8007e2a:	761a      	strb	r2, [r3, #24]
      break;
 8007e2c:	e055      	b.n	8007eda <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	795b      	ldrb	r3, [r3, #5]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fbdf 	bl	80085f8 <USBH_LL_GetURBState>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d105      	bne.n	8007e50 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	220d      	movs	r2, #13
 8007e4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e4e:	e043      	b.n	8007ed8 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d103      	bne.n	8007e5e <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2209      	movs	r2, #9
 8007e5a:	761a      	strb	r2, [r3, #24]
      break;
 8007e5c:	e03c      	b.n	8007ed8 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d139      	bne.n	8007ed8 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	220b      	movs	r2, #11
 8007e68:	761a      	strb	r2, [r3, #24]
      break;
 8007e6a:	e035      	b.n	8007ed8 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	7e5b      	ldrb	r3, [r3, #25]
 8007e70:	3301      	adds	r3, #1
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	765a      	strb	r2, [r3, #25]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	7e5b      	ldrb	r3, [r3, #25]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d806      	bhi.n	8007e8e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e8c:	e025      	b.n	8007eda <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e94:	2106      	movs	r1, #6
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	795b      	ldrb	r3, [r3, #5]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f90c 	bl	80080c4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	791b      	ldrb	r3, [r3, #4]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f906 	bl	80080c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec2:	e00a      	b.n	8007eda <USBH_HandleControl+0x2e2>

    default:
      break;
 8007ec4:	bf00      	nop
 8007ec6:	e008      	b.n	8007eda <USBH_HandleControl+0x2e2>
      break;
 8007ec8:	bf00      	nop
 8007eca:	e006      	b.n	8007eda <USBH_HandleControl+0x2e2>
      break;
 8007ecc:	bf00      	nop
 8007ece:	e004      	b.n	8007eda <USBH_HandleControl+0x2e2>
      break;
 8007ed0:	bf00      	nop
 8007ed2:	e002      	b.n	8007eda <USBH_HandleControl+0x2e2>
      break;
 8007ed4:	bf00      	nop
 8007ed6:	e000      	b.n	8007eda <USBH_HandleControl+0x2e2>
      break;
 8007ed8:	bf00      	nop
  }

  return status;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af04      	add	r7, sp, #16
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ef2:	79f9      	ldrb	r1, [r7, #7]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	9303      	str	r3, [sp, #12]
 8007ef8:	2308      	movs	r3, #8
 8007efa:	9302      	str	r3, [sp, #8]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	2300      	movs	r3, #0
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	2300      	movs	r3, #0
 8007f06:	2200      	movs	r2, #0
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 fb44 	bl	8008596 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af04      	add	r7, sp, #16
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	4611      	mov	r1, r2
 8007f24:	461a      	mov	r2, r3
 8007f26:	460b      	mov	r3, r1
 8007f28:	80fb      	strh	r3, [r7, #6]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f3c:	7979      	ldrb	r1, [r7, #5]
 8007f3e:	7e3b      	ldrb	r3, [r7, #24]
 8007f40:	9303      	str	r3, [sp, #12]
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	9302      	str	r3, [sp, #8]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2200      	movs	r2, #0
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fb1f 	bl	8008596 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b088      	sub	sp, #32
 8007f66:	af04      	add	r7, sp, #16
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	461a      	mov	r2, r3
 8007f70:	460b      	mov	r3, r1
 8007f72:	80fb      	strh	r3, [r7, #6]
 8007f74:	4613      	mov	r3, r2
 8007f76:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f78:	7979      	ldrb	r1, [r7, #5]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9303      	str	r3, [sp, #12]
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	9302      	str	r3, [sp, #8]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	2301      	movs	r3, #1
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fb01 	bl	8008596 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f94:	2300      	movs	r3, #0

}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b088      	sub	sp, #32
 8007fa2:	af04      	add	r7, sp, #16
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	4611      	mov	r1, r2
 8007faa:	461a      	mov	r2, r3
 8007fac:	460b      	mov	r3, r1
 8007fae:	80fb      	strh	r3, [r7, #6]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fc2:	7979      	ldrb	r1, [r7, #5]
 8007fc4:	7e3b      	ldrb	r3, [r7, #24]
 8007fc6:	9303      	str	r3, [sp, #12]
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	9302      	str	r3, [sp, #8]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	9301      	str	r3, [sp, #4]
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 fadc 	bl	8008596 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af04      	add	r7, sp, #16
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	80fb      	strh	r3, [r7, #6]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007ffe:	7979      	ldrb	r1, [r7, #5]
 8008000:	2300      	movs	r3, #0
 8008002:	9303      	str	r3, [sp, #12]
 8008004:	88fb      	ldrh	r3, [r7, #6]
 8008006:	9302      	str	r3, [sp, #8]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	9301      	str	r3, [sp, #4]
 800800c:	2301      	movs	r3, #1
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	2302      	movs	r3, #2
 8008012:	2201      	movs	r2, #1
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 fabe 	bl	8008596 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af04      	add	r7, sp, #16
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	4608      	mov	r0, r1
 800802e:	4611      	mov	r1, r2
 8008030:	461a      	mov	r2, r3
 8008032:	4603      	mov	r3, r0
 8008034:	70fb      	strb	r3, [r7, #3]
 8008036:	460b      	mov	r3, r1
 8008038:	70bb      	strb	r3, [r7, #2]
 800803a:	4613      	mov	r3, r2
 800803c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800803e:	7878      	ldrb	r0, [r7, #1]
 8008040:	78ba      	ldrb	r2, [r7, #2]
 8008042:	78f9      	ldrb	r1, [r7, #3]
 8008044:	8b3b      	ldrh	r3, [r7, #24]
 8008046:	9302      	str	r3, [sp, #8]
 8008048:	7d3b      	ldrb	r3, [r7, #20]
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	7c3b      	ldrb	r3, [r7, #16]
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	4603      	mov	r3, r0
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fa51 	bl	80084fa <USBH_LL_OpenPipe>

  return USBH_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fa70 	bl	8008558 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	460b      	mov	r3, r1
 800808c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f836 	bl	8008100 <USBH_GetFreePipe>
 8008094:	4603      	mov	r3, r0
 8008096:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008098:	89fb      	ldrh	r3, [r7, #14]
 800809a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800809e:	4293      	cmp	r3, r2
 80080a0:	d00a      	beq.n	80080b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	89fb      	ldrh	r3, [r7, #14]
 80080a6:	f003 030f 	and.w	r3, r3, #15
 80080aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	33e0      	adds	r3, #224	; 0xe0
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	440b      	add	r3, r1
 80080b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80080b8:	89fb      	ldrh	r3, [r7, #14]
 80080ba:	b2db      	uxtb	r3, r3
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	2b0a      	cmp	r3, #10
 80080d4:	d80d      	bhi.n	80080f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80080d6:	78fb      	ldrb	r3, [r7, #3]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	33e0      	adds	r3, #224	; 0xe0
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	78fb      	ldrb	r3, [r7, #3]
 80080e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	33e0      	adds	r3, #224	; 0xe0
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800810c:	2300      	movs	r3, #0
 800810e:	73fb      	strb	r3, [r7, #15]
 8008110:	e00f      	b.n	8008132 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	33e0      	adds	r3, #224	; 0xe0
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d102      	bne.n	800812c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	b29b      	uxth	r3, r3
 800812a:	e007      	b.n	800813c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	3301      	adds	r3, #1
 8008130:	73fb      	strb	r3, [r7, #15]
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	2b0a      	cmp	r3, #10
 8008136:	d9ec      	bls.n	8008112 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008138:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800814c:	2201      	movs	r2, #1
 800814e:	490e      	ldr	r1, [pc, #56]	; (8008188 <MX_USB_HOST_Init+0x40>)
 8008150:	480e      	ldr	r0, [pc, #56]	; (800818c <MX_USB_HOST_Init+0x44>)
 8008152:	f7fe fc9f 	bl	8006a94 <USBH_Init>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800815c:	f7f8 fd28 	bl	8000bb0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008160:	490b      	ldr	r1, [pc, #44]	; (8008190 <MX_USB_HOST_Init+0x48>)
 8008162:	480a      	ldr	r0, [pc, #40]	; (800818c <MX_USB_HOST_Init+0x44>)
 8008164:	f7fe fd24 	bl	8006bb0 <USBH_RegisterClass>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800816e:	f7f8 fd1f 	bl	8000bb0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008172:	4806      	ldr	r0, [pc, #24]	; (800818c <MX_USB_HOST_Init+0x44>)
 8008174:	f7fe fda8 	bl	8006cc8 <USBH_Start>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800817e:	f7f8 fd17 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008182:	bf00      	nop
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	080081a9 	.word	0x080081a9
 800818c:	20000284 	.word	0x20000284
 8008190:	2000000c 	.word	0x2000000c

08008194 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008198:	4802      	ldr	r0, [pc, #8]	; (80081a4 <MX_USB_HOST_Process+0x10>)
 800819a:	f7fe fda5 	bl	8006ce8 <USBH_Process>
}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20000284 	.word	0x20000284

080081a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	2b04      	cmp	r3, #4
 80081ba:	d819      	bhi.n	80081f0 <USBH_UserProcess+0x48>
 80081bc:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <USBH_UserProcess+0x1c>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081f1 	.word	0x080081f1
 80081c8:	080081e1 	.word	0x080081e1
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	080081e9 	.word	0x080081e9
 80081d4:	080081d9 	.word	0x080081d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80081d8:	4b09      	ldr	r3, [pc, #36]	; (8008200 <USBH_UserProcess+0x58>)
 80081da:	2203      	movs	r2, #3
 80081dc:	701a      	strb	r2, [r3, #0]
  break;
 80081de:	e008      	b.n	80081f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80081e0:	4b07      	ldr	r3, [pc, #28]	; (8008200 <USBH_UserProcess+0x58>)
 80081e2:	2202      	movs	r2, #2
 80081e4:	701a      	strb	r2, [r3, #0]
  break;
 80081e6:	e004      	b.n	80081f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80081e8:	4b05      	ldr	r3, [pc, #20]	; (8008200 <USBH_UserProcess+0x58>)
 80081ea:	2201      	movs	r2, #1
 80081ec:	701a      	strb	r2, [r3, #0]
  break;
 80081ee:	e000      	b.n	80081f2 <USBH_UserProcess+0x4a>

  default:
  break;
 80081f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	200000b8 	.word	0x200000b8

08008204 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08a      	sub	sp, #40	; 0x28
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	60da      	str	r2, [r3, #12]
 800821a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008224:	d147      	bne.n	80082b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008226:	2300      	movs	r3, #0
 8008228:	613b      	str	r3, [r7, #16]
 800822a:	4b25      	ldr	r3, [pc, #148]	; (80082c0 <HAL_HCD_MspInit+0xbc>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822e:	4a24      	ldr	r2, [pc, #144]	; (80082c0 <HAL_HCD_MspInit+0xbc>)
 8008230:	f043 0301 	orr.w	r3, r3, #1
 8008234:	6313      	str	r3, [r2, #48]	; 0x30
 8008236:	4b22      	ldr	r3, [pc, #136]	; (80082c0 <HAL_HCD_MspInit+0xbc>)
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	613b      	str	r3, [r7, #16]
 8008240:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008248:	2300      	movs	r3, #0
 800824a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800824c:	2300      	movs	r3, #0
 800824e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008250:	f107 0314 	add.w	r3, r7, #20
 8008254:	4619      	mov	r1, r3
 8008256:	481b      	ldr	r0, [pc, #108]	; (80082c4 <HAL_HCD_MspInit+0xc0>)
 8008258:	f7f9 f94a 	bl	80014f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800825c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008262:	2302      	movs	r3, #2
 8008264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008266:	2300      	movs	r3, #0
 8008268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800826a:	2303      	movs	r3, #3
 800826c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800826e:	230a      	movs	r3, #10
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008272:	f107 0314 	add.w	r3, r7, #20
 8008276:	4619      	mov	r1, r3
 8008278:	4812      	ldr	r0, [pc, #72]	; (80082c4 <HAL_HCD_MspInit+0xc0>)
 800827a:	f7f9 f939 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800827e:	4b10      	ldr	r3, [pc, #64]	; (80082c0 <HAL_HCD_MspInit+0xbc>)
 8008280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008282:	4a0f      	ldr	r2, [pc, #60]	; (80082c0 <HAL_HCD_MspInit+0xbc>)
 8008284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008288:	6353      	str	r3, [r2, #52]	; 0x34
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <HAL_HCD_MspInit+0xbc>)
 8008290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008292:	4a0b      	ldr	r2, [pc, #44]	; (80082c0 <HAL_HCD_MspInit+0xbc>)
 8008294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008298:	6453      	str	r3, [r2, #68]	; 0x44
 800829a:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <HAL_HCD_MspInit+0xbc>)
 800829c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082a6:	2200      	movs	r2, #0
 80082a8:	2100      	movs	r1, #0
 80082aa:	2043      	movs	r0, #67	; 0x43
 80082ac:	f7f9 f8e9 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082b0:	2043      	movs	r0, #67	; 0x43
 80082b2:	f7f9 f902 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082b6:	bf00      	nop
 80082b8:	3728      	adds	r7, #40	; 0x28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	40023800 	.word	0x40023800
 80082c4:	40020000 	.word	0x40020000

080082c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff f8d9 	bl	800748e <USBH_LL_IncTimer>
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff f911 	bl	800751a <USBH_LL_Connect>
}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff f91a 	bl	8007548 <USBH_LL_Disconnect>
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
 8008328:	4613      	mov	r3, r2
 800832a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff f8cb 	bl	80074e2 <USBH_LL_PortEnabled>
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008362:	4618      	mov	r0, r3
 8008364:	f7ff f8cb 	bl	80074fe <USBH_LL_PortDisabled>
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800837e:	2b01      	cmp	r3, #1
 8008380:	d12a      	bne.n	80083d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008382:	4a18      	ldr	r2, [pc, #96]	; (80083e4 <USBH_LL_Init+0x74>)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a15      	ldr	r2, [pc, #84]	; (80083e4 <USBH_LL_Init+0x74>)
 800838e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008392:	4b14      	ldr	r3, [pc, #80]	; (80083e4 <USBH_LL_Init+0x74>)
 8008394:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008398:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800839a:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <USBH_LL_Init+0x74>)
 800839c:	2208      	movs	r2, #8
 800839e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80083a0:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <USBH_LL_Init+0x74>)
 80083a2:	2201      	movs	r2, #1
 80083a4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80083a6:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <USBH_LL_Init+0x74>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80083ac:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <USBH_LL_Init+0x74>)
 80083ae:	2202      	movs	r2, #2
 80083b0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083b2:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <USBH_LL_Init+0x74>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80083b8:	480a      	ldr	r0, [pc, #40]	; (80083e4 <USBH_LL_Init+0x74>)
 80083ba:	f7f9 fa34 	bl	8001826 <HAL_HCD_Init>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80083c4:	f7f8 fbf4 	bl	8000bb0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80083c8:	4806      	ldr	r0, [pc, #24]	; (80083e4 <USBH_LL_Init+0x74>)
 80083ca:	f7f9 fe37 	bl	800203c <HAL_HCD_GetCurrentFrame>
 80083ce:	4603      	mov	r3, r0
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7ff f84c 	bl	8007470 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	2000065c 	.word	0x2000065c

080083e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083fe:	4618      	mov	r0, r3
 8008400:	f7f9 fda4 	bl	8001f4c <HAL_HCD_Start>
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f95c 	bl	80086c8 <USBH_Get_USB_Status>
 8008410:	4603      	mov	r3, r0
 8008412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008414:	7bbb      	ldrb	r3, [r7, #14]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008434:	4618      	mov	r0, r3
 8008436:	f7f9 fdac 	bl	8001f92 <HAL_HCD_Stop>
 800843a:	4603      	mov	r3, r0
 800843c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f941 	bl	80086c8 <USBH_Get_USB_Status>
 8008446:	4603      	mov	r3, r0
 8008448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800844a:	7bbb      	ldrb	r3, [r7, #14]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800845c:	2301      	movs	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008466:	4618      	mov	r0, r3
 8008468:	f7f9 fdf6 	bl	8002058 <HAL_HCD_GetCurrentSpeed>
 800846c:	4603      	mov	r3, r0
 800846e:	2b01      	cmp	r3, #1
 8008470:	d007      	beq.n	8008482 <USBH_LL_GetSpeed+0x2e>
 8008472:	2b01      	cmp	r3, #1
 8008474:	d302      	bcc.n	800847c <USBH_LL_GetSpeed+0x28>
 8008476:	2b02      	cmp	r3, #2
 8008478:	d006      	beq.n	8008488 <USBH_LL_GetSpeed+0x34>
 800847a:	e008      	b.n	800848e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800847c:	2300      	movs	r3, #0
 800847e:	73fb      	strb	r3, [r7, #15]
    break;
 8008480:	e008      	b.n	8008494 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008482:	2301      	movs	r3, #1
 8008484:	73fb      	strb	r3, [r7, #15]
    break;
 8008486:	e005      	b.n	8008494 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008488:	2302      	movs	r3, #2
 800848a:	73fb      	strb	r3, [r7, #15]
    break;
 800848c:	e002      	b.n	8008494 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
    break;
 8008492:	bf00      	nop
  }
  return  speed;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7f9 fd89 	bl	8001fcc <HAL_HCD_ResetPort>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f901 	bl	80086c8 <USBH_Get_USB_Status>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	4611      	mov	r1, r2
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7f9 fd91 	bl	8002012 <HAL_HCD_HC_GetXferCount>
 80084f0:	4603      	mov	r3, r0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084fa:	b590      	push	{r4, r7, lr}
 80084fc:	b089      	sub	sp, #36	; 0x24
 80084fe:	af04      	add	r7, sp, #16
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	4608      	mov	r0, r1
 8008504:	4611      	mov	r1, r2
 8008506:	461a      	mov	r2, r3
 8008508:	4603      	mov	r3, r0
 800850a:	70fb      	strb	r3, [r7, #3]
 800850c:	460b      	mov	r3, r1
 800850e:	70bb      	strb	r3, [r7, #2]
 8008510:	4613      	mov	r3, r2
 8008512:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008522:	787c      	ldrb	r4, [r7, #1]
 8008524:	78ba      	ldrb	r2, [r7, #2]
 8008526:	78f9      	ldrb	r1, [r7, #3]
 8008528:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800852a:	9302      	str	r3, [sp, #8]
 800852c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	4623      	mov	r3, r4
 800853a:	f7f9 f9d6 	bl	80018ea <HAL_HCD_HC_Init>
 800853e:	4603      	mov	r3, r0
 8008540:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	4618      	mov	r0, r3
 8008546:	f000 f8bf 	bl	80086c8 <USBH_Get_USB_Status>
 800854a:	4603      	mov	r3, r0
 800854c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800854e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	bd90      	pop	{r4, r7, pc}

08008558 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008572:	78fa      	ldrb	r2, [r7, #3]
 8008574:	4611      	mov	r1, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f7f9 fa4f 	bl	8001a1a <HAL_HCD_HC_Halt>
 800857c:	4603      	mov	r3, r0
 800857e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	4618      	mov	r0, r3
 8008584:	f000 f8a0 	bl	80086c8 <USBH_Get_USB_Status>
 8008588:	4603      	mov	r3, r0
 800858a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800858c:	7bbb      	ldrb	r3, [r7, #14]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008596:	b590      	push	{r4, r7, lr}
 8008598:	b089      	sub	sp, #36	; 0x24
 800859a:	af04      	add	r7, sp, #16
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	4608      	mov	r0, r1
 80085a0:	4611      	mov	r1, r2
 80085a2:	461a      	mov	r2, r3
 80085a4:	4603      	mov	r3, r0
 80085a6:	70fb      	strb	r3, [r7, #3]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70bb      	strb	r3, [r7, #2]
 80085ac:	4613      	mov	r3, r2
 80085ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80085be:	787c      	ldrb	r4, [r7, #1]
 80085c0:	78ba      	ldrb	r2, [r7, #2]
 80085c2:	78f9      	ldrb	r1, [r7, #3]
 80085c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085c8:	9303      	str	r3, [sp, #12]
 80085ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085cc:	9302      	str	r3, [sp, #8]
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	4623      	mov	r3, r4
 80085da:	f7f9 fa41 	bl	8001a60 <HAL_HCD_HC_SubmitRequest>
 80085de:	4603      	mov	r3, r0
 80085e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 f86f 	bl	80086c8 <USBH_Get_USB_Status>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd90      	pop	{r4, r7, pc}

080085f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800860a:	78fa      	ldrb	r2, [r7, #3]
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f7f9 fcea 	bl	8001fe8 <HAL_HCD_HC_GetURBState>
 8008614:	4603      	mov	r3, r0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b082      	sub	sp, #8
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008630:	2b01      	cmp	r3, #1
 8008632:	d103      	bne.n	800863c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f872 	bl	8008720 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800863c:	20c8      	movs	r0, #200	; 0xc8
 800863e:	f7f8 fe23 	bl	8001288 <HAL_Delay>
  return USBH_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
 8008658:	4613      	mov	r3, r2
 800865a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008662:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008664:	78fa      	ldrb	r2, [r7, #3]
 8008666:	68f9      	ldr	r1, [r7, #12]
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	440b      	add	r3, r1
 8008672:	333b      	adds	r3, #59	; 0x3b
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800867a:	78fa      	ldrb	r2, [r7, #3]
 800867c:	68f9      	ldr	r1, [r7, #12]
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	440b      	add	r3, r1
 8008688:	3350      	adds	r3, #80	; 0x50
 800868a:	78ba      	ldrb	r2, [r7, #2]
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	e009      	b.n	80086a4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008690:	78fa      	ldrb	r2, [r7, #3]
 8008692:	68f9      	ldr	r1, [r7, #12]
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	440b      	add	r3, r1
 800869e:	3351      	adds	r3, #81	; 0x51
 80086a0:	78ba      	ldrb	r2, [r7, #2]
 80086a2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b082      	sub	sp, #8
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7f8 fde4 	bl	8001288 <HAL_Delay>
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d817      	bhi.n	800870c <USBH_Get_USB_Status+0x44>
 80086dc:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <USBH_Get_USB_Status+0x1c>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	080086f5 	.word	0x080086f5
 80086e8:	080086fb 	.word	0x080086fb
 80086ec:	08008701 	.word	0x08008701
 80086f0:	08008707 	.word	0x08008707
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
    break;
 80086f8:	e00b      	b.n	8008712 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80086fa:	2302      	movs	r3, #2
 80086fc:	73fb      	strb	r3, [r7, #15]
    break;
 80086fe:	e008      	b.n	8008712 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008700:	2301      	movs	r3, #1
 8008702:	73fb      	strb	r3, [r7, #15]
    break;
 8008704:	e005      	b.n	8008712 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008706:	2302      	movs	r3, #2
 8008708:	73fb      	strb	r3, [r7, #15]
    break;
 800870a:	e002      	b.n	8008712 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800870c:	2302      	movs	r3, #2
 800870e:	73fb      	strb	r3, [r7, #15]
    break;
 8008710:	bf00      	nop
  }
  return usb_status;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008734:	2301      	movs	r3, #1
 8008736:	73fb      	strb	r3, [r7, #15]
 8008738:	e001      	b.n	800873e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800873a:	2300      	movs	r3, #0
 800873c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	461a      	mov	r2, r3
 8008742:	2101      	movs	r1, #1
 8008744:	4803      	ldr	r0, [pc, #12]	; (8008754 <MX_DriverVbusFS+0x34>)
 8008746:	f7f9 f855 	bl	80017f4 <HAL_GPIO_WritePin>
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	40020800 	.word	0x40020800

08008758 <__errno>:
 8008758:	4b01      	ldr	r3, [pc, #4]	; (8008760 <__errno+0x8>)
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	2000002c 	.word	0x2000002c

08008764 <__libc_init_array>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	4e0d      	ldr	r6, [pc, #52]	; (800879c <__libc_init_array+0x38>)
 8008768:	4c0d      	ldr	r4, [pc, #52]	; (80087a0 <__libc_init_array+0x3c>)
 800876a:	1ba4      	subs	r4, r4, r6
 800876c:	10a4      	asrs	r4, r4, #2
 800876e:	2500      	movs	r5, #0
 8008770:	42a5      	cmp	r5, r4
 8008772:	d109      	bne.n	8008788 <__libc_init_array+0x24>
 8008774:	4e0b      	ldr	r6, [pc, #44]	; (80087a4 <__libc_init_array+0x40>)
 8008776:	4c0c      	ldr	r4, [pc, #48]	; (80087a8 <__libc_init_array+0x44>)
 8008778:	f000 f8ea 	bl	8008950 <_init>
 800877c:	1ba4      	subs	r4, r4, r6
 800877e:	10a4      	asrs	r4, r4, #2
 8008780:	2500      	movs	r5, #0
 8008782:	42a5      	cmp	r5, r4
 8008784:	d105      	bne.n	8008792 <__libc_init_array+0x2e>
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800878c:	4798      	blx	r3
 800878e:	3501      	adds	r5, #1
 8008790:	e7ee      	b.n	8008770 <__libc_init_array+0xc>
 8008792:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008796:	4798      	blx	r3
 8008798:	3501      	adds	r5, #1
 800879a:	e7f2      	b.n	8008782 <__libc_init_array+0x1e>
 800879c:	0800898c 	.word	0x0800898c
 80087a0:	0800898c 	.word	0x0800898c
 80087a4:	0800898c 	.word	0x0800898c
 80087a8:	08008990 	.word	0x08008990

080087ac <malloc>:
 80087ac:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <malloc+0xc>)
 80087ae:	4601      	mov	r1, r0
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	f000 b861 	b.w	8008878 <_malloc_r>
 80087b6:	bf00      	nop
 80087b8:	2000002c 	.word	0x2000002c

080087bc <free>:
 80087bc:	4b02      	ldr	r3, [pc, #8]	; (80087c8 <free+0xc>)
 80087be:	4601      	mov	r1, r0
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	f000 b80b 	b.w	80087dc <_free_r>
 80087c6:	bf00      	nop
 80087c8:	2000002c 	.word	0x2000002c

080087cc <memset>:
 80087cc:	4402      	add	r2, r0
 80087ce:	4603      	mov	r3, r0
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d100      	bne.n	80087d6 <memset+0xa>
 80087d4:	4770      	bx	lr
 80087d6:	f803 1b01 	strb.w	r1, [r3], #1
 80087da:	e7f9      	b.n	80087d0 <memset+0x4>

080087dc <_free_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4605      	mov	r5, r0
 80087e0:	2900      	cmp	r1, #0
 80087e2:	d045      	beq.n	8008870 <_free_r+0x94>
 80087e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e8:	1f0c      	subs	r4, r1, #4
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bfb8      	it	lt
 80087ee:	18e4      	addlt	r4, r4, r3
 80087f0:	f000 f8ac 	bl	800894c <__malloc_lock>
 80087f4:	4a1f      	ldr	r2, [pc, #124]	; (8008874 <_free_r+0x98>)
 80087f6:	6813      	ldr	r3, [r2, #0]
 80087f8:	4610      	mov	r0, r2
 80087fa:	b933      	cbnz	r3, 800880a <_free_r+0x2e>
 80087fc:	6063      	str	r3, [r4, #4]
 80087fe:	6014      	str	r4, [r2, #0]
 8008800:	4628      	mov	r0, r5
 8008802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008806:	f000 b8a2 	b.w	800894e <__malloc_unlock>
 800880a:	42a3      	cmp	r3, r4
 800880c:	d90c      	bls.n	8008828 <_free_r+0x4c>
 800880e:	6821      	ldr	r1, [r4, #0]
 8008810:	1862      	adds	r2, r4, r1
 8008812:	4293      	cmp	r3, r2
 8008814:	bf04      	itt	eq
 8008816:	681a      	ldreq	r2, [r3, #0]
 8008818:	685b      	ldreq	r3, [r3, #4]
 800881a:	6063      	str	r3, [r4, #4]
 800881c:	bf04      	itt	eq
 800881e:	1852      	addeq	r2, r2, r1
 8008820:	6022      	streq	r2, [r4, #0]
 8008822:	6004      	str	r4, [r0, #0]
 8008824:	e7ec      	b.n	8008800 <_free_r+0x24>
 8008826:	4613      	mov	r3, r2
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	b10a      	cbz	r2, 8008830 <_free_r+0x54>
 800882c:	42a2      	cmp	r2, r4
 800882e:	d9fa      	bls.n	8008826 <_free_r+0x4a>
 8008830:	6819      	ldr	r1, [r3, #0]
 8008832:	1858      	adds	r0, r3, r1
 8008834:	42a0      	cmp	r0, r4
 8008836:	d10b      	bne.n	8008850 <_free_r+0x74>
 8008838:	6820      	ldr	r0, [r4, #0]
 800883a:	4401      	add	r1, r0
 800883c:	1858      	adds	r0, r3, r1
 800883e:	4282      	cmp	r2, r0
 8008840:	6019      	str	r1, [r3, #0]
 8008842:	d1dd      	bne.n	8008800 <_free_r+0x24>
 8008844:	6810      	ldr	r0, [r2, #0]
 8008846:	6852      	ldr	r2, [r2, #4]
 8008848:	605a      	str	r2, [r3, #4]
 800884a:	4401      	add	r1, r0
 800884c:	6019      	str	r1, [r3, #0]
 800884e:	e7d7      	b.n	8008800 <_free_r+0x24>
 8008850:	d902      	bls.n	8008858 <_free_r+0x7c>
 8008852:	230c      	movs	r3, #12
 8008854:	602b      	str	r3, [r5, #0]
 8008856:	e7d3      	b.n	8008800 <_free_r+0x24>
 8008858:	6820      	ldr	r0, [r4, #0]
 800885a:	1821      	adds	r1, r4, r0
 800885c:	428a      	cmp	r2, r1
 800885e:	bf04      	itt	eq
 8008860:	6811      	ldreq	r1, [r2, #0]
 8008862:	6852      	ldreq	r2, [r2, #4]
 8008864:	6062      	str	r2, [r4, #4]
 8008866:	bf04      	itt	eq
 8008868:	1809      	addeq	r1, r1, r0
 800886a:	6021      	streq	r1, [r4, #0]
 800886c:	605c      	str	r4, [r3, #4]
 800886e:	e7c7      	b.n	8008800 <_free_r+0x24>
 8008870:	bd38      	pop	{r3, r4, r5, pc}
 8008872:	bf00      	nop
 8008874:	200000bc 	.word	0x200000bc

08008878 <_malloc_r>:
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	1ccd      	adds	r5, r1, #3
 800887c:	f025 0503 	bic.w	r5, r5, #3
 8008880:	3508      	adds	r5, #8
 8008882:	2d0c      	cmp	r5, #12
 8008884:	bf38      	it	cc
 8008886:	250c      	movcc	r5, #12
 8008888:	2d00      	cmp	r5, #0
 800888a:	4606      	mov	r6, r0
 800888c:	db01      	blt.n	8008892 <_malloc_r+0x1a>
 800888e:	42a9      	cmp	r1, r5
 8008890:	d903      	bls.n	800889a <_malloc_r+0x22>
 8008892:	230c      	movs	r3, #12
 8008894:	6033      	str	r3, [r6, #0]
 8008896:	2000      	movs	r0, #0
 8008898:	bd70      	pop	{r4, r5, r6, pc}
 800889a:	f000 f857 	bl	800894c <__malloc_lock>
 800889e:	4a21      	ldr	r2, [pc, #132]	; (8008924 <_malloc_r+0xac>)
 80088a0:	6814      	ldr	r4, [r2, #0]
 80088a2:	4621      	mov	r1, r4
 80088a4:	b991      	cbnz	r1, 80088cc <_malloc_r+0x54>
 80088a6:	4c20      	ldr	r4, [pc, #128]	; (8008928 <_malloc_r+0xb0>)
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	b91b      	cbnz	r3, 80088b4 <_malloc_r+0x3c>
 80088ac:	4630      	mov	r0, r6
 80088ae:	f000 f83d 	bl	800892c <_sbrk_r>
 80088b2:	6020      	str	r0, [r4, #0]
 80088b4:	4629      	mov	r1, r5
 80088b6:	4630      	mov	r0, r6
 80088b8:	f000 f838 	bl	800892c <_sbrk_r>
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	d124      	bne.n	800890a <_malloc_r+0x92>
 80088c0:	230c      	movs	r3, #12
 80088c2:	6033      	str	r3, [r6, #0]
 80088c4:	4630      	mov	r0, r6
 80088c6:	f000 f842 	bl	800894e <__malloc_unlock>
 80088ca:	e7e4      	b.n	8008896 <_malloc_r+0x1e>
 80088cc:	680b      	ldr	r3, [r1, #0]
 80088ce:	1b5b      	subs	r3, r3, r5
 80088d0:	d418      	bmi.n	8008904 <_malloc_r+0x8c>
 80088d2:	2b0b      	cmp	r3, #11
 80088d4:	d90f      	bls.n	80088f6 <_malloc_r+0x7e>
 80088d6:	600b      	str	r3, [r1, #0]
 80088d8:	50cd      	str	r5, [r1, r3]
 80088da:	18cc      	adds	r4, r1, r3
 80088dc:	4630      	mov	r0, r6
 80088de:	f000 f836 	bl	800894e <__malloc_unlock>
 80088e2:	f104 000b 	add.w	r0, r4, #11
 80088e6:	1d23      	adds	r3, r4, #4
 80088e8:	f020 0007 	bic.w	r0, r0, #7
 80088ec:	1ac3      	subs	r3, r0, r3
 80088ee:	d0d3      	beq.n	8008898 <_malloc_r+0x20>
 80088f0:	425a      	negs	r2, r3
 80088f2:	50e2      	str	r2, [r4, r3]
 80088f4:	e7d0      	b.n	8008898 <_malloc_r+0x20>
 80088f6:	428c      	cmp	r4, r1
 80088f8:	684b      	ldr	r3, [r1, #4]
 80088fa:	bf16      	itet	ne
 80088fc:	6063      	strne	r3, [r4, #4]
 80088fe:	6013      	streq	r3, [r2, #0]
 8008900:	460c      	movne	r4, r1
 8008902:	e7eb      	b.n	80088dc <_malloc_r+0x64>
 8008904:	460c      	mov	r4, r1
 8008906:	6849      	ldr	r1, [r1, #4]
 8008908:	e7cc      	b.n	80088a4 <_malloc_r+0x2c>
 800890a:	1cc4      	adds	r4, r0, #3
 800890c:	f024 0403 	bic.w	r4, r4, #3
 8008910:	42a0      	cmp	r0, r4
 8008912:	d005      	beq.n	8008920 <_malloc_r+0xa8>
 8008914:	1a21      	subs	r1, r4, r0
 8008916:	4630      	mov	r0, r6
 8008918:	f000 f808 	bl	800892c <_sbrk_r>
 800891c:	3001      	adds	r0, #1
 800891e:	d0cf      	beq.n	80088c0 <_malloc_r+0x48>
 8008920:	6025      	str	r5, [r4, #0]
 8008922:	e7db      	b.n	80088dc <_malloc_r+0x64>
 8008924:	200000bc 	.word	0x200000bc
 8008928:	200000c0 	.word	0x200000c0

0800892c <_sbrk_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4c06      	ldr	r4, [pc, #24]	; (8008948 <_sbrk_r+0x1c>)
 8008930:	2300      	movs	r3, #0
 8008932:	4605      	mov	r5, r0
 8008934:	4608      	mov	r0, r1
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	f7f8 fbbe 	bl	80010b8 <_sbrk>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_sbrk_r+0x1a>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	b103      	cbz	r3, 8008946 <_sbrk_r+0x1a>
 8008944:	602b      	str	r3, [r5, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	20000920 	.word	0x20000920

0800894c <__malloc_lock>:
 800894c:	4770      	bx	lr

0800894e <__malloc_unlock>:
 800894e:	4770      	bx	lr

08008950 <_init>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr

0800895c <_fini>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	bf00      	nop
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr
