
dalekomir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a15c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800a2fc  0800a2fc  0001a2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a65c  0800a65c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800a65c  0800a65c  0001a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a664  0800a664  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a664  0800a664  0001a664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a668  0800a668  0001a668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800a66c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae8  20000204  0800a870  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cec  0800a870  00021cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef21  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004299  00000000  00000000  0003f155  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a8  00000000  00000000  000433f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  00044b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b717  00000000  00000000  00046160  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019ab2  00000000  00000000  00061877  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000951fd  00000000  00000000  0007b329  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000655c  00000000  00000000  001105a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2e4 	.word	0x0800a2e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800a2e4 	.word	0x0800a2e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	4b6e      	ldr	r3, [pc, #440]	; (8000764 <MX_GPIO_Init+0x1d4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a6d      	ldr	r2, [pc, #436]	; (8000764 <MX_GPIO_Init+0x1d4>)
 80005b0:	f043 0310 	orr.w	r3, r3, #16
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b6b      	ldr	r3, [pc, #428]	; (8000764 <MX_GPIO_Init+0x1d4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0310 	and.w	r3, r3, #16
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	4b67      	ldr	r3, [pc, #412]	; (8000764 <MX_GPIO_Init+0x1d4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a66      	ldr	r2, [pc, #408]	; (8000764 <MX_GPIO_Init+0x1d4>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b64      	ldr	r3, [pc, #400]	; (8000764 <MX_GPIO_Init+0x1d4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b60      	ldr	r3, [pc, #384]	; (8000764 <MX_GPIO_Init+0x1d4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a5f      	ldr	r2, [pc, #380]	; (8000764 <MX_GPIO_Init+0x1d4>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b5d      	ldr	r3, [pc, #372]	; (8000764 <MX_GPIO_Init+0x1d4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b59      	ldr	r3, [pc, #356]	; (8000764 <MX_GPIO_Init+0x1d4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a58      	ldr	r2, [pc, #352]	; (8000764 <MX_GPIO_Init+0x1d4>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b56      	ldr	r3, [pc, #344]	; (8000764 <MX_GPIO_Init+0x1d4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b52      	ldr	r3, [pc, #328]	; (8000764 <MX_GPIO_Init+0x1d4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a51      	ldr	r2, [pc, #324]	; (8000764 <MX_GPIO_Init+0x1d4>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b4f      	ldr	r3, [pc, #316]	; (8000764 <MX_GPIO_Init+0x1d4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b4b      	ldr	r3, [pc, #300]	; (8000764 <MX_GPIO_Init+0x1d4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a4a      	ldr	r2, [pc, #296]	; (8000764 <MX_GPIO_Init+0x1d4>)
 800063c:	f043 0308 	orr.w	r3, r3, #8
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b48      	ldr	r3, [pc, #288]	; (8000764 <MX_GPIO_Init+0x1d4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0308 	and.w	r3, r3, #8
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2108      	movs	r1, #8
 8000652:	4845      	ldr	r0, [pc, #276]	; (8000768 <MX_GPIO_Init+0x1d8>)
 8000654:	f001 fbea 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2101      	movs	r1, #1
 800065c:	4843      	ldr	r0, [pc, #268]	; (800076c <MX_GPIO_Init+0x1dc>)
 800065e:	f001 fbe5 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2102      	movs	r1, #2
 8000666:	4842      	ldr	r0, [pc, #264]	; (8000770 <MX_GPIO_Init+0x1e0>)
 8000668:	f001 fbe0 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800066c:	2200      	movs	r2, #0
 800066e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000672:	4840      	ldr	r0, [pc, #256]	; (8000774 <MX_GPIO_Init+0x1e4>)
 8000674:	f001 fbda 	bl	8001e2c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000678:	2304      	movs	r3, #4
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4837      	ldr	r0, [pc, #220]	; (8000768 <MX_GPIO_Init+0x1d8>)
 800068c:	f001 f900 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000690:	2308      	movs	r3, #8
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	4830      	ldr	r0, [pc, #192]	; (8000768 <MX_GPIO_Init+0x1d8>)
 80006a8:	f001 f8f2 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80006ac:	2332      	movs	r3, #50	; 0x32
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b0:	4b31      	ldr	r3, [pc, #196]	; (8000778 <MX_GPIO_Init+0x1e8>)
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	482a      	ldr	r0, [pc, #168]	; (8000768 <MX_GPIO_Init+0x1d8>)
 80006c0:	f001 f8e6 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	4824      	ldr	r0, [pc, #144]	; (800076c <MX_GPIO_Init+0x1dc>)
 80006dc:	f001 f8d8 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOI_Pin;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_GPIO_Init+0x1ec>)
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHOI_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	481f      	ldr	r0, [pc, #124]	; (8000770 <MX_GPIO_Init+0x1e0>)
 80006f4:	f001 f8cc 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4818      	ldr	r0, [pc, #96]	; (8000770 <MX_GPIO_Init+0x1e0>)
 8000710:	f001 f8be 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000714:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000718:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	4811      	ldr	r0, [pc, #68]	; (8000774 <MX_GPIO_Init+0x1e4>)
 800072e:	f001 f8af 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000732:	2320      	movs	r3, #32
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <MX_GPIO_Init+0x1e4>)
 8000746:	f001 f8a3 	bl	8001890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2006      	movs	r0, #6
 8000750:	f001 f84e 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000754:	2006      	movs	r0, #6
 8000756:	f001 f877 	bl	8001848 <HAL_NVIC_EnableIRQ>

}
 800075a:	bf00      	nop
 800075c:	3730      	adds	r7, #48	; 0x30
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40021000 	.word	0x40021000
 800076c:	40020800 	.word	0x40020800
 8000770:	40020400 	.word	0x40020400
 8000774:	40020c00 	.word	0x40020c00
 8000778:	10120000 	.word	0x10120000
 800077c:	10310000 	.word	0x10310000

08000780 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_I2C1_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_I2C1_Init+0x50>)
 800078c:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_I2C1_Init+0x58>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_I2C1_Init+0x50>)
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007be:	f001 fb7f 	bl	8001ec0 <HAL_I2C_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 fbce 	bl	8000f68 <Error_Handler>
  }

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000023c 	.word	0x2000023c
 80007d4:	40005400 	.word	0x40005400
 80007d8:	000186a0 	.word	0x000186a0

080007dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_I2C_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12c      	bne.n	8000858 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800081a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000820:	2312      	movs	r3, #18
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082c:	2304      	movs	r3, #4
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <HAL_I2C_MspInit+0x8c>)
 8000838:	f001 f82a 	bl	8001890 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_I2C_MspInit+0x88>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_I2S2_Init+0x50>)
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <MX_I2S2_Init+0x54>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2S2_Init+0x50>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_I2S2_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_I2S2_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_I2S2_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_I2S2_Init+0x50>)
 8000892:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <MX_I2S2_Init+0x58>)
 8000894:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_I2S2_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_I2S2_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_I2S2_Init+0x50>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_I2S2_Init+0x50>)
 80008aa:	f001 fcc9 	bl	8002240 <HAL_I2S_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f000 fb58 	bl	8000f68 <Error_Handler>
  }

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000290 	.word	0x20000290
 80008c0:	40003800 	.word	0x40003800
 80008c4:	00017700 	.word	0x00017700

080008c8 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_I2S3_Init+0x54>)
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <MX_I2S3_Init+0x58>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2S3_Init+0x54>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_I2S3_Init+0x54>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_I2S3_Init+0x54>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_I2S3_Init+0x54>)
 80008e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_I2S3_Init+0x54>)
 80008f0:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <MX_I2S3_Init+0x5c>)
 80008f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_I2S3_Init+0x54>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_I2S3_Init+0x54>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_I2S3_Init+0x54>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_I2S3_Init+0x54>)
 8000908:	f001 fc9a 	bl	8002240 <HAL_I2S_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000912:	f000 fb29 	bl	8000f68 <Error_Handler>
  }

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200002d8 	.word	0x200002d8
 8000920:	40003c00 	.word	0x40003c00
 8000924:	00017700 	.word	0x00017700

08000928 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a59      	ldr	r2, [pc, #356]	; (8000aac <HAL_I2S_MspInit+0x184>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d15b      	bne.n	8000a02 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
 800094e:	4b58      	ldr	r3, [pc, #352]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a57      	ldr	r2, [pc, #348]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b55      	ldr	r3, [pc, #340]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	623b      	str	r3, [r7, #32]
 8000964:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
 800096a:	4b51      	ldr	r3, [pc, #324]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a50      	ldr	r2, [pc, #320]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b4e      	ldr	r3, [pc, #312]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	61fb      	str	r3, [r7, #28]
 8000980:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
 8000986:	4b4a      	ldr	r3, [pc, #296]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a49      	ldr	r2, [pc, #292]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b47      	ldr	r3, [pc, #284]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800099e:	2304      	movs	r3, #4
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80009ae:	2306      	movs	r3, #6
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	483e      	ldr	r0, [pc, #248]	; (8000ab4 <HAL_I2S_MspInit+0x18c>)
 80009ba:	f000 ff69 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009be:	2308      	movs	r3, #8
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ce:	2305      	movs	r3, #5
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4836      	ldr	r0, [pc, #216]	; (8000ab4 <HAL_I2S_MspInit+0x18c>)
 80009da:	f000 ff59 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f0:	2305      	movs	r3, #5
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	482f      	ldr	r0, [pc, #188]	; (8000ab8 <HAL_I2S_MspInit+0x190>)
 80009fc:	f000 ff48 	bl	8001890 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a00:	e04f      	b.n	8000aa2 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <HAL_I2S_MspInit+0x194>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d14a      	bne.n	8000aa2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_I2S_MspInit+0x188>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a60:	2310      	movs	r3, #16
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a70:	2306      	movs	r3, #6
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <HAL_I2S_MspInit+0x198>)
 8000a7c:	f000 ff08 	bl	8001890 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a80:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a92:	2306      	movs	r3, #6
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_I2S_MspInit+0x18c>)
 8000a9e:	f000 fef7 	bl	8001890 <HAL_GPIO_Init>
}
 8000aa2:	bf00      	nop
 8000aa4:	3738      	adds	r7, #56	; 0x38
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40003800 	.word	0x40003800
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	40020400 	.word	0x40020400
 8000abc:	40003c00 	.word	0x40003c00
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <TIM10_reinit>:
} state_t;

volatile state_t state = INITIAL_S;

void TIM10_reinit()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim10);
 8000ac8:	4815      	ldr	r0, [pc, #84]	; (8000b20 <TIM10_reinit+0x5c>)
 8000aca:	f004 fc8d 	bl	80053e8 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_PRESCALER( &htim10, (96-1) );
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <TIM10_reinit+0x5c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	225f      	movs	r2, #95	; 0x5f
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_COUNTER( &htim10, 0 );
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <TIM10_reinit+0x5c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
	tim10_overflows = 0;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <TIM10_reinit+0x60>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8000ae4:	480e      	ldr	r0, [pc, #56]	; (8000b20 <TIM10_reinit+0x5c>)
 8000ae6:	f004 fce5 	bl	80054b4 <HAL_TIM_Base_Start_IT>

	if (state == INITIAL_S){
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <TIM10_reinit+0x64>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d114      	bne.n	8000b1e <TIM10_reinit+0x5a>
	// STARTING TO SEND THE SIGNAL
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2102      	movs	r1, #2
 8000af8:	480c      	ldr	r0, [pc, #48]	; (8000b2c <TIM10_reinit+0x68>)
 8000afa:	f001 f997 	bl	8001e2c <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin) != GPIO_PIN_SET){
 8000afe:	2102      	movs	r1, #2
 8000b00:	480a      	ldr	r0, [pc, #40]	; (8000b2c <TIM10_reinit+0x68>)
 8000b02:	f001 f96d 	bl	8001de0 <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d003      	beq.n	8000b14 <TIM10_reinit+0x50>
	 state = TRIG_NOT_WENT_HIGH_S;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <TIM10_reinit+0x64>)
 8000b0e:	2204      	movs	r2, #4
 8000b10:	701a      	strb	r2, [r3, #0]
	 return;
 8000b12:	e004      	b.n	8000b1e <TIM10_reinit+0x5a>
	}

	state = TRIGGERING_S;
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <TIM10_reinit+0x64>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
	TIM9_reinit(); // starting to count another timer(when to stop trig)
 8000b1a:	f000 f809 	bl	8000b30 <TIM9_reinit>
	}
}
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000038c 	.word	0x2000038c
 8000b24:	20000220 	.word	0x20000220
 8000b28:	20000228 	.word	0x20000228
 8000b2c:	40020400 	.word	0x40020400

08000b30 <TIM9_reinit>:

void TIM9_reinit()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim9);
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <TIM9_reinit+0x2c>)
 8000b36:	f004 fc57 	bl	80053e8 <HAL_TIM_Base_Stop>


	__HAL_TIM_SET_PRESCALER( &htim9, (96-1) );
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <TIM9_reinit+0x2c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	225f      	movs	r2, #95	; 0x5f
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_COUNTER( &htim9, 0 );
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <TIM9_reinit+0x2c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
	tim9_overflows = 0;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <TIM9_reinit+0x30>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim9);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <TIM9_reinit+0x2c>)
 8000b52:	f004 fcaf 	bl	80054b4 <HAL_TIM_Base_Start_IT>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200003cc 	.word	0x200003cc
 8000b60:	20000224 	.word	0x20000224

08000b64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if( htim->Instance == TIM10 )
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a30      	ldr	r2, [pc, #192]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d104      	bne.n	8000b80 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
   ++tim10_overflows;
 8000b76:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a2e      	ldr	r2, [pc, #184]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b7e:	6013      	str	r3, [r2, #0]
  }
  if( htim->Instance == TIM9 )
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d151      	bne.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0xca>
  {
   ++tim9_overflows;
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b92:	6013      	str	r3, [r2, #0]

   if (state == TRIGGERING_S){
 8000b94:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d11b      	bne.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x72>

		 HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4829      	ldr	r0, [pc, #164]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000ba4:	f001 f942 	bl	8001e2c <HAL_GPIO_WritePin>

		 if (HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin) != GPIO_PIN_RESET){
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4827      	ldr	r0, [pc, #156]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000bac:	f001 f918 	bl	8001de0 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0x5a>
			 state = TRIG_NOT_WENT_LOW_S;
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000bb8:	2205      	movs	r2, #5
 8000bba:	701a      	strb	r2, [r3, #0]
			 return;
 8000bbc:	e037      	b.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0xca>
		 }
		 started_waiting_for_echo = tim9_overflows * 16 + __HAL_TIM_GET_COUNTER(&htim9);
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	011a      	lsls	r2, r3, #4
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a20      	ldr	r2, [pc, #128]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000bce:	6013      	str	r3, [r2, #0]
		 state = WAITING_FOR_ECHO_START_S;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	701a      	strb	r2, [r3, #0]
   }
   // if we didn't receive answer from rangefinder in 200ms:
   if (state == WAITING_FOR_ECHO_START_S){
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d110      	bne.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x9e>
	   if (tim9_overflows * 16 + __HAL_TIM_GET_COUNTER(&htim9) - started_waiting_for_echo > 200000){
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	011a      	lsls	r2, r3, #4
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bec:	441a      	add	r2, r3
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d903      	bls.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x9e>
		   state = ECHO_TIMEOUT_S;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000bfc:	2206      	movs	r2, #6
 8000bfe:	701a      	strb	r2, [r3, #0]
		   return;
 8000c00:	e015      	b.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0xca>
	   }
   }

   // if we started to receive answer, but echo didn't go low after 200ms:
   if (state == WAITING_FOR_ECHO_STOP_S){
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d110      	bne.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0xca>
	   if (tim9_overflows * 16 + __HAL_TIM_GET_COUNTER(&htim9) - started_waiting_for_echo_low > 200000){
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	011a      	lsls	r2, r3, #4
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c18:	441a      	add	r2, r3
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d903      	bls.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0xca>
		   state = ECHO_NOT_WENT_LOW_S;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	701a      	strb	r2, [r3, #0]
		   return;
 8000c2c:	bf00      	nop
	   }
   }
  }
}
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40014400 	.word	0x40014400
 8000c38:	20000220 	.word	0x20000220
 8000c3c:	40014000 	.word	0x40014000
 8000c40:	20000224 	.word	0x20000224
 8000c44:	20000228 	.word	0x20000228
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	200003cc 	.word	0x200003cc
 8000c50:	20000328 	.word	0x20000328
 8000c54:	00030d40 	.word	0x00030d40
 8000c58:	20000324 	.word	0x20000324

08000c5c <HAL_GPIO_EXTI_Callback>:
volatile uint32_t echo_start;
volatile uint32_t echo_finish;
volatile uint32_t measured_time;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
 if (GPIO_Pin == ECHOI_Pin )
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d12d      	bne.n	8000cc8 <HAL_GPIO_EXTI_Callback+0x6c>
 {
  switch (state) {
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d002      	beq.n	8000c7c <HAL_GPIO_EXTI_Callback+0x20>
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d012      	beq.n	8000ca0 <HAL_GPIO_EXTI_Callback+0x44>
 8000c7a:	e021      	b.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x64>
  case WAITING_FOR_ECHO_START_S: {
   echo_start =  get_us();
 8000c7c:	f000 f838 	bl	8000cf0 <get_us>
 8000c80:	4602      	mov	r2, r0
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c84:	601a      	str	r2, [r3, #0]
   started_waiting_for_echo_low = tim9_overflows * 16 + __HAL_TIM_GET_COUNTER(&htim9);
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x80>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	011a      	lsls	r2, r3, #4
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c92:	4413      	add	r3, r2
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c96:	6013      	str	r3, [r2, #0]
   state = WAITING_FOR_ECHO_STOP_S;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	701a      	strb	r2, [r3, #0]
   break;
 8000c9e:	e014      	b.n	8000cca <HAL_GPIO_EXTI_Callback+0x6e>
  }

  case WAITING_FOR_ECHO_STOP_S: {
   echo_finish = get_us();
 8000ca0:	f000 f826 	bl	8000cf0 <get_us>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ca8:	601a      	str	r2, [r3, #0]
   measured_time = echo_finish - echo_start;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_GPIO_EXTI_Callback+0x90>)
 8000cb6:	6013      	str	r3, [r2, #0]
   state = READING_DATA_S;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000cba:	2208      	movs	r2, #8
 8000cbc:	701a      	strb	r2, [r3, #0]
   break;
 8000cbe:	e004      	b.n	8000cca <HAL_GPIO_EXTI_Callback+0x6e>
  }

  default:
   state = ERROR_S;
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000cc2:	2209      	movs	r2, #9
 8000cc4:	701a      	strb	r2, [r3, #0]
  }
 }
}
 8000cc6:	e000      	b.n	8000cca <HAL_GPIO_EXTI_Callback+0x6e>
 }
 8000cc8:	bf00      	nop
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000228 	.word	0x20000228
 8000cd8:	20000330 	.word	0x20000330
 8000cdc:	20000224 	.word	0x20000224
 8000ce0:	200003cc 	.word	0x200003cc
 8000ce4:	20000324 	.word	0x20000324
 8000ce8:	2000032c 	.word	0x2000032c
 8000cec:	20000320 	.word	0x20000320

08000cf0 <get_us>:

uint32_t get_us()
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
   __HAL_TIM_DISABLE_IT(&htim10, TIM_IT_UPDATE); //! Дуже важливо!
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <get_us+0x4c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <get_us+0x4c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f022 0201 	bic.w	r2, r2, #1
 8000d04:	60da      	str	r2, [r3, #12]
   // __disable_irq();
   uint32_t res = tim10_overflows * 10000 + __HAL_TIM_GET_COUNTER(&htim10);
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <get_us+0x50>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d0e:	fb02 f203 	mul.w	r2, r2, r3
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <get_us+0x4c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d18:	4413      	add	r3, r2
 8000d1a:	607b      	str	r3, [r7, #4]
   // __enable_irq();
   __HAL_TIM_ENABLE_IT(&htim10, TIM_IT_UPDATE);
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <get_us+0x4c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68da      	ldr	r2, [r3, #12]
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <get_us+0x4c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0201 	orr.w	r2, r2, #1
 8000d2a:	60da      	str	r2, [r3, #12]
   return res;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000038c 	.word	0x2000038c
 8000d40:	20000220 	.word	0x20000220

08000d44 <print_str_reinit>:

void print_str_reinit(char str[]){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(str, strlen(str));
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff fa47 	bl	80001e0 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4619      	mov	r1, r3
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f008 fa22 	bl	80091a0 <CDC_Transmit_FS>
	// this is not a busy loop, it's just delay between we start again
	// for convenience!!!
    HAL_Delay(200);
 8000d5c:	20c8      	movs	r0, #200	; 0xc8
 8000d5e:	f000 fc35 	bl	80015cc <HAL_Delay>
    state = INITIAL_S;
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <print_str_reinit+0x30>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]

    TIM10_reinit();
 8000d68:	f7ff feac 	bl	8000ac4 <TIM10_reinit>

}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000228 	.word	0x20000228

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f000 fbb3 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f86d 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f7ff fc03 	bl	8000590 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d8a:	f7ff fcf9 	bl	8000780 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000d8e:	f7ff fd6d 	bl	800086c <MX_I2S2_Init>
  MX_I2S3_Init();
 8000d92:	f7ff fd99 	bl	80008c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d96:	f000 f8f7 	bl	8000f88 <MX_SPI1_Init>
  MX_TIM10_Init();
 8000d9a:	f000 fa7b 	bl	8001294 <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 8000d9e:	f008 f941 	bl	8009024 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 8000da2:	f000 fa33 	bl	800120c <MX_TIM9_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  TIM10_reinit();
 8000da6:	f7ff fe8d 	bl	8000ac4 <TIM10_reinit>

  while (1)
  {
	  switch (state){
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <main+0xc0>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	3b04      	subs	r3, #4
 8000db2:	2b05      	cmp	r3, #5
 8000db4:	d8f9      	bhi.n	8000daa <main+0x32>
 8000db6:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <main+0x44>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000dd5 	.word	0x08000dd5
 8000dc0:	08000ddd 	.word	0x08000ddd
 8000dc4:	08000de5 	.word	0x08000de5
 8000dc8:	08000ded 	.word	0x08000ded
 8000dcc:	08000dfd 	.word	0x08000dfd
 8000dd0:	08000df5 	.word	0x08000df5
	  case TRIG_NOT_WENT_HIGH_S: {
		  print_str_reinit("TRIG DID NOT WENT HIGH \n");
 8000dd4:	4819      	ldr	r0, [pc, #100]	; (8000e3c <main+0xc4>)
 8000dd6:	f7ff ffb5 	bl	8000d44 <print_str_reinit>
		  continue;
 8000dda:	e02c      	b.n	8000e36 <main+0xbe>
	  }
	  case TRIG_NOT_WENT_LOW_S: {
		  print_str_reinit("TRIG DID NOT WENT LOW \n");
 8000ddc:	4818      	ldr	r0, [pc, #96]	; (8000e40 <main+0xc8>)
 8000dde:	f7ff ffb1 	bl	8000d44 <print_str_reinit>
		  continue;
 8000de2:	e028      	b.n	8000e36 <main+0xbe>
	  }
	  case ECHO_TIMEOUT_S: {
		  print_str_reinit("Didn't receive echo from rangefinder. Too far.\n");
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <main+0xcc>)
 8000de6:	f7ff ffad 	bl	8000d44 <print_str_reinit>
		  continue;
 8000dea:	e024      	b.n	8000e36 <main+0xbe>
	  }
	  case  ECHO_NOT_WENT_LOW_S: {
		  print_str_reinit("Echo didn't went low for a long time. \n");
 8000dec:	4816      	ldr	r0, [pc, #88]	; (8000e48 <main+0xd0>)
 8000dee:	f7ff ffa9 	bl	8000d44 <print_str_reinit>
		  continue;
 8000df2:	e020      	b.n	8000e36 <main+0xbe>
	  }
	  case ERROR_S: {
		  print_str_reinit("Unexpected error happened, try again \n");
 8000df4:	4815      	ldr	r0, [pc, #84]	; (8000e4c <main+0xd4>)
 8000df6:	f7ff ffa5 	bl	8000d44 <print_str_reinit>
		  continue;
 8000dfa:	e01c      	b.n	8000e36 <main+0xbe>
	  }
	  case READING_DATA_S: {

		  uint32_t distance = measured_time/58;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <main+0xd8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <main+0xdc>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	607b      	str	r3, [r7, #4]
		  if (distance > 700){
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000e10:	d903      	bls.n	8000e1a <main+0xa2>
			  print_str_reinit("Didn't receive echo from rangefinder. Too far.\n");//
 8000e12:	480c      	ldr	r0, [pc, #48]	; (8000e44 <main+0xcc>)
 8000e14:	f7ff ff96 	bl	8000d44 <print_str_reinit>
		  }
		  else{ // when everything else is ok:
			  snprintf(str, 100, "Time: %lu us, distance: %lu cm   \n", measured_time, distance);
			  print_str_reinit(str);
		  }
		  continue;
 8000e18:	e00c      	b.n	8000e34 <main+0xbc>
			  snprintf(str, 100, "Time: %lu us, distance: %lu cm   \n", measured_time, distance);
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <main+0xd8>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	4613      	mov	r3, r2
 8000e24:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <main+0xe0>)
 8000e26:	2164      	movs	r1, #100	; 0x64
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <main+0xe4>)
 8000e2a:	f008 fef9 	bl	8009c20 <sniprintf>
			  print_str_reinit(str);
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <main+0xe4>)
 8000e30:	f7ff ff88 	bl	8000d44 <print_str_reinit>
		  continue;
 8000e34:	bf00      	nop
	  switch (state){
 8000e36:	e7b8      	b.n	8000daa <main+0x32>
 8000e38:	20000228 	.word	0x20000228
 8000e3c:	0800a2fc 	.word	0x0800a2fc
 8000e40:	0800a318 	.word	0x0800a318
 8000e44:	0800a330 	.word	0x0800a330
 8000e48:	0800a360 	.word	0x0800a360
 8000e4c:	0800a388 	.word	0x0800a388
 8000e50:	20000320 	.word	0x20000320
 8000e54:	8d3dcb09 	.word	0x8d3dcb09
 8000e58:	0800a3b0 	.word	0x0800a3b0
 8000e5c:	20000000 	.word	0x20000000

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b09a      	sub	sp, #104	; 0x68
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e6a:	2230      	movs	r2, #48	; 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f008 fe16 	bl	8009aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <SystemClock_Config+0x100>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <SystemClock_Config+0x100>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <SystemClock_Config+0x100>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <SystemClock_Config+0x104>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a2a      	ldr	r2, [pc, #168]	; (8000f64 <SystemClock_Config+0x104>)
 8000ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <SystemClock_Config+0x104>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000edc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ee6:	23c0      	movs	r3, #192	; 0xc0
 8000ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000eea:	2304      	movs	r3, #4
 8000eec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 f88e 	bl	8004018 <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f02:	f000 f831 	bl	8000f68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	2103      	movs	r1, #3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fb98 	bl	8004658 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f2e:	f000 f81b 	bl	8000f68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f32:	2301      	movs	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000f36:	23c8      	movs	r3, #200	; 0xc8
 8000f38:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fe0c 	bl	8004b64 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000f52:	f000 f809 	bl	8000f68 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3768      	adds	r7, #104	; 0x68
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40007000 	.word	0x40007000

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <Error_Handler+0x6>

08000f70 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_SPI1_Init+0x64>)
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <MX_SPI1_Init+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_SPI1_Init+0x64>)
 8000f94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_SPI1_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fd4:	220a      	movs	r2, #10
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_SPI1_Init+0x64>)
 8000fda:	f004 f835 	bl	8005048 <HAL_SPI_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fe4:	f7ff ffc0 	bl	8000f68 <Error_Handler>
  }

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000334 	.word	0x20000334
 8000ff0:	40013000 	.word	0x40013000

08000ff4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <HAL_SPI_MspInit+0x84>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12b      	bne.n	800106e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_SPI_MspInit+0x88>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_SPI_MspInit+0x88>)
 8001020:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_SPI_MspInit+0x88>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_SPI_MspInit+0x88>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_SPI_MspInit+0x88>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_SPI_MspInit+0x88>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800104e:	23e0      	movs	r3, #224	; 0xe0
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800105e:	2305      	movs	r3, #5
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <HAL_SPI_MspInit+0x8c>)
 800106a:	f000 fc11 	bl	8001890 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	; 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40013000 	.word	0x40013000
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <HAL_MspInit+0x4c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_MspInit+0x4c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010c2:	2007      	movs	r0, #7
 80010c4:	f000 fb74 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 fa34 	bl	800158c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800112c:	2001      	movs	r0, #1
 800112e:	f000 feaf 	bl	8001e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800113e:	f004 fabb 	bl	80056b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200003cc 	.word	0x200003cc

0800114c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001152:	f004 fab1 	bl	80056b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000038c 	.word	0x2000038c

08001160 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <OTG_FS_IRQHandler+0x10>)
 8001166:	f001 ff24 	bl	8002fb2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200018e0 	.word	0x200018e0

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f008 fc42 	bl	8009a2c <__errno>
 80011a8:	4602      	mov	r2, r0
 80011aa:	230c      	movs	r3, #12
 80011ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20020000 	.word	0x20020000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	2000022c 	.word	0x2000022c
 80011dc:	20001cf0 	.word	0x20001cf0

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <SystemInit+0x28>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a07      	ldr	r2, [pc, #28]	; (8001208 <SystemInit+0x28>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SystemInit+0x28>)
 80011f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011fa:	609a      	str	r2, [r3, #8]
#endif
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <MX_TIM9_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_TIM9_Init+0x80>)
 8001226:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <MX_TIM9_Init+0x84>)
 8001228:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 95;
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_TIM9_Init+0x80>)
 800122c:	225f      	movs	r2, #95	; 0x5f
 800122e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_TIM9_Init+0x80>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 16;
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_TIM9_Init+0x80>)
 8001238:	2210      	movs	r2, #16
 800123a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_TIM9_Init+0x80>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_TIM9_Init+0x80>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001248:	4810      	ldr	r0, [pc, #64]	; (800128c <MX_TIM9_Init+0x80>)
 800124a:	f004 f993 	bl	8005574 <HAL_TIM_PWM_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM9_Init+0x4c>
  {
    Error_Handler();
 8001254:	f7ff fe88 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001258:	2360      	movs	r3, #96	; 0x60
 800125a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	4807      	ldr	r0, [pc, #28]	; (800128c <MX_TIM9_Init+0x80>)
 8001270:	f004 fb2a 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM9_Init+0x72>
  {
    Error_Handler();
 800127a:	f7ff fe75 	bl	8000f68 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800127e:	4803      	ldr	r0, [pc, #12]	; (800128c <MX_TIM9_Init+0x80>)
 8001280:	f000 f8a6 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200003cc 	.word	0x200003cc
 8001290:	40014000 	.word	0x40014000

08001294 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_TIM10_Init+0x94>)
 80012ae:	4a1f      	ldr	r2, [pc, #124]	; (800132c <MX_TIM10_Init+0x98>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 95;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_TIM10_Init+0x94>)
 80012b4:	225f      	movs	r2, #95	; 0x5f
 80012b6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_TIM10_Init+0x94>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_TIM10_Init+0x94>)
 80012c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80012c4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_TIM10_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_TIM10_Init+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012d2:	4815      	ldr	r0, [pc, #84]	; (8001328 <MX_TIM10_Init+0x94>)
 80012d4:	f003 ffe6 	bl	80052a4 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80012de:	f7ff fe43 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80012e2:	4811      	ldr	r0, [pc, #68]	; (8001328 <MX_TIM10_Init+0x94>)
 80012e4:	f004 f946 	bl	8005574 <HAL_TIM_PWM_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80012ee:	f7ff fe3b 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f2:	2360      	movs	r3, #96	; 0x60
 80012f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <MX_TIM10_Init+0x94>)
 800130a:	f004 fadd 	bl	80058c8 <HAL_TIM_PWM_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001314:	f7ff fe28 	bl	8000f68 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <MX_TIM10_Init+0x94>)
 800131a:	f000 f859 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000038c 	.word	0x2000038c
 800132c:	40014400 	.word	0x40014400

08001330 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_TIM_PWM_MspInit+0x48>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d115      	bne.n	800136e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_TIM_PWM_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a0c      	ldr	r2, [pc, #48]	; (800137c <HAL_TIM_PWM_MspInit+0x4c>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_TIM_PWM_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2018      	movs	r0, #24
 8001364:	f000 fa44 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001368:	2018      	movs	r0, #24
 800136a:	f000 fa6d 	bl	8001848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40014000 	.word	0x40014000
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d115      	bne.n	80013be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_TIM_Base_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_TIM_Base_MspInit+0x4c>)
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_TIM_Base_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2019      	movs	r0, #25
 80013b4:	f000 fa1c 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013b8:	2019      	movs	r0, #25
 80013ba:	f000 fa45 	bl	8001848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40014400 	.word	0x40014400
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a24      	ldr	r2, [pc, #144]	; (8001480 <HAL_TIM_MspPostInit+0xb0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d11e      	bne.n	8001430 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_TIM_MspPostInit+0xb4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a22      	ldr	r2, [pc, #136]	; (8001484 <HAL_TIM_MspPostInit+0xb4>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_TIM_MspPostInit+0xb4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800140e:	2304      	movs	r3, #4
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800141e:	2303      	movs	r3, #3
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4817      	ldr	r0, [pc, #92]	; (8001488 <HAL_TIM_MspPostInit+0xb8>)
 800142a:	f000 fa31 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800142e:	e023      	b.n	8001478 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM10)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a15      	ldr	r2, [pc, #84]	; (800148c <HAL_TIM_MspPostInit+0xbc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d11e      	bne.n	8001478 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_TIM_MspPostInit+0xb4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_TIM_MspPostInit+0xb4>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_TIM_MspPostInit+0xb4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001468:	2303      	movs	r3, #3
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4807      	ldr	r0, [pc, #28]	; (8001490 <HAL_TIM_MspPostInit+0xc0>)
 8001474:	f000 fa0c 	bl	8001890 <HAL_GPIO_Init>
}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40014000 	.word	0x40014000
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000
 800148c:	40014400 	.word	0x40014400
 8001490:	40020400 	.word	0x40020400

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001498:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800149a:	e003      	b.n	80014a4 <LoopCopyDataInit>

0800149c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800149e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014a2:	3104      	adds	r1, #4

080014a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014ac:	d3f6      	bcc.n	800149c <CopyDataInit>
  ldr  r2, =_sbss
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014b0:	e002      	b.n	80014b8 <LoopFillZerobss>

080014b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014b4:	f842 3b04 	str.w	r3, [r2], #4

080014b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014bc:	d3f9      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014be:	f7ff fe8f 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f008 fab9 	bl	8009a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff fc57 	bl	8000d78 <main>
  bx  lr    
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80014d0:	0800a66c 	.word	0x0800a66c
  ldr  r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014d8:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 80014dc:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 80014e0:	20001cec 	.word	0x20001cec

080014e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_Init+0x40>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <HAL_Init+0x40>)
 80014f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_Init+0x40>)
 80014fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	; (8001528 <HAL_Init+0x40>)
 800150a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 f94d 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001516:	2000      	movs	r0, #0
 8001518:	f000 f808 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fdb2 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00

0800152c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x54>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_InitTick+0x58>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f994 	bl	8001878 <HAL_SYSTICK_Config>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e00e      	b.n	8001578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d80a      	bhi.n	8001576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f000 f942 	bl	80017f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800156c:	4a06      	ldr	r2, [pc, #24]	; (8001588 <HAL_InitTick+0x5c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000020 	.word	0x20000020
 8001584:	20000028 	.word	0x20000028
 8001588:	20000024 	.word	0x20000024

0800158c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_IncTick+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_IncTick+0x24>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_IncTick+0x24>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000028 	.word	0x20000028
 80015b0:	2000040c 	.word	0x2000040c

080015b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2000040c 	.word	0x2000040c

080015cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff ffee 	bl	80015b4 <HAL_GetTick>
 80015d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d005      	beq.n	80015f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_Delay+0x40>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015f2:	bf00      	nop
 80015f4:	f7ff ffde 	bl	80015b4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f7      	bhi.n	80015f4 <HAL_Delay+0x28>
  {
  }
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000028 	.word	0x20000028

08001610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800162c:	4013      	ands	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800163c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	; (8001654 <__NVIC_SetPriorityGrouping+0x44>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db0b      	blt.n	800169e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <__NVIC_EnableIRQ+0x38>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	; (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
         );
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ff8e 	bl	80016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b07      	cmp	r3, #7
 80017bc:	d00f      	beq.n	80017de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b06      	cmp	r3, #6
 80017c2:	d00c      	beq.n	80017de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b05      	cmp	r3, #5
 80017c8:	d009      	beq.n	80017de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d006      	beq.n	80017de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d003      	beq.n	80017de <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017d6:	2192      	movs	r1, #146	; 0x92
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80017da:	f7ff fbc9 	bl	8000f70 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ff16 	bl	8001610 <__NVIC_SetPriorityGrouping>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	0800a3d4 	.word	0x0800a3d4

080017f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d903      	bls.n	8001810 <HAL_NVIC_SetPriority+0x20>
 8001808:	21aa      	movs	r1, #170	; 0xaa
 800180a:	480e      	ldr	r0, [pc, #56]	; (8001844 <HAL_NVIC_SetPriority+0x54>)
 800180c:	f7ff fbb0 	bl	8000f70 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b0f      	cmp	r3, #15
 8001814:	d903      	bls.n	800181e <HAL_NVIC_SetPriority+0x2e>
 8001816:	21ab      	movs	r1, #171	; 0xab
 8001818:	480a      	ldr	r0, [pc, #40]	; (8001844 <HAL_NVIC_SetPriority+0x54>)
 800181a:	f7ff fba9 	bl	8000f70 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181e:	f7ff ff1b 	bl	8001658 <__NVIC_GetPriorityGrouping>
 8001822:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	6978      	ldr	r0, [r7, #20]
 800182a:	f7ff ff6b 	bl	8001704 <NVIC_EncodePriority>
 800182e:	4602      	mov	r2, r0
 8001830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff3a 	bl	80016b0 <__NVIC_SetPriority>
}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	0800a3d4 	.word	0x0800a3d4

08001848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da03      	bge.n	8001862 <HAL_NVIC_EnableIRQ+0x1a>
 800185a:	21be      	movs	r1, #190	; 0xbe
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_NVIC_EnableIRQ+0x2c>)
 800185e:	f7ff fb87 	bl	8000f70 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff04 	bl	8001674 <__NVIC_EnableIRQ>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	0800a3d4 	.word	0x0800a3d4

08001878 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff73 	bl	800176c <SysTick_Config>
 8001886:	4603      	mov	r3, r0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_GPIO_Init+0x108>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d017      	beq.n	80018de <HAL_GPIO_Init+0x4e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a3a      	ldr	r2, [pc, #232]	; (800199c <HAL_GPIO_Init+0x10c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x4e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a39      	ldr	r2, [pc, #228]	; (80019a0 <HAL_GPIO_Init+0x110>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00f      	beq.n	80018de <HAL_GPIO_Init+0x4e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a38      	ldr	r2, [pc, #224]	; (80019a4 <HAL_GPIO_Init+0x114>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00b      	beq.n	80018de <HAL_GPIO_Init+0x4e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a37      	ldr	r2, [pc, #220]	; (80019a8 <HAL_GPIO_Init+0x118>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d007      	beq.n	80018de <HAL_GPIO_Init+0x4e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a36      	ldr	r2, [pc, #216]	; (80019ac <HAL_GPIO_Init+0x11c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x4e>
 80018d6:	21b3      	movs	r1, #179	; 0xb3
 80018d8:	4835      	ldr	r0, [pc, #212]	; (80019b0 <HAL_GPIO_Init+0x120>)
 80018da:	f7ff fb49 	bl	8000f70 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_GPIO_Init+0x64>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	041b      	lsls	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x6c>
 80018f4:	21b4      	movs	r1, #180	; 0xb4
 80018f6:	482e      	ldr	r0, [pc, #184]	; (80019b0 <HAL_GPIO_Init+0x120>)
 80018f8:	f7ff fb3a 	bl	8000f70 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d035      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d031      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b11      	cmp	r3, #17
 8001912:	d02d      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d029      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b12      	cmp	r3, #18
 8001922:	d025      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <HAL_GPIO_Init+0x124>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d020      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <HAL_GPIO_Init+0x128>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d01b      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <HAL_GPIO_Init+0x12c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d016      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <HAL_GPIO_Init+0x130>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d011      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <HAL_GPIO_Init+0x134>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00c      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <HAL_GPIO_Init+0x138>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d007      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0xe0>
 8001968:	21b5      	movs	r1, #181	; 0xb5
 800196a:	4811      	ldr	r0, [pc, #68]	; (80019b0 <HAL_GPIO_Init+0x120>)
 800196c:	f7ff fb00 	bl	8000f70 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00b      	beq.n	8001990 <HAL_GPIO_Init+0x100>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x100>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x100>
 8001988:	21b6      	movs	r1, #182	; 0xb6
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <HAL_GPIO_Init+0x120>)
 800198c:	f7ff faf0 	bl	8000f70 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	e211      	b.n	8001dba <HAL_GPIO_Init+0x52a>
 8001996:	bf00      	nop
 8001998:	40020000 	.word	0x40020000
 800199c:	40020400 	.word	0x40020400
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020c00 	.word	0x40020c00
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40021c00 	.word	0x40021c00
 80019b0:	0800a410 	.word	0x0800a410
 80019b4:	10110000 	.word	0x10110000
 80019b8:	10210000 	.word	0x10210000
 80019bc:	10310000 	.word	0x10310000
 80019c0:	10120000 	.word	0x10120000
 80019c4:	10220000 	.word	0x10220000
 80019c8:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 81e5 	bne.w	8001db4 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d00b      	beq.n	8001a0a <HAL_GPIO_Init+0x17a>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fe:	2b11      	cmp	r3, #17
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d144      	bne.n	8001a94 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00f      	beq.n	8001a32 <HAL_GPIO_Init+0x1a2>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d00b      	beq.n	8001a32 <HAL_GPIO_Init+0x1a2>
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x1a2>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x1a2>
 8001a2a:	21c8      	movs	r1, #200	; 0xc8
 8001a2c:	489f      	ldr	r0, [pc, #636]	; (8001cac <HAL_GPIO_Init+0x41c>)
 8001a2e:	f7ff fa9f 	bl	8000f70 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d004      	beq.n	8001ad6 <HAL_GPIO_Init+0x246>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b12      	cmp	r3, #18
 8001ad2:	f040 80a0 	bne.w	8001c16 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d077      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d073      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d06f      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d06b      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d067      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d063      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d05f      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d05b      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d057      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d053      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d04f      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d04b      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d047      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d043      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d03f      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d03b      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	2b05      	cmp	r3, #5
 8001b5c:	d037      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d033      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d02f      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d02b      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d027      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2b07      	cmp	r3, #7
 8001b84:	d023      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	2b07      	cmp	r3, #7
 8001b8c:	d01f      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b07      	cmp	r3, #7
 8001b94:	d01b      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d017      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b0a      	cmp	r3, #10
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b09      	cmp	r3, #9
 8001bac:	d00f      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b09      	cmp	r3, #9
 8001bb4:	d00b      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x33e>
 8001bc6:	21e0      	movs	r1, #224	; 0xe0
 8001bc8:	4838      	ldr	r0, [pc, #224]	; (8001cac <HAL_GPIO_Init+0x41c>)
 8001bca:	f7ff f9d1 	bl	8000f70 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	69b9      	ldr	r1, [r7, #24]
 8001c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0203 	and.w	r2, r3, #3
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80ae 	beq.w	8001db4 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_GPIO_Init+0x420>)
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <HAL_GPIO_Init+0x420>)
 8001c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c66:	6453      	str	r3, [r2, #68]	; 0x44
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_GPIO_Init+0x420>)
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c74:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_GPIO_Init+0x424>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_GPIO_Init+0x428>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d025      	beq.n	8001cec <HAL_GPIO_Init+0x45c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_GPIO_Init+0x42c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d01f      	beq.n	8001ce8 <HAL_GPIO_Init+0x458>
 8001ca8:	e00a      	b.n	8001cc0 <HAL_GPIO_Init+0x430>
 8001caa:	bf00      	nop
 8001cac:	0800a410 	.word	0x0800a410
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a42      	ldr	r2, [pc, #264]	; (8001dcc <HAL_GPIO_Init+0x53c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_GPIO_Init+0x454>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a41      	ldr	r2, [pc, #260]	; (8001dd0 <HAL_GPIO_Init+0x540>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d007      	beq.n	8001ce0 <HAL_GPIO_Init+0x450>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a40      	ldr	r2, [pc, #256]	; (8001dd4 <HAL_GPIO_Init+0x544>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_GPIO_Init+0x44c>
 8001cd8:	2304      	movs	r3, #4
 8001cda:	e008      	b.n	8001cee <HAL_GPIO_Init+0x45e>
 8001cdc:	2307      	movs	r3, #7
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x45e>
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e004      	b.n	8001cee <HAL_GPIO_Init+0x45e>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x45e>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_GPIO_Init+0x45e>
 8001cec:	2300      	movs	r3, #0
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cfe:	4936      	ldr	r1, [pc, #216]	; (8001dd8 <HAL_GPIO_Init+0x548>)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d0c:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_GPIO_Init+0x54c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d30:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <HAL_GPIO_Init+0x54c>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_GPIO_Init+0x54c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5a:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <HAL_GPIO_Init+0x54c>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_GPIO_Init+0x54c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d84:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <HAL_GPIO_Init+0x54c>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_GPIO_Init+0x54c>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dae:	4a0b      	ldr	r2, [pc, #44]	; (8001ddc <HAL_GPIO_Init+0x54c>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	3301      	adds	r3, #1
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	f67f ae05 	bls.w	80019cc <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40013c00 	.word	0x40013c00

08001de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d004      	beq.n	8001dfc <HAL_GPIO_ReadPin+0x1c>
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_GPIO_ReadPin+0x26>
 8001dfc:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8001e00:	4809      	ldr	r0, [pc, #36]	; (8001e28 <HAL_GPIO_ReadPin+0x48>)
 8001e02:	f7ff f8b5 	bl	8000f70 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8001e12:	2301      	movs	r3, #1
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e001      	b.n	8001e1c <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	0800a410 	.word	0x0800a410

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_GPIO_WritePin+0x20>
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d004      	beq.n	8001e56 <HAL_GPIO_WritePin+0x2a>
 8001e4c:	f240 119f 	movw	r1, #415	; 0x19f
 8001e50:	480e      	ldr	r0, [pc, #56]	; (8001e8c <HAL_GPIO_WritePin+0x60>)
 8001e52:	f7ff f88d 	bl	8000f70 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001e56:	787b      	ldrb	r3, [r7, #1]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_WritePin+0x40>
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d004      	beq.n	8001e6c <HAL_GPIO_WritePin+0x40>
 8001e62:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001e66:	4809      	ldr	r0, [pc, #36]	; (8001e8c <HAL_GPIO_WritePin+0x60>)
 8001e68:	f7ff f882 	bl	8000f70 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e78:	e003      	b.n	8001e82 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	041a      	lsls	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	0800a410 	.word	0x0800a410

08001e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fed4 	bl	8000c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40013c00 	.word	0x40013c00

08001ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e1b1      	b.n	8002236 <HAL_I2C_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4aa2      	ldr	r2, [pc, #648]	; (8002160 <HAL_I2C_Init+0x2a0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00e      	beq.n	8001efa <HAL_I2C_Init+0x3a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4aa0      	ldr	r2, [pc, #640]	; (8002164 <HAL_I2C_Init+0x2a4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d009      	beq.n	8001efa <HAL_I2C_Init+0x3a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a9f      	ldr	r2, [pc, #636]	; (8002168 <HAL_I2C_Init+0x2a8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d004      	beq.n	8001efa <HAL_I2C_Init+0x3a>
 8001ef0:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001ef4:	489d      	ldr	r0, [pc, #628]	; (800216c <HAL_I2C_Init+0x2ac>)
 8001ef6:	f7ff f83b 	bl	8000f70 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <HAL_I2C_Init+0x4c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4a9a      	ldr	r2, [pc, #616]	; (8002170 <HAL_I2C_Init+0x2b0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d904      	bls.n	8001f16 <HAL_I2C_Init+0x56>
 8001f0c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001f10:	4896      	ldr	r0, [pc, #600]	; (800216c <HAL_I2C_Init+0x2ac>)
 8001f12:	f7ff f82d 	bl	8000f70 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_I2C_Init+0x72>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f26:	d004      	beq.n	8001f32 <HAL_I2C_Init+0x72>
 8001f28:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001f2c:	488f      	ldr	r0, [pc, #572]	; (800216c <HAL_I2C_Init+0x2ac>)
 8001f2e:	f7ff f81f 	bl	8000f70 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f3a:	f023 0303 	bic.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d004      	beq.n	8001f4c <HAL_I2C_Init+0x8c>
 8001f42:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001f46:	4889      	ldr	r0, [pc, #548]	; (800216c <HAL_I2C_Init+0x2ac>)
 8001f48:	f7ff f812 	bl	8000f70 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f54:	d009      	beq.n	8001f6a <HAL_I2C_Init+0xaa>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001f5e:	d004      	beq.n	8001f6a <HAL_I2C_Init+0xaa>
 8001f60:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001f64:	4881      	ldr	r0, [pc, #516]	; (800216c <HAL_I2C_Init+0x2ac>)
 8001f66:	f7ff f803 	bl	8000f70 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <HAL_I2C_Init+0xc4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d004      	beq.n	8001f84 <HAL_I2C_Init+0xc4>
 8001f7a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001f7e:	487b      	ldr	r0, [pc, #492]	; (800216c <HAL_I2C_Init+0x2ac>)
 8001f80:	f7fe fff6 	bl	8000f70 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <HAL_I2C_Init+0xda>
 8001f90:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001f94:	4875      	ldr	r0, [pc, #468]	; (800216c <HAL_I2C_Init+0x2ac>)
 8001f96:	f7fe ffeb 	bl	8000f70 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_I2C_Init+0xf4>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	d004      	beq.n	8001fb4 <HAL_I2C_Init+0xf4>
 8001faa:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8001fae:	486f      	ldr	r0, [pc, #444]	; (800216c <HAL_I2C_Init+0x2ac>)
 8001fb0:	f7fe ffde 	bl	8000f70 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_I2C_Init+0x10e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	2b80      	cmp	r3, #128	; 0x80
 8001fc2:	d004      	beq.n	8001fce <HAL_I2C_Init+0x10e>
 8001fc4:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001fc8:	4868      	ldr	r0, [pc, #416]	; (800216c <HAL_I2C_Init+0x2ac>)
 8001fca:	f7fe ffd1 	bl	8000f70 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fbfa 	bl	80007dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2224      	movs	r2, #36	; 0x24
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0201 	bic.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800200e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800201e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002020:	f002 fd8c 	bl	8004b3c <HAL_RCC_GetPCLK1Freq>
 8002024:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4a52      	ldr	r2, [pc, #328]	; (8002174 <HAL_I2C_Init+0x2b4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d807      	bhi.n	8002040 <HAL_I2C_Init+0x180>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4a51      	ldr	r2, [pc, #324]	; (8002178 <HAL_I2C_Init+0x2b8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	bf94      	ite	ls
 8002038:	2301      	movls	r3, #1
 800203a:	2300      	movhi	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	e006      	b.n	800204e <HAL_I2C_Init+0x18e>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a4e      	ldr	r2, [pc, #312]	; (800217c <HAL_I2C_Init+0x2bc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	bf94      	ite	ls
 8002048:	2301      	movls	r3, #1
 800204a:	2300      	movhi	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0ef      	b.n	8002236 <HAL_I2C_Init+0x376>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a49      	ldr	r2, [pc, #292]	; (8002180 <HAL_I2C_Init+0x2c0>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0c9b      	lsrs	r3, r3, #18
 8002060:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a3b      	ldr	r2, [pc, #236]	; (8002174 <HAL_I2C_Init+0x2b4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d802      	bhi.n	8002090 <HAL_I2C_Init+0x1d0>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	3301      	adds	r3, #1
 800208e:	e009      	b.n	80020a4 <HAL_I2C_Init+0x1e4>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	4a3a      	ldr	r2, [pc, #232]	; (8002184 <HAL_I2C_Init+0x2c4>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	3301      	adds	r3, #1
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	492d      	ldr	r1, [pc, #180]	; (8002174 <HAL_I2C_Init+0x2b4>)
 80020c0:	428b      	cmp	r3, r1
 80020c2:	d80d      	bhi.n	80020e0 <HAL_I2C_Init+0x220>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e59      	subs	r1, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	2b04      	cmp	r3, #4
 80020da:	bf38      	it	cc
 80020dc:	2304      	movcc	r3, #4
 80020de:	e063      	b.n	80021a8 <HAL_I2C_Init+0x2e8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d111      	bne.n	800210c <HAL_I2C_Init+0x24c>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e58      	subs	r0, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	440b      	add	r3, r1
 80020f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e012      	b.n	8002132 <HAL_I2C_Init+0x272>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1e58      	subs	r0, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	0099      	lsls	r1, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002122:	3301      	adds	r3, #1
 8002124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Init+0x27a>
 8002136:	2301      	movs	r3, #1
 8002138:	e036      	b.n	80021a8 <HAL_I2C_Init+0x2e8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d122      	bne.n	8002188 <HAL_I2C_Init+0x2c8>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1e58      	subs	r0, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	440b      	add	r3, r1
 8002150:	fbb0 f3f3 	udiv	r3, r0, r3
 8002154:	3301      	adds	r3, #1
 8002156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215e:	e023      	b.n	80021a8 <HAL_I2C_Init+0x2e8>
 8002160:	40005400 	.word	0x40005400
 8002164:	40005800 	.word	0x40005800
 8002168:	40005c00 	.word	0x40005c00
 800216c:	0800a44c 	.word	0x0800a44c
 8002170:	00061a80 	.word	0x00061a80
 8002174:	000186a0 	.word	0x000186a0
 8002178:	001e847f 	.word	0x001e847f
 800217c:	003d08ff 	.word	0x003d08ff
 8002180:	431bde83 	.word	0x431bde83
 8002184:	10624dd3 	.word	0x10624dd3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1e58      	subs	r0, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	0099      	lsls	r1, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	fbb0 f3f3 	udiv	r3, r0, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	6809      	ldr	r1, [r1, #0]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6911      	ldr	r1, [r2, #16]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68d2      	ldr	r2, [r2, #12]
 80021e2:	4311      	orrs	r1, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop

08002240 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1e7      	b.n	8002622 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a9b      	ldr	r2, [pc, #620]	; (80024c4 <HAL_I2S_Init+0x284>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d018      	beq.n	800228e <HAL_I2S_Init+0x4e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a99      	ldr	r2, [pc, #612]	; (80024c8 <HAL_I2S_Init+0x288>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_I2S_Init+0x4e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a98      	ldr	r2, [pc, #608]	; (80024cc <HAL_I2S_Init+0x28c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00e      	beq.n	800228e <HAL_I2S_Init+0x4e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a96      	ldr	r2, [pc, #600]	; (80024d0 <HAL_I2S_Init+0x290>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_I2S_Init+0x4e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a95      	ldr	r2, [pc, #596]	; (80024d4 <HAL_I2S_Init+0x294>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d004      	beq.n	800228e <HAL_I2S_Init+0x4e>
 8002284:	f240 111b 	movw	r1, #283	; 0x11b
 8002288:	4893      	ldr	r0, [pc, #588]	; (80024d8 <HAL_I2S_Init+0x298>)
 800228a:	f7fe fe71 	bl	8000f70 <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d013      	beq.n	80022be <HAL_I2S_Init+0x7e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229e:	d00e      	beq.n	80022be <HAL_I2S_Init+0x7e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a8:	d009      	beq.n	80022be <HAL_I2S_Init+0x7e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022b2:	d004      	beq.n	80022be <HAL_I2S_Init+0x7e>
 80022b4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80022b8:	4887      	ldr	r0, [pc, #540]	; (80024d8 <HAL_I2S_Init+0x298>)
 80022ba:	f7fe fe59 	bl	8000f70 <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d014      	beq.n	80022f0 <HAL_I2S_Init+0xb0>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d010      	beq.n	80022f0 <HAL_I2S_Init+0xb0>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d00c      	beq.n	80022f0 <HAL_I2S_Init+0xb0>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b30      	cmp	r3, #48	; 0x30
 80022dc:	d008      	beq.n	80022f0 <HAL_I2S_Init+0xb0>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2bb0      	cmp	r3, #176	; 0xb0
 80022e4:	d004      	beq.n	80022f0 <HAL_I2S_Init+0xb0>
 80022e6:	f240 111d 	movw	r1, #285	; 0x11d
 80022ea:	487b      	ldr	r0, [pc, #492]	; (80024d8 <HAL_I2S_Init+0x298>)
 80022ec:	f7fe fe40 	bl	8000f70 <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_I2S_Init+0xda>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d00c      	beq.n	800231a <HAL_I2S_Init+0xda>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d008      	beq.n	800231a <HAL_I2S_Init+0xda>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d004      	beq.n	800231a <HAL_I2S_Init+0xda>
 8002310:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002314:	4870      	ldr	r0, [pc, #448]	; (80024d8 <HAL_I2S_Init+0x298>)
 8002316:	f7fe fe2b 	bl	8000f70 <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002322:	d008      	beq.n	8002336 <HAL_I2S_Init+0xf6>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_I2S_Init+0xf6>
 800232c:	f240 111f 	movw	r1, #287	; 0x11f
 8002330:	4869      	ldr	r0, [pc, #420]	; (80024d8 <HAL_I2S_Init+0x298>)
 8002332:	f7fe fe1d 	bl	8000f70 <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800233e:	d304      	bcc.n	800234a <HAL_I2S_Init+0x10a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	4a65      	ldr	r2, [pc, #404]	; (80024dc <HAL_I2S_Init+0x29c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d908      	bls.n	800235c <HAL_I2S_Init+0x11c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d004      	beq.n	800235c <HAL_I2S_Init+0x11c>
 8002352:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002356:	4860      	ldr	r0, [pc, #384]	; (80024d8 <HAL_I2S_Init+0x298>)
 8002358:	f7fe fe0a 	bl	8000f70 <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_I2S_Init+0x136>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d004      	beq.n	8002376 <HAL_I2S_Init+0x136>
 800236c:	f240 1121 	movw	r1, #289	; 0x121
 8002370:	4859      	ldr	r0, [pc, #356]	; (80024d8 <HAL_I2S_Init+0x298>)
 8002372:	f7fe fdfd 	bl	8000f70 <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d008      	beq.n	8002390 <HAL_I2S_Init+0x150>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <HAL_I2S_Init+0x150>
 8002386:	f44f 7191 	mov.w	r1, #290	; 0x122
 800238a:	4853      	ldr	r0, [pc, #332]	; (80024d8 <HAL_I2S_Init+0x298>)
 800238c:	f7fe fdf0 	bl	8000f70 <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a4e      	ldr	r2, [pc, #312]	; (80024e0 <HAL_I2S_Init+0x2a0>)
 80023a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fabc 	bl	8000928 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80023c6:	f023 030f 	bic.w	r3, r3, #15
 80023ca:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2202      	movs	r2, #2
 80023d2:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d060      	beq.n	800249e <HAL_I2S_Init+0x25e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80023e4:	2310      	movs	r3, #16
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	e001      	b.n	80023ee <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d802      	bhi.n	80023fc <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80023fc:	2001      	movs	r0, #1
 80023fe:	f002 fdc5 	bl	8004f8c <HAL_RCCEx_GetPeriphCLKFreq>
 8002402:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	d125      	bne.n	800245a <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d010      	beq.n	8002438 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	3305      	adds	r3, #5
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	e01f      	b.n	8002478 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	461a      	mov	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	3305      	adds	r3, #5
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e00e      	b.n	8002478 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	461a      	mov	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	3305      	adds	r3, #5
 8002476:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <HAL_I2S_Init+0x2a4>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	08db      	lsrs	r3, r3, #3
 8002482:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	e003      	b.n	80024a6 <HAL_I2S_Init+0x266>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800249e:	2302      	movs	r3, #2
 80024a0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d902      	bls.n	80024b2 <HAL_I2S_Init+0x272>
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2bff      	cmp	r3, #255	; 0xff
 80024b0:	d91a      	bls.n	80024e8 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f043 0210 	orr.w	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0af      	b.n	8002622 <HAL_I2S_Init+0x3e2>
 80024c2:	bf00      	nop
 80024c4:	40013000 	.word	0x40013000
 80024c8:	40003800 	.word	0x40003800
 80024cc:	40003c00 	.word	0x40003c00
 80024d0:	40013400 	.word	0x40013400
 80024d4:	40015000 	.word	0x40015000
 80024d8:	0800a484 	.word	0x0800a484
 80024dc:	0002ee00 	.word	0x0002ee00
 80024e0:	08002733 	.word	0x08002733
 80024e4:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	ea42 0103 	orr.w	r1, r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002506:	f023 030f 	bic.w	r3, r3, #15
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6851      	ldr	r1, [r2, #4]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6892      	ldr	r2, [r2, #8]
 8002512:	4311      	orrs	r1, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68d2      	ldr	r2, [r2, #12]
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6992      	ldr	r2, [r2, #24]
 800251e:	430a      	orrs	r2, r1
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800252a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_I2S_Init+0x306>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d004      	beq.n	8002546 <HAL_I2S_Init+0x306>
 800253c:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002540:	483a      	ldr	r0, [pc, #232]	; (800262c <HAL_I2S_Init+0x3ec>)
 8002542:	f7fe fd15 	bl	8000f70 <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d161      	bne.n	8002612 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a37      	ldr	r2, [pc, #220]	; (8002630 <HAL_I2S_Init+0x3f0>)
 8002552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a36      	ldr	r2, [pc, #216]	; (8002634 <HAL_I2S_Init+0x3f4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_I2S_Init+0x322>
 800255e:	4b36      	ldr	r3, [pc, #216]	; (8002638 <HAL_I2S_Init+0x3f8>)
 8002560:	e001      	b.n	8002566 <HAL_I2S_Init+0x326>
 8002562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4931      	ldr	r1, [pc, #196]	; (8002634 <HAL_I2S_Init+0x3f4>)
 800256e:	428a      	cmp	r2, r1
 8002570:	d101      	bne.n	8002576 <HAL_I2S_Init+0x336>
 8002572:	4a31      	ldr	r2, [pc, #196]	; (8002638 <HAL_I2S_Init+0x3f8>)
 8002574:	e001      	b.n	800257a <HAL_I2S_Init+0x33a>
 8002576:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800257a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800257e:	f023 030f 	bic.w	r3, r3, #15
 8002582:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <HAL_I2S_Init+0x3f4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_I2S_Init+0x352>
 800258e:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <HAL_I2S_Init+0x3f8>)
 8002590:	e001      	b.n	8002596 <HAL_I2S_Init+0x356>
 8002592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002596:	2202      	movs	r2, #2
 8002598:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a25      	ldr	r2, [pc, #148]	; (8002634 <HAL_I2S_Init+0x3f4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_I2S_Init+0x368>
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_I2S_Init+0x3f8>)
 80025a6:	e001      	b.n	80025ac <HAL_I2S_Init+0x36c>
 80025a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b8:	d003      	beq.n	80025c2 <HAL_I2S_Init+0x382>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80025c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	e001      	b.n	80025ce <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	b299      	uxth	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80025e4:	4303      	orrs	r3, r0
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	430b      	orrs	r3, r1
 80025ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80025ec:	4313      	orrs	r3, r2
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	897b      	ldrh	r3, [r7, #10]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025fa:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0c      	ldr	r2, [pc, #48]	; (8002634 <HAL_I2S_Init+0x3f4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_I2S_Init+0x3ca>
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <HAL_I2S_Init+0x3f8>)
 8002608:	e001      	b.n	800260e <HAL_I2S_Init+0x3ce>
 800260a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800260e:	897a      	ldrh	r2, [r7, #10]
 8002610:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3720      	adds	r7, #32
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	0800a484 	.word	0x0800a484
 8002630:	08002849 	.word	0x08002849
 8002634:	40003800 	.word	0x40003800
 8002638:	40003400 	.word	0x40003400

0800263c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	1c9a      	adds	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10e      	bne.n	80026cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ffb8 	bl	800263c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	b292      	uxth	r2, r2
 80026e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	1c9a      	adds	r2, r3, #2
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10e      	bne.n	800272a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800271a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff93 	bl	8002650 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b04      	cmp	r3, #4
 800274c:	d13a      	bne.n	80027c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d109      	bne.n	800276c <I2S_IRQHandler+0x3a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d102      	bne.n	800276c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffb4 	bl	80026d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d126      	bne.n	80027c4 <I2S_IRQHandler+0x92>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b20      	cmp	r3, #32
 8002782:	d11f      	bne.n	80027c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002792:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f043 0202 	orr.w	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ff50 	bl	8002664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d136      	bne.n	800283e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d109      	bne.n	80027ee <I2S_IRQHandler+0xbc>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d102      	bne.n	80027ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff45 	bl	8002678 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d122      	bne.n	800283e <I2S_IRQHandler+0x10c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d11b      	bne.n	800283e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002814:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	f043 0204 	orr.w	r2, r3, #4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff13 	bl	8002664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4aa2      	ldr	r2, [pc, #648]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002862:	4ba2      	ldr	r3, [pc, #648]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002864:	e001      	b.n	800286a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002866:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a9b      	ldr	r2, [pc, #620]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d101      	bne.n	8002884 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002880:	4b9a      	ldr	r3, [pc, #616]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002882:	e001      	b.n	8002888 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002884:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002894:	d004      	beq.n	80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 8099 	bne.w	80029d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d107      	bne.n	80028ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f925 	bl	8002b04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d107      	bne.n	80028d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f9c8 	bl	8002c64 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	d13a      	bne.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d035      	beq.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7e      	ldr	r2, [pc, #504]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80028f2:	4b7e      	ldr	r3, [pc, #504]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80028f4:	e001      	b.n	80028fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80028f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4979      	ldr	r1, [pc, #484]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002902:	428b      	cmp	r3, r1
 8002904:	d101      	bne.n	800290a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002906:	4b79      	ldr	r3, [pc, #484]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002908:	e001      	b.n	800290e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800290a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800290e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002912:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002922:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f043 0202 	orr.w	r2, r3, #2
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff fe88 	bl	8002664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b08      	cmp	r3, #8
 800295c:	f040 80be 	bne.w	8002adc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80b8 	beq.w	8002adc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800297a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a59      	ldr	r2, [pc, #356]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002986:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002988:	e001      	b.n	800298e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800298a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4954      	ldr	r1, [pc, #336]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002996:	428b      	cmp	r3, r1
 8002998:	d101      	bne.n	800299e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800299a:	4b54      	ldr	r3, [pc, #336]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800299c:	e001      	b.n	80029a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800299e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f043 0204 	orr.w	r2, r3, #4
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fe4a 	bl	8002664 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029d0:	e084      	b.n	8002adc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d107      	bne.n	80029ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8be 	bl	8002b68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f8fd 	bl	8002c00 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d12f      	bne.n	8002a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d02a      	beq.n	8002a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2e      	ldr	r2, [pc, #184]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a36:	e001      	b.n	8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4929      	ldr	r1, [pc, #164]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d101      	bne.n	8002a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002a48:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a4a:	e001      	b.n	8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f043 0202 	orr.w	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff fdfa 	bl	8002664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d131      	bne.n	8002ade <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d02c      	beq.n	8002ade <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a90:	e001      	b.n	8002a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002a92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4912      	ldr	r1, [pc, #72]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a9e:	428b      	cmp	r3, r1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002aa4:	e001      	b.n	8002aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002abe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fdc5 	bl	8002664 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ada:	e000      	b.n	8002ade <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002adc:	bf00      	nop
}
 8002ade:	bf00      	nop
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40003800 	.word	0x40003800
 8002aec:	40003400 	.word	0x40003400

08002af0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	1c99      	adds	r1, r3, #2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6251      	str	r1, [r2, #36]	; 0x24
 8002b16:	881a      	ldrh	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d113      	bne.n	8002b5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ffc9 	bl	8002af0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	1c99      	adds	r1, r3, #2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6251      	str	r1, [r2, #36]	; 0x24
 8002b7a:	8819      	ldrh	r1, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <I2SEx_TxISR_I2SExt+0x90>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <I2SEx_TxISR_I2SExt+0x22>
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <I2SEx_TxISR_I2SExt+0x94>)
 8002b88:	e001      	b.n	8002b8e <I2SEx_TxISR_I2SExt+0x26>
 8002b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b8e:	460a      	mov	r2, r1
 8002b90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d121      	bne.n	8002bee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <I2SEx_TxISR_I2SExt+0x90>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <I2SEx_TxISR_I2SExt+0x50>
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <I2SEx_TxISR_I2SExt+0x94>)
 8002bb6:	e001      	b.n	8002bbc <I2SEx_TxISR_I2SExt+0x54>
 8002bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	490d      	ldr	r1, [pc, #52]	; (8002bf8 <I2SEx_TxISR_I2SExt+0x90>)
 8002bc4:	428b      	cmp	r3, r1
 8002bc6:	d101      	bne.n	8002bcc <I2SEx_TxISR_I2SExt+0x64>
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <I2SEx_TxISR_I2SExt+0x94>)
 8002bca:	e001      	b.n	8002bd0 <I2SEx_TxISR_I2SExt+0x68>
 8002bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bd4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff81 	bl	8002af0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40003800 	.word	0x40003800
 8002bfc:	40003400 	.word	0x40003400

08002c00 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68d8      	ldr	r0, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	1c99      	adds	r1, r3, #2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002c18:	b282      	uxth	r2, r0
 8002c1a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d113      	bne.n	8002c5c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ff4a 	bl	8002af0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a20      	ldr	r2, [pc, #128]	; (8002cf4 <I2SEx_RxISR_I2SExt+0x90>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <I2SEx_RxISR_I2SExt+0x16>
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <I2SEx_RxISR_I2SExt+0x94>)
 8002c78:	e001      	b.n	8002c7e <I2SEx_RxISR_I2SExt+0x1a>
 8002c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c7e:	68d8      	ldr	r0, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	1c99      	adds	r1, r3, #2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002c8a:	b282      	uxth	r2, r0
 8002c8c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d121      	bne.n	8002cea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <I2SEx_RxISR_I2SExt+0x90>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d101      	bne.n	8002cb4 <I2SEx_RxISR_I2SExt+0x50>
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <I2SEx_RxISR_I2SExt+0x94>)
 8002cb2:	e001      	b.n	8002cb8 <I2SEx_RxISR_I2SExt+0x54>
 8002cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	490d      	ldr	r1, [pc, #52]	; (8002cf4 <I2SEx_RxISR_I2SExt+0x90>)
 8002cc0:	428b      	cmp	r3, r1
 8002cc2:	d101      	bne.n	8002cc8 <I2SEx_RxISR_I2SExt+0x64>
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <I2SEx_RxISR_I2SExt+0x94>)
 8002cc6:	e001      	b.n	8002ccc <I2SEx_RxISR_I2SExt+0x68>
 8002cc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ccc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cd0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d106      	bne.n	8002cea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff03 	bl	8002af0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40003800 	.word	0x40003800
 8002cf8:	40003400 	.word	0x40003400

08002cfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfe:	b08f      	sub	sp, #60	; 0x3c
 8002d00:	af0a      	add	r7, sp, #40	; 0x28
 8002d02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e118      	b.n	8002f40 <HAL_PCD_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d16:	d003      	beq.n	8002d20 <HAL_PCD_Init+0x24>
 8002d18:	2187      	movs	r1, #135	; 0x87
 8002d1a:	488b      	ldr	r0, [pc, #556]	; (8002f48 <HAL_PCD_Init+0x24c>)
 8002d1c:	f7fe f928 	bl	8000f70 <assert_failed>

  USBx = hpcd->Instance;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f006 fb76 	bl	800942c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2203      	movs	r2, #3
 8002d44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 fb43 	bl	80063ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	687e      	ldr	r6, [r7, #4]
 8002d6c:	466d      	mov	r5, sp
 8002d6e:	f106 0410 	add.w	r4, r6, #16
 8002d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d82:	1d33      	adds	r3, r6, #4
 8002d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d86:	6838      	ldr	r0, [r7, #0]
 8002d88:	f003 fa1a 	bl	80061c0 <USB_CoreInit>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0d0      	b.n	8002f40 <HAL_PCD_Init+0x244>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fb31 	bl	800640c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e04a      	b.n	8002e46 <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	333d      	adds	r3, #61	; 0x3d
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	333c      	adds	r3, #60	; 0x3c
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	b298      	uxth	r0, r3
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3342      	adds	r3, #66	; 0x42
 8002dec:	4602      	mov	r2, r0
 8002dee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	333f      	adds	r3, #63	; 0x3f
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3344      	adds	r3, #68	; 0x44
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3348      	adds	r3, #72	; 0x48
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3350      	adds	r3, #80	; 0x50
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	3301      	adds	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d3af      	bcc.n	8002db0 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]
 8002e54:	e044      	b.n	8002ee0 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	3301      	adds	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d3b5      	bcc.n	8002e56 <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	687e      	ldr	r6, [r7, #4]
 8002ef2:	466d      	mov	r5, sp
 8002ef4:	f106 0410 	add.w	r4, r6, #16
 8002ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f04:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f08:	1d33      	adds	r3, r6, #4
 8002f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0c:	6838      	ldr	r0, [r7, #0]
 8002f0e:	f003 faa7 	bl	8006460 <USB_DevInit>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e00d      	b.n	8002f40 <HAL_PCD_Init+0x244>
  }

  hpcd->USB_Address = 0U;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f004 faef 	bl	800751c <USB_DevDisconnect>

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f48:	0800a4bc 	.word	0x0800a4bc

08002f4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_PCD_Start+0x1c>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e020      	b.n	8002faa <HAL_PCD_Start+0x5e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d109      	bne.n	8002f8c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d005      	beq.n	8002f8c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 fa19 	bl	80063c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f004 fa9d 	bl	80074da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fb2:	b590      	push	{r4, r7, lr}
 8002fb4:	b08d      	sub	sp, #52	; 0x34
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f004 fb5b 	bl	8007684 <USB_GetMode>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 839d 	bne.w	8003710 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 fabf 	bl	800755e <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8393 	beq.w	800370e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f004 fab6 	bl	800755e <USB_ReadInterrupts>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d107      	bne.n	800300c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f002 0202 	and.w	r2, r2, #2
 800300a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f004 faa4 	bl	800755e <USB_ReadInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b10      	cmp	r3, #16
 800301e:	d161      	bne.n	80030e4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0210 	bic.w	r2, r2, #16
 800302e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	4413      	add	r3, r2
 800304c:	3304      	adds	r3, #4
 800304e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	0c5b      	lsrs	r3, r3, #17
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	2b02      	cmp	r3, #2
 800305a:	d124      	bne.n	80030a6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d035      	beq.n	80030d4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003076:	b29b      	uxth	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	6a38      	ldr	r0, [r7, #32]
 800307c:	f004 f90a 	bl	8007294 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800308c:	441a      	add	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800309e:	441a      	add	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	619a      	str	r2, [r3, #24]
 80030a4:	e016      	b.n	80030d4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	0c5b      	lsrs	r3, r3, #17
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d110      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030b8:	2208      	movs	r2, #8
 80030ba:	4619      	mov	r1, r3
 80030bc:	6a38      	ldr	r0, [r7, #32]
 80030be:	f004 f8e9 	bl	8007294 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ce:	441a      	add	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0210 	orr.w	r2, r2, #16
 80030e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f004 fa38 	bl	800755e <USB_ReadInterrupts>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030f8:	d16e      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f004 fa3e 	bl	8007584 <USB_ReadDevAllOutEpInterrupt>
 8003108:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800310a:	e062      	b.n	80031d2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d057      	beq.n	80031c6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f004 fa63 	bl	80075ec <USB_ReadDevOutEPInterrupt>
 8003126:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00c      	beq.n	800314c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313e:	461a      	mov	r2, r3
 8003140:	2301      	movs	r3, #1
 8003142:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fdb0 	bl	8003cac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00c      	beq.n	8003170 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003162:	461a      	mov	r2, r3
 8003164:	2308      	movs	r3, #8
 8003166:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 feaa 	bl	8003ec4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003186:	461a      	mov	r2, r3
 8003188:	2310      	movs	r3, #16
 800318a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	461a      	mov	r2, r3
 80031a4:	2320      	movs	r3, #32
 80031a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	3301      	adds	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d199      	bne.n	800310c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f004 f9be 	bl	800755e <USB_ReadInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031ec:	f040 80c0 	bne.w	8003370 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 f9df 	bl	80075b8 <USB_ReadDevAllInEpInterrupt>
 80031fa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003200:	e0b2      	b.n	8003368 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80a7 	beq.w	800335c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f004 fa05 	bl	8007628 <USB_ReadDevInEPInterrupt>
 800321e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d057      	beq.n	80032da <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	2201      	movs	r2, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	43db      	mvns	r3, r3
 8003244:	69f9      	ldr	r1, [r7, #28]
 8003246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800324a:	4013      	ands	r3, r2
 800324c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325a:	461a      	mov	r2, r3
 800325c:	2301      	movs	r3, #1
 800325e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d132      	bne.n	80032ce <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	3348      	adds	r3, #72	; 0x48
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4403      	add	r3, r0
 8003288:	3344      	adds	r3, #68	; 0x44
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4419      	add	r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4403      	add	r3, r0
 800329c:	3348      	adds	r3, #72	; 0x48
 800329e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d113      	bne.n	80032ce <HAL_PCD_IRQHandler+0x31c>
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3350      	adds	r3, #80	; 0x50
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d108      	bne.n	80032ce <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032c6:	461a      	mov	r2, r3
 80032c8:	2101      	movs	r1, #1
 80032ca:	f004 fa0d 	bl	80076e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f006 f938 	bl	800954a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f0:	461a      	mov	r2, r3
 80032f2:	2308      	movs	r3, #8
 80032f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330c:	461a      	mov	r2, r3
 800330e:	2310      	movs	r3, #16
 8003310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003328:	461a      	mov	r2, r3
 800332a:	2340      	movs	r3, #64	; 0x40
 800332c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003344:	461a      	mov	r2, r3
 8003346:	2302      	movs	r3, #2
 8003348:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fc1b 	bl	8003b92 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	3301      	adds	r3, #1
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	2b00      	cmp	r3, #0
 800336c:	f47f af49 	bne.w	8003202 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f004 f8f2 	bl	800755e <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003384:	d122      	bne.n	80033cc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d108      	bne.n	80033b6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80033ac:	2100      	movs	r1, #0
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fe26 	bl	8004000 <HAL_PCDEx_LPM_Callback>
 80033b4:	e002      	b.n	80033bc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f006 f934 	bl	8009624 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80033ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 f8c4 	bl	800755e <USB_ReadInterrupts>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e0:	d112      	bne.n	8003408 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d102      	bne.n	80033f8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f006 f8f0 	bl	80095d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003406:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f004 f8a6 	bl	800755e <USB_ReadInterrupts>
 8003412:	4603      	mov	r3, r0
 8003414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341c:	f040 80c7 	bne.w	80035ae <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2110      	movs	r1, #16
 800343a:	4618      	mov	r0, r3
 800343c:	f003 f974 	bl	8006728 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003440:	2300      	movs	r3, #0
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003444:	e056      	b.n	80034f4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003452:	461a      	mov	r2, r3
 8003454:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003458:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346a:	0151      	lsls	r1, r2, #5
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	440a      	add	r2, r1
 8003470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003474:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003478:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348a:	0151      	lsls	r1, r2, #5
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	440a      	add	r2, r1
 8003490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003494:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003498:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a6:	461a      	mov	r2, r3
 80034a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034be:	0151      	lsls	r1, r2, #5
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	440a      	add	r2, r1
 80034c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034de:	0151      	lsls	r1, r2, #5
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	440a      	add	r2, r1
 80034e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	3301      	adds	r3, #1
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3a3      	bcc.n	8003446 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800350c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003510:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800352a:	f043 030b 	orr.w	r3, r3, #11
 800352e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003540:	f043 030b 	orr.w	r3, r3, #11
 8003544:	6453      	str	r3, [r2, #68]	; 0x44
 8003546:	e015      	b.n	8003574 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003556:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800355a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800355e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800356e:	f043 030b 	orr.w	r3, r3, #11
 8003572:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003582:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003586:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003598:	461a      	mov	r2, r3
 800359a:	f004 f8a5 	bl	80076e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80035ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 ffd3 	bl	800755e <USB_ReadInterrupts>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c2:	d124      	bne.n	800360e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 f869 	bl	80076a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 f909 	bl	80067ea <USB_GetDevSpeed>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681c      	ldr	r4, [r3, #0]
 80035e4:	f001 fa9e 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 80035e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	4620      	mov	r0, r4
 80035f4:	f002 fe46 	bl	8006284 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f005 ffce 	bl	800959a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800360c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f003 ffa3 	bl	800755e <USB_ReadInterrupts>
 8003618:	4603      	mov	r3, r0
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d10a      	bne.n	8003638 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f005 ffab 	bl	800957e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f002 0208 	and.w	r2, r2, #8
 8003636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f003 ff8e 	bl	800755e <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800364c:	d10f      	bne.n	800366e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	b2db      	uxtb	r3, r3
 8003656:	4619      	mov	r1, r3
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f006 f803 	bl	8009664 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800366c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f003 ff73 	bl	800755e <USB_ReadInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800367e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003682:	d10f      	bne.n	80036a4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	b2db      	uxtb	r3, r3
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f005 ffd6 	bl	8009640 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80036a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 ff58 	bl	800755e <USB_ReadInterrupts>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b8:	d10a      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f005 ffe4 	bl	8009688 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 ff42 	bl	800755e <USB_ReadInterrupts>
 80036da:	4603      	mov	r3, r0
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d115      	bne.n	8003710 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f005 ffd4 	bl	80096a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	e000      	b.n	8003710 <HAL_PCD_IRQHandler+0x75e>
      return;
 800370e:	bf00      	nop
    }
  }
}
 8003710:	3734      	adds	r7, #52	; 0x34
 8003712:	46bd      	mov	sp, r7
 8003714:	bd90      	pop	{r4, r7, pc}

08003716 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	460b      	mov	r3, r1
 8003720:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_PCD_SetAddress+0x1a>
 800372c:	2302      	movs	r3, #2
 800372e:	e013      	b.n	8003758 <HAL_PCD_SetAddress+0x42>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f003 fea0 	bl	800748e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	4608      	mov	r0, r1
 800376a:	4611      	mov	r1, r2
 800376c:	461a      	mov	r2, r3
 800376e:	4603      	mov	r3, r0
 8003770:	70fb      	strb	r3, [r7, #3]
 8003772:	460b      	mov	r3, r1
 8003774:	803b      	strh	r3, [r7, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800377e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003782:	2b00      	cmp	r3, #0
 8003784:	da0f      	bge.n	80037a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	3338      	adds	r3, #56	; 0x38
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	3304      	adds	r3, #4
 800379c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	705a      	strb	r2, [r3, #1]
 80037a4:	e00f      	b.n	80037c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	f003 020f 	and.w	r2, r3, #15
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	3304      	adds	r3, #4
 80037be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037d2:	883a      	ldrh	r2, [r7, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	78ba      	ldrb	r2, [r7, #2]
 80037dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d004      	beq.n	80037f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037f0:	78bb      	ldrb	r3, [r7, #2]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d102      	bne.n	80037fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_PCD_EP_Open+0xaa>
 8003806:	2302      	movs	r3, #2
 8003808:	e00e      	b.n	8003828 <HAL_PCD_EP_Open+0xc8>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	4618      	mov	r0, r3
 800381a:	f003 f80b 	bl	8006834 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003826:	7afb      	ldrb	r3, [r7, #11]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800383c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003840:	2b00      	cmp	r3, #0
 8003842:	da0f      	bge.n	8003864 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 020f 	and.w	r2, r3, #15
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	3338      	adds	r3, #56	; 0x38
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	3304      	adds	r3, #4
 800385a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	705a      	strb	r2, [r3, #1]
 8003862:	e00f      	b.n	8003884 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	f003 020f 	and.w	r2, r3, #15
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	3304      	adds	r3, #4
 800387c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	b2da      	uxtb	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_PCD_EP_Close+0x6e>
 800389a:	2302      	movs	r3, #2
 800389c:	e00e      	b.n	80038bc <HAL_PCD_EP_Close+0x8c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f003 f849 	bl	8006944 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	460b      	mov	r3, r1
 80038d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d4:	7afb      	ldrb	r3, [r7, #11]
 80038d6:	f003 020f 	and.w	r2, r3, #15
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4413      	add	r3, r2
 80038ea:	3304      	adds	r3, #4
 80038ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2200      	movs	r2, #0
 80038fe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2200      	movs	r2, #0
 8003904:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003906:	7afb      	ldrb	r3, [r7, #11]
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	b2da      	uxtb	r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d102      	bne.n	8003920 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	6979      	ldr	r1, [r7, #20]
 8003938:	f003 fb24 	bl	8006f84 <USB_EP0StartXfer>
 800393c:	e008      	b.n	8003950 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	b2db      	uxtb	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	6979      	ldr	r1, [r7, #20]
 800394c:	f003 f8d6 	bl	8006afc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	f003 020f 	and.w	r2, r3, #15
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800397c:	681b      	ldr	r3, [r3, #0]
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b086      	sub	sp, #24
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	460b      	mov	r3, r1
 8003998:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800399a:	7afb      	ldrb	r3, [r7, #11]
 800399c:	f003 020f 	and.w	r2, r3, #15
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	3338      	adds	r3, #56	; 0x38
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	3304      	adds	r3, #4
 80039b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2201      	movs	r2, #1
 80039c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ca:	7afb      	ldrb	r3, [r7, #11]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d102      	bne.n	80039e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039e4:	7afb      	ldrb	r3, [r7, #11]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	f003 fac2 	bl	8006f84 <USB_EP0StartXfer>
 8003a00:	e008      	b.n	8003a14 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6979      	ldr	r1, [r7, #20]
 8003a10:	f003 f874 	bl	8006afc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	f003 020f 	and.w	r2, r3, #15
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d901      	bls.n	8003a3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e050      	b.n	8003ade <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	da0f      	bge.n	8003a64 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	f003 020f 	and.w	r2, r3, #15
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	3338      	adds	r3, #56	; 0x38
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	4413      	add	r3, r2
 8003a58:	3304      	adds	r3, #4
 8003a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	705a      	strb	r2, [r3, #1]
 8003a62:	e00d      	b.n	8003a80 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_PCD_EP_SetStall+0x82>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e01e      	b.n	8003ade <HAL_PCD_EP_SetStall+0xc0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f003 fc19 	bl	80072e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	b2d9      	uxtb	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f003 fe0a 	bl	80076e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	f003 020f 	and.w	r2, r3, #15
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d901      	bls.n	8003b04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e042      	b.n	8003b8a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da0f      	bge.n	8003b2c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	f003 020f 	and.w	r2, r3, #15
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	3338      	adds	r3, #56	; 0x38
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	3304      	adds	r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	705a      	strb	r2, [r3, #1]
 8003b2a:	e00f      	b.n	8003b4c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	3304      	adds	r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_PCD_EP_ClrStall+0x86>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e00e      	b.n	8003b8a <HAL_PCD_EP_ClrStall+0xa4>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68f9      	ldr	r1, [r7, #12]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 fc21 	bl	80073c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b08a      	sub	sp, #40	; 0x28
 8003b96:	af02      	add	r7, sp, #8
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	3338      	adds	r3, #56	; 0x38
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d901      	bls.n	8003bca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06c      	b.n	8003ca4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d902      	bls.n	8003be6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3303      	adds	r3, #3
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bee:	e02b      	b.n	8003c48 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d902      	bls.n	8003c0c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3303      	adds	r3, #3
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	68d9      	ldr	r1, [r3, #12]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4603      	mov	r3, r0
 8003c2a:	6978      	ldr	r0, [r7, #20]
 8003c2c:	f003 fafd 	bl	800722a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	441a      	add	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	441a      	add	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d809      	bhi.n	8003c72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d203      	bcs.n	8003c72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1be      	bne.n	8003bf0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d811      	bhi.n	8003ca2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	2201      	movs	r2, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	6939      	ldr	r1, [r7, #16]
 8003c9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	333c      	adds	r3, #60	; 0x3c
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	f040 80a0 	bne.w	8003e24 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d015      	beq.n	8003d1a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a72      	ldr	r2, [pc, #456]	; (8003ebc <PCD_EP_OutXfrComplete_int+0x210>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	f240 80dd 	bls.w	8003eb2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80d7 	beq.w	8003eb2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d10:	461a      	mov	r2, r3
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	6093      	str	r3, [r2, #8]
 8003d18:	e0cb      	b.n	8003eb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	461a      	mov	r2, r3
 8003d32:	2320      	movs	r3, #32
 8003d34:	6093      	str	r3, [r2, #8]
 8003d36:	e0bc      	b.n	8003eb2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f040 80b7 	bne.w	8003eb2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a5d      	ldr	r2, [pc, #372]	; (8003ebc <PCD_EP_OutXfrComplete_int+0x210>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d90f      	bls.n	8003d6c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d62:	461a      	mov	r2, r3
 8003d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d68:	6093      	str	r3, [r2, #8]
 8003d6a:	e0a2      	b.n	8003eb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d7e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	0159      	lsls	r1, r3, #5
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	440b      	add	r3, r1
 8003d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003d92:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4403      	add	r3, r0
 8003da2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003da6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003dba:	6819      	ldr	r1, [r3, #0]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4403      	add	r3, r0
 8003dca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4419      	add	r1, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4403      	add	r3, r0
 8003de0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003de4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d114      	bne.n	8003e16 <PCD_EP_OutXfrComplete_int+0x16a>
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d108      	bne.n	8003e16 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2101      	movs	r1, #1
 8003e12:	f003 fc69 	bl	80076e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f005 fb79 	bl	8009514 <HAL_PCD_DataOutStageCallback>
 8003e22:	e046      	b.n	8003eb2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a26      	ldr	r2, [pc, #152]	; (8003ec0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d124      	bne.n	8003e76 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e42:	461a      	mov	r2, r3
 8003e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e48:	6093      	str	r3, [r2, #8]
 8003e4a:	e032      	b.n	8003eb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e62:	461a      	mov	r2, r3
 8003e64:	2320      	movs	r3, #32
 8003e66:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f005 fb50 	bl	8009514 <HAL_PCD_DataOutStageCallback>
 8003e74:	e01d      	b.n	8003eb2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d114      	bne.n	8003ea6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d108      	bne.n	8003ea6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	f003 fc21 	bl	80076e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f005 fb31 	bl	8009514 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	4f54300a 	.word	0x4f54300a
 8003ec0:	4f54310a 	.word	0x4f54310a

08003ec4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	333c      	adds	r3, #60	; 0x3c
 8003edc:	3304      	adds	r3, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d90e      	bls.n	8003f18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d009      	beq.n	8003f18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	461a      	mov	r2, r3
 8003f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f005 fae9 	bl	80094f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <PCD_EP_OutSetupPacket_int+0x88>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d90c      	bls.n	8003f40 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d108      	bne.n	8003f40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	f003 fbd4 	bl	80076e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	4f54300a 	.word	0x4f54300a

08003f50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f6e:	883b      	ldrh	r3, [r7, #0]
 8003f70:	0419      	lsls	r1, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f7c:	e028      	b.n	8003fd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	4413      	add	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e00d      	b.n	8003fae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	3340      	adds	r3, #64	; 0x40
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	3301      	adds	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d3ec      	bcc.n	8003f92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fb8:	883b      	ldrh	r3, [r7, #0]
 8003fba:	0418      	lsls	r0, r3, #16
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	4302      	orrs	r2, r0
 8003fc8:	3340      	adds	r3, #64	; 0x40
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e30d      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	d903      	bls.n	800403a <HAL_RCC_OscConfig+0x22>
 8004032:	21e8      	movs	r1, #232	; 0xe8
 8004034:	48a3      	ldr	r0, [pc, #652]	; (80042c4 <HAL_RCC_OscConfig+0x2ac>)
 8004036:	f7fc ff9b 	bl	8000f70 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8088 	beq.w	8004158 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <HAL_RCC_OscConfig+0x54>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d008      	beq.n	800406c <HAL_RCC_OscConfig+0x54>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004062:	d003      	beq.n	800406c <HAL_RCC_OscConfig+0x54>
 8004064:	21ed      	movs	r1, #237	; 0xed
 8004066:	4897      	ldr	r0, [pc, #604]	; (80042c4 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	f7fc ff82 	bl	8000f70 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800406c:	4b96      	ldr	r3, [pc, #600]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 030c 	and.w	r3, r3, #12
 8004074:	2b04      	cmp	r3, #4
 8004076:	d00c      	beq.n	8004092 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004078:	4b93      	ldr	r3, [pc, #588]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004080:	2b08      	cmp	r3, #8
 8004082:	d112      	bne.n	80040aa <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004084:	4b90      	ldr	r3, [pc, #576]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004090:	d10b      	bne.n	80040aa <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004092:	4b8d      	ldr	r3, [pc, #564]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d05b      	beq.n	8004156 <HAL_RCC_OscConfig+0x13e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d157      	bne.n	8004156 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e2cd      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_OscConfig+0xaa>
 80040b4:	4b84      	ldr	r3, [pc, #528]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a83      	ldr	r2, [pc, #524]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	e01d      	b.n	80040fe <HAL_RCC_OscConfig+0xe6>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ca:	d10c      	bne.n	80040e6 <HAL_RCC_OscConfig+0xce>
 80040cc:	4b7e      	ldr	r3, [pc, #504]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a7d      	ldr	r2, [pc, #500]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80040d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a7a      	ldr	r2, [pc, #488]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80040de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	e00b      	b.n	80040fe <HAL_RCC_OscConfig+0xe6>
 80040e6:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a77      	ldr	r2, [pc, #476]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80040ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b75      	ldr	r3, [pc, #468]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a74      	ldr	r2, [pc, #464]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80040f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d013      	beq.n	800412e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004106:	f7fd fa55 	bl	80015b4 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800410e:	f7fd fa51 	bl	80015b4 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b64      	cmp	r3, #100	; 0x64
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e292      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004120:	4b69      	ldr	r3, [pc, #420]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0xf6>
 800412c:	e014      	b.n	8004158 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fd fa41 	bl	80015b4 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004136:	f7fd fa3d 	bl	80015b4 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b64      	cmp	r3, #100	; 0x64
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e27e      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004148:	4b5f      	ldr	r3, [pc, #380]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x11e>
 8004154:	e000      	b.n	8004158 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004156:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d079      	beq.n	8004258 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCC_OscConfig+0x166>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d004      	beq.n	800417e <HAL_RCC_OscConfig+0x166>
 8004174:	f240 111f 	movw	r1, #287	; 0x11f
 8004178:	4852      	ldr	r0, [pc, #328]	; (80042c4 <HAL_RCC_OscConfig+0x2ac>)
 800417a:	f7fc fef9 	bl	8000f70 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b1f      	cmp	r3, #31
 8004184:	d904      	bls.n	8004190 <HAL_RCC_OscConfig+0x178>
 8004186:	f44f 7190 	mov.w	r1, #288	; 0x120
 800418a:	484e      	ldr	r0, [pc, #312]	; (80042c4 <HAL_RCC_OscConfig+0x2ac>)
 800418c:	f7fc fef0 	bl	8000f70 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004190:	4b4d      	ldr	r3, [pc, #308]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00b      	beq.n	80041b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800419c:	4b4a      	ldr	r3, [pc, #296]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d11c      	bne.n	80041e2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a8:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d116      	bne.n	80041e2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b4:	4b44      	ldr	r3, [pc, #272]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_OscConfig+0x1b4>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e23c      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041cc:	4b3e      	ldr	r3, [pc, #248]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	493b      	ldr	r1, [pc, #236]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e0:	e03a      	b.n	8004258 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d020      	beq.n	800422c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ea:	4b38      	ldr	r3, [pc, #224]	; (80042cc <HAL_RCC_OscConfig+0x2b4>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd f9e0 	bl	80015b4 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f8:	f7fd f9dc 	bl	80015b4 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e21d      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420a:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004216:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4928      	ldr	r1, [pc, #160]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]
 800422a:	e015      	b.n	8004258 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422c:	4b27      	ldr	r3, [pc, #156]	; (80042cc <HAL_RCC_OscConfig+0x2b4>)
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fd f9bf 	bl	80015b4 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800423a:	f7fd f9bb 	bl	80015b4 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e1fc      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424c:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f0      	bne.n	800423a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d046      	beq.n	80042f2 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <HAL_RCC_OscConfig+0x266>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d004      	beq.n	800427e <HAL_RCC_OscConfig+0x266>
 8004274:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8004278:	4812      	ldr	r0, [pc, #72]	; (80042c4 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	f7fc fe79 	bl	8000f70 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d016      	beq.n	80042b4 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <HAL_RCC_OscConfig+0x2b8>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fd f992 	bl	80015b4 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004294:	f7fd f98e 	bl	80015b4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1cf      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <HAL_RCC_OscConfig+0x2b0>)
 80042a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x27c>
 80042b2:	e01e      	b.n	80042f2 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_RCC_OscConfig+0x2b8>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ba:	f7fd f97b 	bl	80015b4 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c0:	e011      	b.n	80042e6 <HAL_RCC_OscConfig+0x2ce>
 80042c2:	bf00      	nop
 80042c4:	0800a4f4 	.word	0x0800a4f4
 80042c8:	40023800 	.word	0x40023800
 80042cc:	42470000 	.word	0x42470000
 80042d0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d4:	f7fd f96e 	bl	80015b4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1af      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e6:	4b97      	ldr	r3, [pc, #604]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 80042e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80a8 	beq.w	8004450 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004300:	2300      	movs	r3, #0
 8004302:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <HAL_RCC_OscConfig+0x30e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d008      	beq.n	8004326 <HAL_RCC_OscConfig+0x30e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b05      	cmp	r3, #5
 800431a:	d004      	beq.n	8004326 <HAL_RCC_OscConfig+0x30e>
 800431c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004320:	4889      	ldr	r0, [pc, #548]	; (8004548 <HAL_RCC_OscConfig+0x530>)
 8004322:	f7fc fe25 	bl	8000f70 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004326:	4b87      	ldr	r3, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	4b83      	ldr	r3, [pc, #524]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	4a82      	ldr	r2, [pc, #520]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004340:	6413      	str	r3, [r2, #64]	; 0x40
 8004342:	4b80      	ldr	r3, [pc, #512]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004352:	4b7e      	ldr	r3, [pc, #504]	; (800454c <HAL_RCC_OscConfig+0x534>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d118      	bne.n	8004390 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435e:	4b7b      	ldr	r3, [pc, #492]	; (800454c <HAL_RCC_OscConfig+0x534>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7a      	ldr	r2, [pc, #488]	; (800454c <HAL_RCC_OscConfig+0x534>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436a:	f7fd f923 	bl	80015b4 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004372:	f7fd f91f 	bl	80015b4 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e160      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	4b71      	ldr	r3, [pc, #452]	; (800454c <HAL_RCC_OscConfig+0x534>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d106      	bne.n	80043a6 <HAL_RCC_OscConfig+0x38e>
 8004398:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a69      	ldr	r2, [pc, #420]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
 80043a4:	e01c      	b.n	80043e0 <HAL_RCC_OscConfig+0x3c8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x3b0>
 80043ae:	4b65      	ldr	r3, [pc, #404]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a64      	ldr	r2, [pc, #400]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 80043b4:	f043 0304 	orr.w	r3, r3, #4
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ba:	4b62      	ldr	r3, [pc, #392]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a61      	ldr	r2, [pc, #388]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_OscConfig+0x3c8>
 80043c8:	4b5e      	ldr	r3, [pc, #376]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a5d      	ldr	r2, [pc, #372]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	4b5b      	ldr	r3, [pc, #364]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a5a      	ldr	r2, [pc, #360]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 80043da:	f023 0304 	bic.w	r3, r3, #4
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fd f8e4 	bl	80015b4 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7fd f8e0 	bl	80015b4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e11f      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004406:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0ee      	beq.n	80043f0 <HAL_RCC_OscConfig+0x3d8>
 8004412:	e014      	b.n	800443e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004414:	f7fd f8ce 	bl	80015b4 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441a:	e00a      	b.n	8004432 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441c:	f7fd f8ca 	bl	80015b4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f241 3288 	movw	r2, #5000	; 0x1388
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e109      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004432:	4b44      	ldr	r3, [pc, #272]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1ee      	bne.n	800441c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d105      	bne.n	8004450 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004444:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	4a3e      	ldr	r2, [pc, #248]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 800444a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00c      	beq.n	8004472 <HAL_RCC_OscConfig+0x45a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d008      	beq.n	8004472 <HAL_RCC_OscConfig+0x45a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d004      	beq.n	8004472 <HAL_RCC_OscConfig+0x45a>
 8004468:	f240 11cf 	movw	r1, #463	; 0x1cf
 800446c:	4836      	ldr	r0, [pc, #216]	; (8004548 <HAL_RCC_OscConfig+0x530>)
 800446e:	f7fc fd7f 	bl	8000f70 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80e4 	beq.w	8004644 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800447c:	4b31      	ldr	r3, [pc, #196]	; (8004544 <HAL_RCC_OscConfig+0x52c>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b08      	cmp	r3, #8
 8004486:	f000 80ae 	beq.w	80045e6 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b02      	cmp	r3, #2
 8004490:	f040 8092 	bne.w	80045b8 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_RCC_OscConfig+0x498>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a4:	d004      	beq.n	80044b0 <HAL_RCC_OscConfig+0x498>
 80044a6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80044aa:	4827      	ldr	r0, [pc, #156]	; (8004548 <HAL_RCC_OscConfig+0x530>)
 80044ac:	f7fc fd60 	bl	8000f70 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	2b3f      	cmp	r3, #63	; 0x3f
 80044b6:	d904      	bls.n	80044c2 <HAL_RCC_OscConfig+0x4aa>
 80044b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80044bc:	4822      	ldr	r0, [pc, #136]	; (8004548 <HAL_RCC_OscConfig+0x530>)
 80044be:	f7fc fd57 	bl	8000f70 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	2bbf      	cmp	r3, #191	; 0xbf
 80044c8:	d904      	bls.n	80044d4 <HAL_RCC_OscConfig+0x4bc>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80044d2:	d904      	bls.n	80044de <HAL_RCC_OscConfig+0x4c6>
 80044d4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80044d8:	481b      	ldr	r0, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x530>)
 80044da:	f7fc fd49 	bl	8000f70 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d010      	beq.n	8004508 <HAL_RCC_OscConfig+0x4f0>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d00c      	beq.n	8004508 <HAL_RCC_OscConfig+0x4f0>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	2b06      	cmp	r3, #6
 80044f4:	d008      	beq.n	8004508 <HAL_RCC_OscConfig+0x4f0>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d004      	beq.n	8004508 <HAL_RCC_OscConfig+0x4f0>
 80044fe:	f240 11db 	movw	r1, #475	; 0x1db
 8004502:	4811      	ldr	r0, [pc, #68]	; (8004548 <HAL_RCC_OscConfig+0x530>)
 8004504:	f7fc fd34 	bl	8000f70 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d903      	bls.n	8004518 <HAL_RCC_OscConfig+0x500>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d904      	bls.n	8004522 <HAL_RCC_OscConfig+0x50a>
 8004518:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800451c:	480a      	ldr	r0, [pc, #40]	; (8004548 <HAL_RCC_OscConfig+0x530>)
 800451e:	f7fc fd27 	bl	8000f70 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCC_OscConfig+0x538>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd f844 	bl	80015b4 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452e:	e011      	b.n	8004554 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004530:	f7fd f840 	bl	80015b4 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d90a      	bls.n	8004554 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e081      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	0800a4f4 	.word	0x0800a4f4
 800454c:	40007000 	.word	0x40007000
 8004550:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004554:	4b3e      	ldr	r3, [pc, #248]	; (8004650 <HAL_RCC_OscConfig+0x638>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e7      	bne.n	8004530 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	019b      	lsls	r3, r3, #6
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	085b      	lsrs	r3, r3, #1
 8004578:	3b01      	subs	r3, #1
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	4932      	ldr	r1, [pc, #200]	; (8004650 <HAL_RCC_OscConfig+0x638>)
 8004586:	4313      	orrs	r3, r2
 8004588:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800458a:	4b32      	ldr	r3, [pc, #200]	; (8004654 <HAL_RCC_OscConfig+0x63c>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fd f810 	bl	80015b4 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004598:	f7fd f80c 	bl	80015b4 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e04d      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045aa:	4b29      	ldr	r3, [pc, #164]	; (8004650 <HAL_RCC_OscConfig+0x638>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x580>
 80045b6:	e045      	b.n	8004644 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b8:	4b26      	ldr	r3, [pc, #152]	; (8004654 <HAL_RCC_OscConfig+0x63c>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045be:	f7fc fff9 	bl	80015b4 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c6:	f7fc fff5 	bl	80015b4 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e036      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCC_OscConfig+0x638>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x5ae>
 80045e4:	e02e      	b.n	8004644 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e029      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045f2:	4b17      	ldr	r3, [pc, #92]	; (8004650 <HAL_RCC_OscConfig+0x638>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	429a      	cmp	r2, r3
 8004604:	d11c      	bne.n	8004640 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004610:	429a      	cmp	r2, r3
 8004612:	d115      	bne.n	8004640 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800461a:	4013      	ands	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004620:	4293      	cmp	r3, r2
 8004622:	d10d      	bne.n	8004640 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d106      	bne.n	8004640 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	42470060 	.word	0x42470060

08004658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e174      	b.n	8004956 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCC_ClockConfig+0x24>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b0f      	cmp	r3, #15
 800467a:	d904      	bls.n	8004686 <HAL_RCC_ClockConfig+0x2e>
 800467c:	f240 2151 	movw	r1, #593	; 0x251
 8004680:	487b      	ldr	r0, [pc, #492]	; (8004870 <HAL_RCC_ClockConfig+0x218>)
 8004682:	f7fc fc75 	bl	8000f70 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d019      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x68>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d016      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x68>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d013      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x68>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d010      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x68>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d00d      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x68>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x68>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b06      	cmp	r3, #6
 80046ae:	d007      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x68>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b07      	cmp	r3, #7
 80046b4:	d004      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x68>
 80046b6:	f240 2152 	movw	r1, #594	; 0x252
 80046ba:	486d      	ldr	r0, [pc, #436]	; (8004870 <HAL_RCC_ClockConfig+0x218>)
 80046bc:	f7fc fc58 	bl	8000f70 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c0:	4b6c      	ldr	r3, [pc, #432]	; (8004874 <HAL_RCC_ClockConfig+0x21c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d90c      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b69      	ldr	r3, [pc, #420]	; (8004874 <HAL_RCC_ClockConfig+0x21c>)
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b67      	ldr	r3, [pc, #412]	; (8004874 <HAL_RCC_ClockConfig+0x21c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e136      	b.n	8004956 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d049      	beq.n	8004788 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004700:	4b5d      	ldr	r3, [pc, #372]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4a5c      	ldr	r2, [pc, #368]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 8004706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800470a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004718:	4b57      	ldr	r3, [pc, #348]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	4a56      	ldr	r2, [pc, #344]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 800471e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d024      	beq.n	8004776 <HAL_RCC_ClockConfig+0x11e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b80      	cmp	r3, #128	; 0x80
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x11e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b90      	cmp	r3, #144	; 0x90
 800473a:	d01c      	beq.n	8004776 <HAL_RCC_ClockConfig+0x11e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2ba0      	cmp	r3, #160	; 0xa0
 8004742:	d018      	beq.n	8004776 <HAL_RCC_ClockConfig+0x11e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2bb0      	cmp	r3, #176	; 0xb0
 800474a:	d014      	beq.n	8004776 <HAL_RCC_ClockConfig+0x11e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2bc0      	cmp	r3, #192	; 0xc0
 8004752:	d010      	beq.n	8004776 <HAL_RCC_ClockConfig+0x11e>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2bd0      	cmp	r3, #208	; 0xd0
 800475a:	d00c      	beq.n	8004776 <HAL_RCC_ClockConfig+0x11e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2be0      	cmp	r3, #224	; 0xe0
 8004762:	d008      	beq.n	8004776 <HAL_RCC_ClockConfig+0x11e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2bf0      	cmp	r3, #240	; 0xf0
 800476a:	d004      	beq.n	8004776 <HAL_RCC_ClockConfig+0x11e>
 800476c:	f240 2175 	movw	r1, #629	; 0x275
 8004770:	483f      	ldr	r0, [pc, #252]	; (8004870 <HAL_RCC_ClockConfig+0x218>)
 8004772:	f7fc fbfd 	bl	8000f70 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004776:	4b40      	ldr	r3, [pc, #256]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	493d      	ldr	r1, [pc, #244]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d059      	beq.n	8004848 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d010      	beq.n	80047be <HAL_RCC_ClockConfig+0x166>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d00c      	beq.n	80047be <HAL_RCC_ClockConfig+0x166>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d008      	beq.n	80047be <HAL_RCC_ClockConfig+0x166>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d004      	beq.n	80047be <HAL_RCC_ClockConfig+0x166>
 80047b4:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80047b8:	482d      	ldr	r0, [pc, #180]	; (8004870 <HAL_RCC_ClockConfig+0x218>)
 80047ba:	f7fc fbd9 	bl	8000f70 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d119      	bne.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e0bf      	b.n	8004956 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d003      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e0af      	b.n	8004956 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e0a7      	b.n	8004956 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004806:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 0203 	bic.w	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4919      	ldr	r1, [pc, #100]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 8004814:	4313      	orrs	r3, r2
 8004816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004818:	f7fc fecc 	bl	80015b4 <HAL_GetTick>
 800481c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	e00a      	b.n	8004836 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004820:	f7fc fec8 	bl	80015b4 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e08f      	b.n	8004956 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_RCC_ClockConfig+0x220>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 020c 	and.w	r2, r3, #12
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	429a      	cmp	r2, r3
 8004846:	d1eb      	bne.n	8004820 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_RCC_ClockConfig+0x21c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d212      	bcs.n	800487c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b07      	ldr	r3, [pc, #28]	; (8004874 <HAL_RCC_ClockConfig+0x21c>)
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCC_ClockConfig+0x21c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d007      	beq.n	800487c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e072      	b.n	8004956 <HAL_RCC_ClockConfig+0x2fe>
 8004870:	0800a4f4 	.word	0x0800a4f4
 8004874:	40023c00 	.word	0x40023c00
 8004878:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d025      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d018      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x26a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004898:	d013      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x26a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048a2:	d00e      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x26a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80048ac:	d009      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x26a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80048b6:	d004      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x26a>
 80048b8:	f240 21ba 	movw	r1, #698	; 0x2ba
 80048bc:	4828      	ldr	r0, [pc, #160]	; (8004960 <HAL_RCC_ClockConfig+0x308>)
 80048be:	f7fc fb57 	bl	8000f70 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c2:	4b28      	ldr	r3, [pc, #160]	; (8004964 <HAL_RCC_ClockConfig+0x30c>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	4925      	ldr	r1, [pc, #148]	; (8004964 <HAL_RCC_ClockConfig+0x30c>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d026      	beq.n	800492e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d018      	beq.n	800491a <HAL_RCC_ClockConfig+0x2c2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f0:	d013      	beq.n	800491a <HAL_RCC_ClockConfig+0x2c2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048fa:	d00e      	beq.n	800491a <HAL_RCC_ClockConfig+0x2c2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004904:	d009      	beq.n	800491a <HAL_RCC_ClockConfig+0x2c2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800490e:	d004      	beq.n	800491a <HAL_RCC_ClockConfig+0x2c2>
 8004910:	f240 21c1 	movw	r1, #705	; 0x2c1
 8004914:	4812      	ldr	r0, [pc, #72]	; (8004960 <HAL_RCC_ClockConfig+0x308>)
 8004916:	f7fc fb2b 	bl	8000f70 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_RCC_ClockConfig+0x30c>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	490e      	ldr	r1, [pc, #56]	; (8004964 <HAL_RCC_ClockConfig+0x30c>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800492e:	f000 f821 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8004932:	4601      	mov	r1, r0
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_RCC_ClockConfig+0x30c>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x310>)
 8004940:	5cd3      	ldrb	r3, [r2, r3]
 8004942:	fa21 f303 	lsr.w	r3, r1, r3
 8004946:	4a09      	ldr	r2, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x314>)
 8004948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x318>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fc fdec 	bl	800152c <HAL_InitTick>

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	0800a4f4 	.word	0x0800a4f4
 8004964:	40023800 	.word	0x40023800
 8004968:	0800a610 	.word	0x0800a610
 800496c:	20000020 	.word	0x20000020
 8004970:	20000024 	.word	0x20000024

08004974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	2300      	movs	r3, #0
 8004984:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800498a:	4b63      	ldr	r3, [pc, #396]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	2b04      	cmp	r3, #4
 8004994:	d007      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x32>
 8004996:	2b08      	cmp	r3, #8
 8004998:	d008      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x38>
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 80b4 	bne.w	8004b08 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a0:	4b5e      	ldr	r3, [pc, #376]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049a2:	60bb      	str	r3, [r7, #8]
       break;
 80049a4:	e0b3      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049a6:	4b5e      	ldr	r3, [pc, #376]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80049a8:	60bb      	str	r3, [r7, #8]
      break;
 80049aa:	e0b0      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049ac:	4b5a      	ldr	r3, [pc, #360]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049b6:	4b58      	ldr	r3, [pc, #352]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d04a      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c2:	4b55      	ldr	r3, [pc, #340]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	f04f 0400 	mov.w	r4, #0
 80049cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	ea03 0501 	and.w	r5, r3, r1
 80049d8:	ea04 0602 	and.w	r6, r4, r2
 80049dc:	4629      	mov	r1, r5
 80049de:	4632      	mov	r2, r6
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	f04f 0400 	mov.w	r4, #0
 80049e8:	0154      	lsls	r4, r2, #5
 80049ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049ee:	014b      	lsls	r3, r1, #5
 80049f0:	4619      	mov	r1, r3
 80049f2:	4622      	mov	r2, r4
 80049f4:	1b49      	subs	r1, r1, r5
 80049f6:	eb62 0206 	sbc.w	r2, r2, r6
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	f04f 0400 	mov.w	r4, #0
 8004a02:	0194      	lsls	r4, r2, #6
 8004a04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a08:	018b      	lsls	r3, r1, #6
 8004a0a:	1a5b      	subs	r3, r3, r1
 8004a0c:	eb64 0402 	sbc.w	r4, r4, r2
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	00e2      	lsls	r2, r4, #3
 8004a1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a1e:	00d9      	lsls	r1, r3, #3
 8004a20:	460b      	mov	r3, r1
 8004a22:	4614      	mov	r4, r2
 8004a24:	195b      	adds	r3, r3, r5
 8004a26:	eb44 0406 	adc.w	r4, r4, r6
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	0262      	lsls	r2, r4, #9
 8004a34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a38:	0259      	lsls	r1, r3, #9
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4614      	mov	r4, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	4621      	mov	r1, r4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f04f 0400 	mov.w	r4, #0
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	f7fb fc20 	bl	8000290 <__aeabi_uldivmod>
 8004a50:	4603      	mov	r3, r0
 8004a52:	460c      	mov	r4, r1
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	e049      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a58:	4b2f      	ldr	r3, [pc, #188]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	f04f 0400 	mov.w	r4, #0
 8004a62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	ea03 0501 	and.w	r5, r3, r1
 8004a6e:	ea04 0602 	and.w	r6, r4, r2
 8004a72:	4629      	mov	r1, r5
 8004a74:	4632      	mov	r2, r6
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	f04f 0400 	mov.w	r4, #0
 8004a7e:	0154      	lsls	r4, r2, #5
 8004a80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a84:	014b      	lsls	r3, r1, #5
 8004a86:	4619      	mov	r1, r3
 8004a88:	4622      	mov	r2, r4
 8004a8a:	1b49      	subs	r1, r1, r5
 8004a8c:	eb62 0206 	sbc.w	r2, r2, r6
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	f04f 0400 	mov.w	r4, #0
 8004a98:	0194      	lsls	r4, r2, #6
 8004a9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a9e:	018b      	lsls	r3, r1, #6
 8004aa0:	1a5b      	subs	r3, r3, r1
 8004aa2:	eb64 0402 	sbc.w	r4, r4, r2
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	00e2      	lsls	r2, r4, #3
 8004ab0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ab4:	00d9      	lsls	r1, r3, #3
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4614      	mov	r4, r2
 8004aba:	195b      	adds	r3, r3, r5
 8004abc:	eb44 0406 	adc.w	r4, r4, r6
 8004ac0:	f04f 0100 	mov.w	r1, #0
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	02a2      	lsls	r2, r4, #10
 8004aca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ace:	0299      	lsls	r1, r3, #10
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4614      	mov	r4, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f04f 0400 	mov.w	r4, #0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	f7fb fbd5 	bl	8000290 <__aeabi_uldivmod>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	460c      	mov	r4, r1
 8004aea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	3301      	adds	r3, #1
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b04:	60bb      	str	r3, [r7, #8]
      break;
 8004b06:	e002      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b08:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b0a:	60bb      	str	r3, [r7, #8]
      break;
 8004b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	00f42400 	.word	0x00f42400
 8004b20:	007a1200 	.word	0x007a1200

08004b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000020 	.word	0x20000020

08004b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b40:	f7ff fff0 	bl	8004b24 <HAL_RCC_GetHCLKFreq>
 8004b44:	4601      	mov	r1, r0
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	0a9b      	lsrs	r3, r3, #10
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	4a03      	ldr	r2, [pc, #12]	; (8004b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b52:	5cd3      	ldrb	r3, [r2, r3]
 8004b54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	0800a620 	.word	0x0800a620

08004b64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b0f      	cmp	r3, #15
 8004b82:	d904      	bls.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004b84:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8004b88:	489d      	ldr	r0, [pc, #628]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b8a:	f7fc f9f1 	bl	8000f70 <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d105      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d060      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d903      	bls.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b07      	cmp	r3, #7
 8004bb4:	d904      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004bb6:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004bba:	4891      	ldr	r0, [pc, #580]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004bbc:	f7fc f9d8 	bl	8000f70 <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2bbf      	cmp	r3, #191	; 0xbf
 8004bc6:	d904      	bls.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004bd0:	d904      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004bd2:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004bd6:	488a      	ldr	r0, [pc, #552]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004bd8:	f7fc f9ca 	bl	8000f70 <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d903      	bls.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b3f      	cmp	r3, #63	; 0x3f
 8004bea:	d904      	bls.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004bec:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8004bf0:	4883      	ldr	r0, [pc, #524]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004bf2:	f7fc f9bd 	bl	8000f70 <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bf6:	4b83      	ldr	r3, [pc, #524]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bfc:	f7fc fcda 	bl	80015b4 <HAL_GetTick>
 8004c00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c04:	f7fc fcd6 	bl	80015b4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e1ae      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c16:	4b7c      	ldr	r3, [pc, #496]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	019b      	lsls	r3, r3, #6
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	071b      	lsls	r3, r3, #28
 8004c34:	4974      	ldr	r1, [pc, #464]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c3c:	4b71      	ldr	r3, [pc, #452]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c42:	f7fc fcb7 	bl	80015b4 <HAL_GetTick>
 8004c46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c4a:	f7fc fcb3 	bl	80015b4 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e18b      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c5c:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8174 	beq.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7e:	f000 80a6 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8a:	f000 80a0 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	4a5e      	ldr	r2, [pc, #376]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	f000 809a 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	4a5c      	ldr	r2, [pc, #368]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	f000 8094 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	4a5a      	ldr	r2, [pc, #360]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	f000 808e 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	4a58      	ldr	r2, [pc, #352]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	f000 8088 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	4a56      	ldr	r2, [pc, #344]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	f000 8082 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	4a54      	ldr	r2, [pc, #336]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d07c      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d077      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	4a51      	ldr	r2, [pc, #324]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d072      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	4a4f      	ldr	r2, [pc, #316]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d06d      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	4a4e      	ldr	r2, [pc, #312]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d068      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	4a4c      	ldr	r2, [pc, #304]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d063      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	4a4b      	ldr	r2, [pc, #300]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d05e      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	4a49      	ldr	r2, [pc, #292]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d059      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	4a48      	ldr	r2, [pc, #288]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d054      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	4a46      	ldr	r2, [pc, #280]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d04f      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	4a45      	ldr	r2, [pc, #276]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d04a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	4a43      	ldr	r2, [pc, #268]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d045      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	4a42      	ldr	r2, [pc, #264]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d040      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	4a40      	ldr	r2, [pc, #256]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d03b      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	4a3f      	ldr	r2, [pc, #252]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d036      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	4a3d      	ldr	r2, [pc, #244]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d031      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	4a3c      	ldr	r2, [pc, #240]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d02c      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	4a3a      	ldr	r2, [pc, #232]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d027      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	4a39      	ldr	r2, [pc, #228]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d022      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	4a37      	ldr	r2, [pc, #220]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01d      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d018      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	4a34      	ldr	r2, [pc, #208]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d013      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	4a33      	ldr	r2, [pc, #204]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00e      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d009      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	4a30      	ldr	r2, [pc, #192]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d004      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004dc4:	f640 2112 	movw	r1, #2578	; 0xa12
 8004dc8:	480d      	ldr	r0, [pc, #52]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004dca:	f7fc f8d1 	bl	8000f70 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	4a0c      	ldr	r2, [pc, #48]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dea:	4b26      	ldr	r3, [pc, #152]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004df6:	f7fc fbdd 	bl	80015b4 <HAL_GetTick>
 8004dfa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dfc:	e04d      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004dfe:	bf00      	nop
 8004e00:	0800a52c 	.word	0x0800a52c
 8004e04:	42470068 	.word	0x42470068
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	00020300 	.word	0x00020300
 8004e10:	00030300 	.word	0x00030300
 8004e14:	00040300 	.word	0x00040300
 8004e18:	00050300 	.word	0x00050300
 8004e1c:	00060300 	.word	0x00060300
 8004e20:	00070300 	.word	0x00070300
 8004e24:	00080300 	.word	0x00080300
 8004e28:	00090300 	.word	0x00090300
 8004e2c:	000a0300 	.word	0x000a0300
 8004e30:	000b0300 	.word	0x000b0300
 8004e34:	000c0300 	.word	0x000c0300
 8004e38:	000d0300 	.word	0x000d0300
 8004e3c:	000e0300 	.word	0x000e0300
 8004e40:	000f0300 	.word	0x000f0300
 8004e44:	00100300 	.word	0x00100300
 8004e48:	00110300 	.word	0x00110300
 8004e4c:	00120300 	.word	0x00120300
 8004e50:	00130300 	.word	0x00130300
 8004e54:	00140300 	.word	0x00140300
 8004e58:	00150300 	.word	0x00150300
 8004e5c:	00160300 	.word	0x00160300
 8004e60:	00170300 	.word	0x00170300
 8004e64:	00180300 	.word	0x00180300
 8004e68:	00190300 	.word	0x00190300
 8004e6c:	001a0300 	.word	0x001a0300
 8004e70:	001b0300 	.word	0x001b0300
 8004e74:	001c0300 	.word	0x001c0300
 8004e78:	001d0300 	.word	0x001d0300
 8004e7c:	001e0300 	.word	0x001e0300
 8004e80:	001f0300 	.word	0x001f0300
 8004e84:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e88:	f7fc fb94 	bl	80015b4 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e06c      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e9a:	4b38      	ldr	r3, [pc, #224]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ea6:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eae:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d02f      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d028      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec4:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ecc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ece:	4b2d      	ldr	r3, [pc, #180]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed4:	4b2b      	ldr	r3, [pc, #172]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004eda:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ee0:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d114      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fc fb62 	bl	80015b4 <HAL_GetTick>
 8004ef0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef4:	f7fc fb5e 	bl	80015b4 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e034      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0ee      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f22:	d10d      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8004f24:	4b16      	ldr	r3, [pc, #88]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f38:	4911      	ldr	r1, [pc, #68]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
 8004f3e:	e005      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004f40:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a0e      	ldr	r2, [pc, #56]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f4a:	6093      	str	r3, [r2, #8]
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f58:	4909      	ldr	r1, [pc, #36]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	7d1a      	ldrb	r2, [r3, #20]
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004f70:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	40023800 	.word	0x40023800
 8004f84:	42470e40 	.word	0x42470e40
 8004f88:	424711e0 	.word	0x424711e0

08004f8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d13f      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004faa:	4b23      	ldr	r3, [pc, #140]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fb2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d131      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fbe:	4b1f      	ldr	r3, [pc, #124]	; (800503c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fc0:	617b      	str	r3, [r7, #20]
          break;
 8004fc2:	e031      	b.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fc4:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd0:	d109      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004fd2:	4b19      	ldr	r3, [pc, #100]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fdc:	4a18      	ldr	r2, [pc, #96]	; (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004fe6:	4b14      	ldr	r3, [pc, #80]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff0:	4a14      	ldr	r2, [pc, #80]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffe:	099b      	lsrs	r3, r3, #6
 8005000:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800500e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005012:	0f1b      	lsrs	r3, r3, #28
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	fbb2 f3f3 	udiv	r3, r2, r3
 800501e:	617b      	str	r3, [r7, #20]
          break;
 8005020:	e002      	b.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
          break;
 8005026:	bf00      	nop
        }
      }
      break;
 8005028:	bf00      	nop
    }
  }
  return frequency;
 800502a:	697b      	ldr	r3, [r7, #20]
}
 800502c:	4618      	mov	r0, r3
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40023800 	.word	0x40023800
 800503c:	00bb8000 	.word	0x00bb8000
 8005040:	007a1200 	.word	0x007a1200
 8005044:	00f42400 	.word	0x00f42400

08005048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e113      	b.n	8005282 <HAL_SPI_Init+0x23a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a8b      	ldr	r2, [pc, #556]	; (800528c <HAL_SPI_Init+0x244>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <HAL_SPI_Init+0x4e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a89      	ldr	r2, [pc, #548]	; (8005290 <HAL_SPI_Init+0x248>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <HAL_SPI_Init+0x4e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a88      	ldr	r2, [pc, #544]	; (8005294 <HAL_SPI_Init+0x24c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <HAL_SPI_Init+0x4e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a86      	ldr	r2, [pc, #536]	; (8005298 <HAL_SPI_Init+0x250>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_SPI_Init+0x4e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a85      	ldr	r2, [pc, #532]	; (800529c <HAL_SPI_Init+0x254>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_SPI_Init+0x4e>
 800508c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8005090:	4883      	ldr	r0, [pc, #524]	; (80052a0 <HAL_SPI_Init+0x258>)
 8005092:	f7fb ff6d 	bl	8000f70 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <HAL_SPI_Init+0x6a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a6:	d004      	beq.n	80050b2 <HAL_SPI_Init+0x6a>
 80050a8:	f240 1143 	movw	r1, #323	; 0x143
 80050ac:	487c      	ldr	r0, [pc, #496]	; (80052a0 <HAL_SPI_Init+0x258>)
 80050ae:	f7fb ff5f 	bl	8000f70 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00e      	beq.n	80050d8 <HAL_SPI_Init+0x90>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c2:	d009      	beq.n	80050d8 <HAL_SPI_Init+0x90>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050cc:	d004      	beq.n	80050d8 <HAL_SPI_Init+0x90>
 80050ce:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80050d2:	4873      	ldr	r0, [pc, #460]	; (80052a0 <HAL_SPI_Init+0x258>)
 80050d4:	f7fb ff4c 	bl	8000f70 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e0:	d008      	beq.n	80050f4 <HAL_SPI_Init+0xac>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <HAL_SPI_Init+0xac>
 80050ea:	f240 1145 	movw	r1, #325	; 0x145
 80050ee:	486c      	ldr	r0, [pc, #432]	; (80052a0 <HAL_SPI_Init+0x258>)
 80050f0:	f7fb ff3e 	bl	8000f70 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050fc:	d00d      	beq.n	800511a <HAL_SPI_Init+0xd2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <HAL_SPI_Init+0xd2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800510e:	d004      	beq.n	800511a <HAL_SPI_Init+0xd2>
 8005110:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005114:	4862      	ldr	r0, [pc, #392]	; (80052a0 <HAL_SPI_Init+0x258>)
 8005116:	f7fb ff2b 	bl	8000f70 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <HAL_SPI_Init+0x11c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	2b08      	cmp	r3, #8
 8005128:	d01c      	beq.n	8005164 <HAL_SPI_Init+0x11c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	2b10      	cmp	r3, #16
 8005130:	d018      	beq.n	8005164 <HAL_SPI_Init+0x11c>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	2b18      	cmp	r3, #24
 8005138:	d014      	beq.n	8005164 <HAL_SPI_Init+0x11c>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	2b20      	cmp	r3, #32
 8005140:	d010      	beq.n	8005164 <HAL_SPI_Init+0x11c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	2b28      	cmp	r3, #40	; 0x28
 8005148:	d00c      	beq.n	8005164 <HAL_SPI_Init+0x11c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	2b30      	cmp	r3, #48	; 0x30
 8005150:	d008      	beq.n	8005164 <HAL_SPI_Init+0x11c>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	2b38      	cmp	r3, #56	; 0x38
 8005158:	d004      	beq.n	8005164 <HAL_SPI_Init+0x11c>
 800515a:	f240 1147 	movw	r1, #327	; 0x147
 800515e:	4850      	ldr	r0, [pc, #320]	; (80052a0 <HAL_SPI_Init+0x258>)
 8005160:	f7fb ff06 	bl	8000f70 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_SPI_Init+0x136>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d004      	beq.n	800517e <HAL_SPI_Init+0x136>
 8005174:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005178:	4849      	ldr	r0, [pc, #292]	; (80052a0 <HAL_SPI_Init+0x258>)
 800517a:	f7fb fef9 	bl	8000f70 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_SPI_Init+0x150>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	2b10      	cmp	r3, #16
 800518c:	d004      	beq.n	8005198 <HAL_SPI_Init+0x150>
 800518e:	f240 1149 	movw	r1, #329	; 0x149
 8005192:	4843      	ldr	r0, [pc, #268]	; (80052a0 <HAL_SPI_Init+0x258>)
 8005194:	f7fb feec 	bl	8000f70 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	2b00      	cmp	r3, #0
 800519e:	d119      	bne.n	80051d4 <HAL_SPI_Init+0x18c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_SPI_Init+0x172>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d004      	beq.n	80051ba <HAL_SPI_Init+0x172>
 80051b0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80051b4:	483a      	ldr	r0, [pc, #232]	; (80052a0 <HAL_SPI_Init+0x258>)
 80051b6:	f7fb fedb 	bl	8000f70 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_SPI_Init+0x18c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d004      	beq.n	80051d4 <HAL_SPI_Init+0x18c>
 80051ca:	f240 114d 	movw	r1, #333	; 0x14d
 80051ce:	4834      	ldr	r0, [pc, #208]	; (80052a0 <HAL_SPI_Init+0x258>)
 80051d0:	f7fb fece 	bl	8000f70 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_SPI_Init+0x1ac>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fb ff00 	bl	8000ff4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	ea42 0103 	orr.w	r1, r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	f003 0104 	and.w	r1, r3, #4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69da      	ldr	r2, [r3, #28]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005270:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40013000 	.word	0x40013000
 8005290:	40003800 	.word	0x40003800
 8005294:	40003c00 	.word	0x40003c00
 8005298:	40013400 	.word	0x40013400
 800529c:	40015000 	.word	0x40015000
 80052a0:	0800a568 	.word	0x0800a568

080052a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e083      	b.n	80053be <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a43      	ldr	r2, [pc, #268]	; (80053c8 <HAL_TIM_Base_Init+0x124>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d027      	beq.n	8005310 <HAL_TIM_Base_Init+0x6c>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d022      	beq.n	8005310 <HAL_TIM_Base_Init+0x6c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a3f      	ldr	r2, [pc, #252]	; (80053cc <HAL_TIM_Base_Init+0x128>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d01d      	beq.n	8005310 <HAL_TIM_Base_Init+0x6c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a3d      	ldr	r2, [pc, #244]	; (80053d0 <HAL_TIM_Base_Init+0x12c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d018      	beq.n	8005310 <HAL_TIM_Base_Init+0x6c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a3c      	ldr	r2, [pc, #240]	; (80053d4 <HAL_TIM_Base_Init+0x130>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d013      	beq.n	8005310 <HAL_TIM_Base_Init+0x6c>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a3a      	ldr	r2, [pc, #232]	; (80053d8 <HAL_TIM_Base_Init+0x134>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00e      	beq.n	8005310 <HAL_TIM_Base_Init+0x6c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a39      	ldr	r2, [pc, #228]	; (80053dc <HAL_TIM_Base_Init+0x138>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d009      	beq.n	8005310 <HAL_TIM_Base_Init+0x6c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a37      	ldr	r2, [pc, #220]	; (80053e0 <HAL_TIM_Base_Init+0x13c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d004      	beq.n	8005310 <HAL_TIM_Base_Init+0x6c>
 8005306:	f44f 7189 	mov.w	r1, #274	; 0x112
 800530a:	4836      	ldr	r0, [pc, #216]	; (80053e4 <HAL_TIM_Base_Init+0x140>)
 800530c:	f7fb fe30 	bl	8000f70 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d014      	beq.n	8005342 <HAL_TIM_Base_Init+0x9e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b10      	cmp	r3, #16
 800531e:	d010      	beq.n	8005342 <HAL_TIM_Base_Init+0x9e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b20      	cmp	r3, #32
 8005326:	d00c      	beq.n	8005342 <HAL_TIM_Base_Init+0x9e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b40      	cmp	r3, #64	; 0x40
 800532e:	d008      	beq.n	8005342 <HAL_TIM_Base_Init+0x9e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b60      	cmp	r3, #96	; 0x60
 8005336:	d004      	beq.n	8005342 <HAL_TIM_Base_Init+0x9e>
 8005338:	f240 1113 	movw	r1, #275	; 0x113
 800533c:	4829      	ldr	r0, [pc, #164]	; (80053e4 <HAL_TIM_Base_Init+0x140>)
 800533e:	f7fb fe17 	bl	8000f70 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00e      	beq.n	8005368 <HAL_TIM_Base_Init+0xc4>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005352:	d009      	beq.n	8005368 <HAL_TIM_Base_Init+0xc4>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800535c:	d004      	beq.n	8005368 <HAL_TIM_Base_Init+0xc4>
 800535e:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005362:	4820      	ldr	r0, [pc, #128]	; (80053e4 <HAL_TIM_Base_Init+0x140>)
 8005364:	f7fb fe04 	bl	8000f70 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_TIM_Base_Init+0xde>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	2b80      	cmp	r3, #128	; 0x80
 8005376:	d004      	beq.n	8005382 <HAL_TIM_Base_Init+0xde>
 8005378:	f240 1115 	movw	r1, #277	; 0x115
 800537c:	4819      	ldr	r0, [pc, #100]	; (80053e4 <HAL_TIM_Base_Init+0x140>)
 800537e:	f7fb fdf7 	bl	8000f70 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fb fff2 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f000 fc5c 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40014400 	.word	0x40014400
 80053e0:	40014800 	.word	0x40014800
 80053e4:	0800a5a0 	.word	0x0800a5a0

080053e8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a27      	ldr	r2, [pc, #156]	; (8005494 <HAL_TIM_Base_Stop+0xac>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_TIM_Base_Stop+0x62>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005402:	d022      	beq.n	800544a <HAL_TIM_Base_Stop+0x62>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a23      	ldr	r2, [pc, #140]	; (8005498 <HAL_TIM_Base_Stop+0xb0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_TIM_Base_Stop+0x62>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a22      	ldr	r2, [pc, #136]	; (800549c <HAL_TIM_Base_Stop+0xb4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_TIM_Base_Stop+0x62>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a20      	ldr	r2, [pc, #128]	; (80054a0 <HAL_TIM_Base_Stop+0xb8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_TIM_Base_Stop+0x62>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <HAL_TIM_Base_Stop+0xbc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_TIM_Base_Stop+0x62>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1d      	ldr	r2, [pc, #116]	; (80054a8 <HAL_TIM_Base_Stop+0xc0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_TIM_Base_Stop+0x62>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <HAL_TIM_Base_Stop+0xc4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_TIM_Base_Stop+0x62>
 8005440:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8005444:	481a      	ldr	r0, [pc, #104]	; (80054b0 <HAL_TIM_Base_Stop+0xc8>)
 8005446:	f7fb fd93 	bl	8000f70 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6a1a      	ldr	r2, [r3, #32]
 8005458:	f241 1311 	movw	r3, #4369	; 0x1111
 800545c:	4013      	ands	r3, r2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <HAL_TIM_Base_Stop+0x9a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a1a      	ldr	r2, [r3, #32]
 8005468:	f240 4344 	movw	r3, #1092	; 0x444
 800546c:	4013      	ands	r3, r2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d107      	bne.n	8005482 <HAL_TIM_Base_Stop+0x9a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40010000 	.word	0x40010000
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800
 80054b0:	0800a5a0 	.word	0x0800a5a0

080054b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a24      	ldr	r2, [pc, #144]	; (8005554 <HAL_TIM_Base_Start_IT+0xa0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d027      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0x62>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ce:	d022      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0x62>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a20      	ldr	r2, [pc, #128]	; (8005558 <HAL_TIM_Base_Start_IT+0xa4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01d      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0x62>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1f      	ldr	r2, [pc, #124]	; (800555c <HAL_TIM_Base_Start_IT+0xa8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0x62>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <HAL_TIM_Base_Start_IT+0xac>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0x62>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <HAL_TIM_Base_Start_IT+0xb0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0x62>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1a      	ldr	r2, [pc, #104]	; (8005568 <HAL_TIM_Base_Start_IT+0xb4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0x62>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a19      	ldr	r2, [pc, #100]	; (800556c <HAL_TIM_Base_Start_IT+0xb8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0x62>
 800550c:	f240 11b9 	movw	r1, #441	; 0x1b9
 8005510:	4817      	ldr	r0, [pc, #92]	; (8005570 <HAL_TIM_Base_Start_IT+0xbc>)
 8005512:	f7fb fd2d 	bl	8000f70 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0201 	orr.w	r2, r2, #1
 8005524:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b06      	cmp	r3, #6
 8005536:	d007      	beq.n	8005548 <HAL_TIM_Base_Start_IT+0x94>
  {
    __HAL_TIM_ENABLE(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40010000 	.word	0x40010000
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40014000 	.word	0x40014000
 8005568:	40014400 	.word	0x40014400
 800556c:	40014800 	.word	0x40014800
 8005570:	0800a5a0 	.word	0x0800a5a0

08005574 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e083      	b.n	800568e <HAL_TIM_PWM_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a43      	ldr	r2, [pc, #268]	; (8005698 <HAL_TIM_PWM_Init+0x124>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d027      	beq.n	80055e0 <HAL_TIM_PWM_Init+0x6c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d022      	beq.n	80055e0 <HAL_TIM_PWM_Init+0x6c>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a3f      	ldr	r2, [pc, #252]	; (800569c <HAL_TIM_PWM_Init+0x128>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d01d      	beq.n	80055e0 <HAL_TIM_PWM_Init+0x6c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a3d      	ldr	r2, [pc, #244]	; (80056a0 <HAL_TIM_PWM_Init+0x12c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d018      	beq.n	80055e0 <HAL_TIM_PWM_Init+0x6c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a3c      	ldr	r2, [pc, #240]	; (80056a4 <HAL_TIM_PWM_Init+0x130>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d013      	beq.n	80055e0 <HAL_TIM_PWM_Init+0x6c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a3a      	ldr	r2, [pc, #232]	; (80056a8 <HAL_TIM_PWM_Init+0x134>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00e      	beq.n	80055e0 <HAL_TIM_PWM_Init+0x6c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a39      	ldr	r2, [pc, #228]	; (80056ac <HAL_TIM_PWM_Init+0x138>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d009      	beq.n	80055e0 <HAL_TIM_PWM_Init+0x6c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a37      	ldr	r2, [pc, #220]	; (80056b0 <HAL_TIM_PWM_Init+0x13c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <HAL_TIM_PWM_Init+0x6c>
 80055d6:	f240 419b 	movw	r1, #1179	; 0x49b
 80055da:	4836      	ldr	r0, [pc, #216]	; (80056b4 <HAL_TIM_PWM_Init+0x140>)
 80055dc:	f7fb fcc8 	bl	8000f70 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d014      	beq.n	8005612 <HAL_TIM_PWM_Init+0x9e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d010      	beq.n	8005612 <HAL_TIM_PWM_Init+0x9e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d00c      	beq.n	8005612 <HAL_TIM_PWM_Init+0x9e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b40      	cmp	r3, #64	; 0x40
 80055fe:	d008      	beq.n	8005612 <HAL_TIM_PWM_Init+0x9e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b60      	cmp	r3, #96	; 0x60
 8005606:	d004      	beq.n	8005612 <HAL_TIM_PWM_Init+0x9e>
 8005608:	f240 419c 	movw	r1, #1180	; 0x49c
 800560c:	4829      	ldr	r0, [pc, #164]	; (80056b4 <HAL_TIM_PWM_Init+0x140>)
 800560e:	f7fb fcaf 	bl	8000f70 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <HAL_TIM_PWM_Init+0xc4>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005622:	d009      	beq.n	8005638 <HAL_TIM_PWM_Init+0xc4>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562c:	d004      	beq.n	8005638 <HAL_TIM_PWM_Init+0xc4>
 800562e:	f240 419d 	movw	r1, #1181	; 0x49d
 8005632:	4820      	ldr	r0, [pc, #128]	; (80056b4 <HAL_TIM_PWM_Init+0x140>)
 8005634:	f7fb fc9c 	bl	8000f70 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_TIM_PWM_Init+0xde>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b80      	cmp	r3, #128	; 0x80
 8005646:	d004      	beq.n	8005652 <HAL_TIM_PWM_Init+0xde>
 8005648:	f240 419e 	movw	r1, #1182	; 0x49e
 800564c:	4819      	ldr	r0, [pc, #100]	; (80056b4 <HAL_TIM_PWM_Init+0x140>)
 800564e:	f7fb fc8f 	bl	8000f70 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb fe62 	bl	8001330 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f000 faf4 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40010000 	.word	0x40010000
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800
 80056b4:	0800a5a0 	.word	0x0800a5a0

080056b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d122      	bne.n	8005714 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d11b      	bne.n	8005714 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0202 	mvn.w	r2, #2
 80056e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa98 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 8005700:	e005      	b.n	800570e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fa8a 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fa9b 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b04      	cmp	r3, #4
 8005720:	d122      	bne.n	8005768 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b04      	cmp	r3, #4
 800572e:	d11b      	bne.n	8005768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0204 	mvn.w	r2, #4
 8005738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa6e 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 8005754:	e005      	b.n	8005762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fa60 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fa71 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b08      	cmp	r3, #8
 8005774:	d122      	bne.n	80057bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b08      	cmp	r3, #8
 8005782:	d11b      	bne.n	80057bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0208 	mvn.w	r2, #8
 800578c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2204      	movs	r2, #4
 8005792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f003 0303 	and.w	r3, r3, #3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fa44 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 80057a8:	e005      	b.n	80057b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fa36 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fa47 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0310 	and.w	r3, r3, #16
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d122      	bne.n	8005810 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d11b      	bne.n	8005810 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0210 	mvn.w	r2, #16
 80057e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2208      	movs	r2, #8
 80057e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa1a 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa0c 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fa1d 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d10e      	bne.n	800583c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b01      	cmp	r3, #1
 800582a:	d107      	bne.n	800583c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0201 	mvn.w	r2, #1
 8005834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fb f994 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005846:	2b80      	cmp	r3, #128	; 0x80
 8005848:	d10e      	bne.n	8005868 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005854:	2b80      	cmp	r3, #128	; 0x80
 8005856:	d107      	bne.n	8005868 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fca2 	bl	80061ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b40      	cmp	r3, #64	; 0x40
 8005874:	d10e      	bne.n	8005894 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d107      	bne.n	8005894 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800588c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9e2 	bl	8005c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0320 	and.w	r3, r3, #32
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d10e      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d107      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0220 	mvn.w	r2, #32
 80058b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fc6c 	bl	8006198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058c0:	bf00      	nop
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d010      	beq.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x34>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d00d      	beq.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x34>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d00a      	beq.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x34>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b0c      	cmp	r3, #12
 80058ea:	d007      	beq.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x34>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b3c      	cmp	r3, #60	; 0x3c
 80058f0:	d004      	beq.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x34>
 80058f2:	f640 51ec 	movw	r1, #3564	; 0xdec
 80058f6:	4895      	ldr	r0, [pc, #596]	; (8005b4c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80058f8:	f7fb fb3a 	bl	8000f70 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b60      	cmp	r3, #96	; 0x60
 8005902:	d008      	beq.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b70      	cmp	r3, #112	; 0x70
 800590a:	d004      	beq.n	8005916 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800590c:	f640 51ed 	movw	r1, #3565	; 0xded
 8005910:	488e      	ldr	r0, [pc, #568]	; (8005b4c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005912:	f7fb fb2d 	bl	8000f70 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <HAL_TIM_PWM_ConfigChannel+0x68>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d004      	beq.n	8005930 <HAL_TIM_PWM_ConfigChannel+0x68>
 8005926:	f640 51ee 	movw	r1, #3566	; 0xdee
 800592a:	4888      	ldr	r0, [pc, #544]	; (8005b4c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800592c:	f7fb fb20 	bl	8000f70 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b04      	cmp	r3, #4
 800593e:	d004      	beq.n	800594a <HAL_TIM_PWM_ConfigChannel+0x82>
 8005940:	f640 51ef 	movw	r1, #3567	; 0xdef
 8005944:	4881      	ldr	r0, [pc, #516]	; (8005b4c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005946:	f7fb fb13 	bl	8000f70 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_TIM_PWM_ConfigChannel+0x90>
 8005954:	2302      	movs	r3, #2
 8005956:	e152      	b.n	8005bfe <HAL_TIM_PWM_ConfigChannel+0x336>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b0c      	cmp	r3, #12
 800596c:	f200 813d 	bhi.w	8005bea <HAL_TIM_PWM_ConfigChannel+0x322>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	080059ad 	.word	0x080059ad
 800597c:	08005beb 	.word	0x08005beb
 8005980:	08005beb 	.word	0x08005beb
 8005984:	08005beb 	.word	0x08005beb
 8005988:	08005a47 	.word	0x08005a47
 800598c:	08005beb 	.word	0x08005beb
 8005990:	08005beb 	.word	0x08005beb
 8005994:	08005beb 	.word	0x08005beb
 8005998:	08005acf 	.word	0x08005acf
 800599c:	08005beb 	.word	0x08005beb
 80059a0:	08005beb 	.word	0x08005beb
 80059a4:	08005beb 	.word	0x08005beb
 80059a8:	08005b6d 	.word	0x08005b6d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a67      	ldr	r2, [pc, #412]	; (8005b50 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d027      	beq.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059be:	d022      	beq.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a63      	ldr	r2, [pc, #396]	; (8005b54 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01d      	beq.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a62      	ldr	r2, [pc, #392]	; (8005b58 <HAL_TIM_PWM_ConfigChannel+0x290>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d018      	beq.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a60      	ldr	r2, [pc, #384]	; (8005b5c <HAL_TIM_PWM_ConfigChannel+0x294>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a5f      	ldr	r2, [pc, #380]	; (8005b60 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a5d      	ldr	r2, [pc, #372]	; (8005b64 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a5c      	ldr	r2, [pc, #368]	; (8005b68 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x13e>
 80059fc:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8005a00:	4852      	ldr	r0, [pc, #328]	; (8005b4c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005a02:	f7fb fab5 	bl	8000f70 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f9ad 	bl	8005d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0208 	orr.w	r2, r2, #8
 8005a20:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0204 	bic.w	r2, r2, #4
 8005a30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6999      	ldr	r1, [r3, #24]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	619a      	str	r2, [r3, #24]
      break;
 8005a44:	e0d2      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a41      	ldr	r2, [pc, #260]	; (8005b50 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d01d      	beq.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a58:	d018      	beq.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a3d      	ldr	r2, [pc, #244]	; (8005b54 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a3b      	ldr	r2, [pc, #236]	; (8005b58 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00e      	beq.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a3a      	ldr	r2, [pc, #232]	; (8005b5c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a38      	ldr	r2, [pc, #224]	; (8005b60 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_TIM_PWM_ConfigChannel+0x1c4>
 8005a82:	f640 610c 	movw	r1, #3596	; 0xe0c
 8005a86:	4831      	ldr	r0, [pc, #196]	; (8005b4c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005a88:	f7fb fa72 	bl	8000f70 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 f9fa 	bl	8005e8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6999      	ldr	r1, [r3, #24]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	021a      	lsls	r2, r3, #8
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	619a      	str	r2, [r3, #24]
      break;
 8005acc:	e08e      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d018      	beq.n	8005b0a <HAL_TIM_PWM_ConfigChannel+0x242>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae0:	d013      	beq.n	8005b0a <HAL_TIM_PWM_ConfigChannel+0x242>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a1b      	ldr	r2, [pc, #108]	; (8005b54 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00e      	beq.n	8005b0a <HAL_TIM_PWM_ConfigChannel+0x242>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a19      	ldr	r2, [pc, #100]	; (8005b58 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_TIM_PWM_ConfigChannel+0x242>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a18      	ldr	r2, [pc, #96]	; (8005b5c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_TIM_PWM_ConfigChannel+0x242>
 8005b00:	f640 611d 	movw	r1, #3613	; 0xe1d
 8005b04:	4811      	ldr	r0, [pc, #68]	; (8005b4c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005b06:	f7fb fa33 	bl	8000f70 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fa4f 	bl	8005fb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0208 	orr.w	r2, r2, #8
 8005b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0204 	bic.w	r2, r2, #4
 8005b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	61da      	str	r2, [r3, #28]
      break;
 8005b48:	e050      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x324>
 8005b4a:	bf00      	nop
 8005b4c:	0800a5a0 	.word	0x0800a5a0
 8005b50:	40010000 	.word	0x40010000
 8005b54:	40000400 	.word	0x40000400
 8005b58:	40000800 	.word	0x40000800
 8005b5c:	40000c00 	.word	0x40000c00
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40014400 	.word	0x40014400
 8005b68:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d018      	beq.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7e:	d013      	beq.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a21      	ldr	r2, [pc, #132]	; (8005c0c <HAL_TIM_PWM_ConfigChannel+0x344>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00e      	beq.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a20      	ldr	r2, [pc, #128]	; (8005c10 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d009      	beq.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <HAL_TIM_PWM_ConfigChannel+0x34c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d004      	beq.n	8005ba8 <HAL_TIM_PWM_ConfigChannel+0x2e0>
 8005b9e:	f640 612e 	movw	r1, #3630	; 0xe2e
 8005ba2:	481d      	ldr	r0, [pc, #116]	; (8005c18 <HAL_TIM_PWM_ConfigChannel+0x350>)
 8005ba4:	f7fb f9e4 	bl	8000f70 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fa94 	bl	80060dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bc2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69d9      	ldr	r1, [r3, #28]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	021a      	lsls	r2, r3, #8
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	61da      	str	r2, [r3, #28]
      break;
 8005be8:	e000      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      break;
 8005bea:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	0800a5a0 	.word	0x0800a5a0

08005c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a34      	ldr	r2, [pc, #208]	; (8005d50 <TIM_Base_SetConfig+0xe4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00f      	beq.n	8005ca4 <TIM_Base_SetConfig+0x38>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8a:	d00b      	beq.n	8005ca4 <TIM_Base_SetConfig+0x38>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a31      	ldr	r2, [pc, #196]	; (8005d54 <TIM_Base_SetConfig+0xe8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d007      	beq.n	8005ca4 <TIM_Base_SetConfig+0x38>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a30      	ldr	r2, [pc, #192]	; (8005d58 <TIM_Base_SetConfig+0xec>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_Base_SetConfig+0x38>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a2f      	ldr	r2, [pc, #188]	; (8005d5c <TIM_Base_SetConfig+0xf0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d108      	bne.n	8005cb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a25      	ldr	r2, [pc, #148]	; (8005d50 <TIM_Base_SetConfig+0xe4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01b      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc4:	d017      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a22      	ldr	r2, [pc, #136]	; (8005d54 <TIM_Base_SetConfig+0xe8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a21      	ldr	r2, [pc, #132]	; (8005d58 <TIM_Base_SetConfig+0xec>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00f      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a20      	ldr	r2, [pc, #128]	; (8005d5c <TIM_Base_SetConfig+0xf0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00b      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1f      	ldr	r2, [pc, #124]	; (8005d60 <TIM_Base_SetConfig+0xf4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d007      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <TIM_Base_SetConfig+0xf8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_Base_SetConfig+0x8a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <TIM_Base_SetConfig+0xfc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d108      	bne.n	8005d08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <TIM_Base_SetConfig+0xe4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d103      	bne.n	8005d3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	615a      	str	r2, [r3, #20]
}
 8005d42:	bf00      	nop
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40014000 	.word	0x40014000
 8005d64:	40014400 	.word	0x40014400
 8005d68:	40014800 	.word	0x40014800

08005d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f023 0201 	bic.w	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0303 	bic.w	r3, r3, #3
 8005da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f023 0302 	bic.w	r3, r3, #2
 8005db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a30      	ldr	r2, [pc, #192]	; (8005e84 <TIM_OC1_SetConfig+0x118>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d119      	bne.n	8005dfc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <TIM_OC1_SetConfig+0x76>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d004      	beq.n	8005de2 <TIM_OC1_SetConfig+0x76>
 8005dd8:	f241 7102 	movw	r1, #5890	; 0x1702
 8005ddc:	482a      	ldr	r0, [pc, #168]	; (8005e88 <TIM_OC1_SetConfig+0x11c>)
 8005dde:	f7fb f8c7 	bl	8000f70 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f023 0308 	bic.w	r3, r3, #8
 8005de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f023 0304 	bic.w	r3, r3, #4
 8005dfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a21      	ldr	r2, [pc, #132]	; (8005e84 <TIM_OC1_SetConfig+0x118>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d12d      	bne.n	8005e60 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0c:	d008      	beq.n	8005e20 <TIM_OC1_SetConfig+0xb4>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <TIM_OC1_SetConfig+0xb4>
 8005e16:	f241 710f 	movw	r1, #5903	; 0x170f
 8005e1a:	481b      	ldr	r0, [pc, #108]	; (8005e88 <TIM_OC1_SetConfig+0x11c>)
 8005e1c:	f7fb f8a8 	bl	8000f70 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e28:	d008      	beq.n	8005e3c <TIM_OC1_SetConfig+0xd0>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <TIM_OC1_SetConfig+0xd0>
 8005e32:	f241 7110 	movw	r1, #5904	; 0x1710
 8005e36:	4814      	ldr	r0, [pc, #80]	; (8005e88 <TIM_OC1_SetConfig+0x11c>)
 8005e38:	f7fb f89a 	bl	8000f70 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	621a      	str	r2, [r3, #32]
}
 8005e7a:	bf00      	nop
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	0800a5a0 	.word	0x0800a5a0

08005e8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0210 	bic.w	r2, r3, #16
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f023 0320 	bic.w	r3, r3, #32
 8005ed6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a31      	ldr	r2, [pc, #196]	; (8005fac <TIM_OC2_SetConfig+0x120>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d11a      	bne.n	8005f22 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <TIM_OC2_SetConfig+0x7a>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d004      	beq.n	8005f06 <TIM_OC2_SetConfig+0x7a>
 8005efc:	f241 714d 	movw	r1, #5965	; 0x174d
 8005f00:	482b      	ldr	r0, [pc, #172]	; (8005fb0 <TIM_OC2_SetConfig+0x124>)
 8005f02:	f7fb f835 	bl	8000f70 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f20:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a21      	ldr	r2, [pc, #132]	; (8005fac <TIM_OC2_SetConfig+0x120>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d12f      	bne.n	8005f8a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f32:	d008      	beq.n	8005f46 <TIM_OC2_SetConfig+0xba>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <TIM_OC2_SetConfig+0xba>
 8005f3c:	f241 715b 	movw	r1, #5979	; 0x175b
 8005f40:	481b      	ldr	r0, [pc, #108]	; (8005fb0 <TIM_OC2_SetConfig+0x124>)
 8005f42:	f7fb f815 	bl	8000f70 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4e:	d008      	beq.n	8005f62 <TIM_OC2_SetConfig+0xd6>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <TIM_OC2_SetConfig+0xd6>
 8005f58:	f241 715c 	movw	r1, #5980	; 0x175c
 8005f5c:	4814      	ldr	r0, [pc, #80]	; (8005fb0 <TIM_OC2_SetConfig+0x124>)
 8005f5e:	f7fb f807 	bl	8000f70 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	621a      	str	r2, [r3, #32]
}
 8005fa4:	bf00      	nop
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	0800a5a0 	.word	0x0800a5a0

08005fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a31      	ldr	r2, [pc, #196]	; (80060d4 <TIM_OC3_SetConfig+0x120>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d11a      	bne.n	8006048 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d008      	beq.n	800602c <TIM_OC3_SetConfig+0x78>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	2b08      	cmp	r3, #8
 8006020:	d004      	beq.n	800602c <TIM_OC3_SetConfig+0x78>
 8006022:	f241 7198 	movw	r1, #6040	; 0x1798
 8006026:	482c      	ldr	r0, [pc, #176]	; (80060d8 <TIM_OC3_SetConfig+0x124>)
 8006028:	f7fa ffa2 	bl	8000f70 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006046:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <TIM_OC3_SetConfig+0x120>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d12f      	bne.n	80060b0 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006058:	d008      	beq.n	800606c <TIM_OC3_SetConfig+0xb8>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d004      	beq.n	800606c <TIM_OC3_SetConfig+0xb8>
 8006062:	f241 71a5 	movw	r1, #6053	; 0x17a5
 8006066:	481c      	ldr	r0, [pc, #112]	; (80060d8 <TIM_OC3_SetConfig+0x124>)
 8006068:	f7fa ff82 	bl	8000f70 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006074:	d008      	beq.n	8006088 <TIM_OC3_SetConfig+0xd4>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d004      	beq.n	8006088 <TIM_OC3_SetConfig+0xd4>
 800607e:	f241 71a6 	movw	r1, #6054	; 0x17a6
 8006082:	4815      	ldr	r0, [pc, #84]	; (80060d8 <TIM_OC3_SetConfig+0x124>)
 8006084:	f7fa ff74 	bl	8000f70 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800608e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	621a      	str	r2, [r3, #32]
}
 80060ca:	bf00      	nop
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40010000 	.word	0x40010000
 80060d8:	0800a5a0 	.word	0x0800a5a0

080060dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	031b      	lsls	r3, r3, #12
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a16      	ldr	r2, [pc, #88]	; (8006190 <TIM_OC4_SetConfig+0xb4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d117      	bne.n	800616c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006144:	d008      	beq.n	8006158 <TIM_OC4_SetConfig+0x7c>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <TIM_OC4_SetConfig+0x7c>
 800614e:	f241 71e4 	movw	r1, #6116	; 0x17e4
 8006152:	4810      	ldr	r0, [pc, #64]	; (8006194 <TIM_OC4_SetConfig+0xb8>)
 8006154:	f7fa ff0c 	bl	8000f70 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	019b      	lsls	r3, r3, #6
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	40010000 	.word	0x40010000
 8006194:	0800a5a0 	.word	0x0800a5a0

08006198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c0:	b084      	sub	sp, #16
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	f107 001c 	add.w	r0, r7, #28
 80061ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d122      	bne.n	800621e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d105      	bne.n	8006212 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 fac6 	bl	80077a4 <USB_CoreReset>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
 800621c:	e01a      	b.n	8006254 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 faba 	bl	80077a4 <USB_CoreReset>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
 8006246:	e005      	b.n	8006254 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	2b01      	cmp	r3, #1
 8006258:	d10b      	bne.n	8006272 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f043 0206 	orr.w	r2, r3, #6
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006272:	7bfb      	ldrb	r3, [r7, #15]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800627e:	b004      	add	sp, #16
 8006280:	4770      	bx	lr
	...

08006284 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d165      	bne.n	8006364 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4a41      	ldr	r2, [pc, #260]	; (80063a0 <USB_SetTurnaroundTime+0x11c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d906      	bls.n	80062ae <USB_SetTurnaroundTime+0x2a>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4a40      	ldr	r2, [pc, #256]	; (80063a4 <USB_SetTurnaroundTime+0x120>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d802      	bhi.n	80062ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062a8:	230f      	movs	r3, #15
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	e062      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4a3c      	ldr	r2, [pc, #240]	; (80063a4 <USB_SetTurnaroundTime+0x120>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d906      	bls.n	80062c4 <USB_SetTurnaroundTime+0x40>
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4a3b      	ldr	r2, [pc, #236]	; (80063a8 <USB_SetTurnaroundTime+0x124>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d802      	bhi.n	80062c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062be:	230e      	movs	r3, #14
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	e057      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4a38      	ldr	r2, [pc, #224]	; (80063a8 <USB_SetTurnaroundTime+0x124>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d906      	bls.n	80062da <USB_SetTurnaroundTime+0x56>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a37      	ldr	r2, [pc, #220]	; (80063ac <USB_SetTurnaroundTime+0x128>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d802      	bhi.n	80062da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062d4:	230d      	movs	r3, #13
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e04c      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4a33      	ldr	r2, [pc, #204]	; (80063ac <USB_SetTurnaroundTime+0x128>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d906      	bls.n	80062f0 <USB_SetTurnaroundTime+0x6c>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a32      	ldr	r2, [pc, #200]	; (80063b0 <USB_SetTurnaroundTime+0x12c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d802      	bhi.n	80062f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062ea:	230c      	movs	r3, #12
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e041      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4a2f      	ldr	r2, [pc, #188]	; (80063b0 <USB_SetTurnaroundTime+0x12c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d906      	bls.n	8006306 <USB_SetTurnaroundTime+0x82>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a2e      	ldr	r2, [pc, #184]	; (80063b4 <USB_SetTurnaroundTime+0x130>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d802      	bhi.n	8006306 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006300:	230b      	movs	r3, #11
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e036      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <USB_SetTurnaroundTime+0x130>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d906      	bls.n	800631c <USB_SetTurnaroundTime+0x98>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a29      	ldr	r2, [pc, #164]	; (80063b8 <USB_SetTurnaroundTime+0x134>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d802      	bhi.n	800631c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006316:	230a      	movs	r3, #10
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e02b      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a26      	ldr	r2, [pc, #152]	; (80063b8 <USB_SetTurnaroundTime+0x134>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d906      	bls.n	8006332 <USB_SetTurnaroundTime+0xae>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a25      	ldr	r2, [pc, #148]	; (80063bc <USB_SetTurnaroundTime+0x138>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d802      	bhi.n	8006332 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800632c:	2309      	movs	r3, #9
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e020      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4a21      	ldr	r2, [pc, #132]	; (80063bc <USB_SetTurnaroundTime+0x138>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d906      	bls.n	8006348 <USB_SetTurnaroundTime+0xc4>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <USB_SetTurnaroundTime+0x13c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d802      	bhi.n	8006348 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006342:	2308      	movs	r3, #8
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e015      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4a1d      	ldr	r2, [pc, #116]	; (80063c0 <USB_SetTurnaroundTime+0x13c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d906      	bls.n	800635e <USB_SetTurnaroundTime+0xda>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4a1c      	ldr	r2, [pc, #112]	; (80063c4 <USB_SetTurnaroundTime+0x140>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d802      	bhi.n	800635e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006358:	2307      	movs	r3, #7
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e00a      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800635e:	2306      	movs	r3, #6
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e007      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d102      	bne.n	8006370 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800636a:	2309      	movs	r3, #9
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e001      	b.n	8006374 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006370:	2309      	movs	r3, #9
 8006372:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	029b      	lsls	r3, r3, #10
 8006388:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800638c:	431a      	orrs	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	00d8acbf 	.word	0x00d8acbf
 80063a4:	00e4e1bf 	.word	0x00e4e1bf
 80063a8:	00f423ff 	.word	0x00f423ff
 80063ac:	0106737f 	.word	0x0106737f
 80063b0:	011a499f 	.word	0x011a499f
 80063b4:	01312cff 	.word	0x01312cff
 80063b8:	014ca43f 	.word	0x014ca43f
 80063bc:	016e35ff 	.word	0x016e35ff
 80063c0:	01a6ab1f 	.word	0x01a6ab1f
 80063c4:	01e847ff 	.word	0x01e847ff

080063c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f043 0201 	orr.w	r2, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 0201 	bic.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d106      	bne.n	8006438 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60da      	str	r2, [r3, #12]
 8006436:	e00b      	b.n	8006450 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	60da      	str	r2, [r3, #12]
 800644a:	e001      	b.n	8006450 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e003      	b.n	8006458 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006450:	2032      	movs	r0, #50	; 0x32
 8006452:	f7fb f8bb 	bl	80015cc <HAL_Delay>

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006460:	b084      	sub	sp, #16
 8006462:	b580      	push	{r7, lr}
 8006464:	b086      	sub	sp, #24
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800646e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800647a:	2300      	movs	r3, #0
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	e009      	b.n	8006494 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	3340      	adds	r3, #64	; 0x40
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	2200      	movs	r2, #0
 800648c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	3301      	adds	r3, #1
 8006492:	613b      	str	r3, [r7, #16]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	2b0e      	cmp	r3, #14
 8006498:	d9f2      	bls.n	8006480 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800649a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d11c      	bne.n	80064da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ae:	f043 0302 	orr.w	r3, r3, #2
 80064b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38
 80064d8:	e00b      	b.n	80064f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064f8:	461a      	mov	r2, r3
 80064fa:	2300      	movs	r3, #0
 80064fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006504:	4619      	mov	r1, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650c:	461a      	mov	r2, r3
 800650e:	680b      	ldr	r3, [r1, #0]
 8006510:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	2b01      	cmp	r3, #1
 8006516:	d10c      	bne.n	8006532 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800651e:	2100      	movs	r1, #0
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f949 	bl	80067b8 <USB_SetDevSpeed>
 8006526:	e008      	b.n	800653a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006528:	2101      	movs	r1, #1
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f944 	bl	80067b8 <USB_SetDevSpeed>
 8006530:	e003      	b.n	800653a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006532:	2103      	movs	r1, #3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f93f 	bl	80067b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800653a:	2110      	movs	r1, #16
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f8f3 	bl	8006728 <USB_FlushTxFifo>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f911 	bl	8006774 <USB_FlushRxFifo>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006562:	461a      	mov	r2, r3
 8006564:	2300      	movs	r3, #0
 8006566:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	461a      	mov	r2, r3
 8006570:	2300      	movs	r3, #0
 8006572:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657a:	461a      	mov	r2, r3
 800657c:	2300      	movs	r3, #0
 800657e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006580:	2300      	movs	r3, #0
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	e043      	b.n	800660e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800659c:	d118      	bne.n	80065d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b0:	461a      	mov	r2, r3
 80065b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	e013      	b.n	80065e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c6:	461a      	mov	r2, r3
 80065c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	e008      	b.n	80065e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065dc:	461a      	mov	r2, r3
 80065de:	2300      	movs	r3, #0
 80065e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	461a      	mov	r2, r3
 80065f0:	2300      	movs	r3, #0
 80065f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	461a      	mov	r2, r3
 8006602:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006606:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	3301      	adds	r3, #1
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	429a      	cmp	r2, r3
 8006614:	d3b7      	bcc.n	8006586 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006616:	2300      	movs	r3, #0
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	e043      	b.n	80066a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800662e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006632:	d118      	bne.n	8006666 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	461a      	mov	r2, r3
 8006648:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	e013      	b.n	8006678 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	461a      	mov	r2, r3
 800665e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e008      	b.n	8006678 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	461a      	mov	r2, r3
 8006674:	2300      	movs	r3, #0
 8006676:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006684:	461a      	mov	r2, r3
 8006686:	2300      	movs	r3, #0
 8006688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	461a      	mov	r2, r3
 8006698:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800669c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	3301      	adds	r3, #1
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d3b7      	bcc.n	800661c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f043 0210 	orr.w	r2, r3, #16
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699a      	ldr	r2, [r3, #24]
 80066e4:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <USB_DevInit+0x2c4>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f043 0208 	orr.w	r2, r3, #8
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d107      	bne.n	8006714 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800670c:	f043 0304 	orr.w	r3, r3, #4
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006714:	7dfb      	ldrb	r3, [r7, #23]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006720:	b004      	add	sp, #16
 8006722:	4770      	bx	lr
 8006724:	803c3800 	.word	0x803c3800

08006728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	019b      	lsls	r3, r3, #6
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4a09      	ldr	r2, [pc, #36]	; (8006770 <USB_FlushTxFifo+0x48>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d901      	bls.n	8006754 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e006      	b.n	8006762 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b20      	cmp	r3, #32
 800675e:	d0f0      	beq.n	8006742 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	00030d40 	.word	0x00030d40

08006774 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2210      	movs	r2, #16
 8006784:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <USB_FlushRxFifo+0x40>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d901      	bls.n	8006798 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e006      	b.n	80067a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d0f0      	beq.n	8006786 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	00030d40 	.word	0x00030d40

080067b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d8:	4313      	orrs	r3, r2
 80067da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b087      	sub	sp, #28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0306 	and.w	r3, r3, #6
 8006802:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800680a:	2300      	movs	r3, #0
 800680c:	75fb      	strb	r3, [r7, #23]
 800680e:	e00a      	b.n	8006826 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b02      	cmp	r3, #2
 8006814:	d002      	beq.n	800681c <USB_GetDevSpeed+0x32>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b06      	cmp	r3, #6
 800681a:	d102      	bne.n	8006822 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800681c:	2302      	movs	r3, #2
 800681e:	75fb      	strb	r3, [r7, #23]
 8006820:	e001      	b.n	8006826 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006822:	230f      	movs	r3, #15
 8006824:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
}
 8006828:	4618      	mov	r0, r3
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d13a      	bne.n	80068c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	f003 030f 	and.w	r3, r3, #15
 8006860:	2101      	movs	r1, #1
 8006862:	fa01 f303 	lsl.w	r3, r1, r3
 8006866:	b29b      	uxth	r3, r3
 8006868:	68f9      	ldr	r1, [r7, #12]
 800686a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800686e:	4313      	orrs	r3, r2
 8006870:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d155      	bne.n	8006934 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	78db      	ldrb	r3, [r3, #3]
 80068a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	059b      	lsls	r3, r3, #22
 80068aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068ac:	4313      	orrs	r3, r2
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	e036      	b.n	8006934 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068cc:	69da      	ldr	r2, [r3, #28]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	2101      	movs	r1, #1
 80068d8:	fa01 f303 	lsl.w	r3, r1, r3
 80068dc:	041b      	lsls	r3, r3, #16
 80068de:	68f9      	ldr	r1, [r7, #12]
 80068e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e4:	4313      	orrs	r3, r2
 80068e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11a      	bne.n	8006934 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	78db      	ldrb	r3, [r3, #3]
 8006918:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800691a:	430b      	orrs	r3, r1
 800691c:	4313      	orrs	r3, r2
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006932:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
	...

08006944 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d161      	bne.n	8006a24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006976:	d11f      	bne.n	80069b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	440a      	add	r2, r1
 800698e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006996:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	2101      	movs	r1, #1
 80069ca:	fa01 f303 	lsl.w	r3, r1, r3
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	43db      	mvns	r3, r3
 80069d2:	68f9      	ldr	r1, [r7, #12]
 80069d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069d8:	4013      	ands	r3, r2
 80069da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	2101      	movs	r1, #1
 80069ee:	fa01 f303 	lsl.w	r3, r1, r3
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	43db      	mvns	r3, r3
 80069f6:	68f9      	ldr	r1, [r7, #12]
 80069f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069fc:	4013      	ands	r3, r2
 80069fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	0159      	lsls	r1, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	440b      	add	r3, r1
 8006a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4b35      	ldr	r3, [pc, #212]	; (8006af4 <USB_DeactivateEndpoint+0x1b0>)
 8006a1e:	4013      	ands	r3, r2
 8006a20:	600b      	str	r3, [r1, #0]
 8006a22:	e060      	b.n	8006ae6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a3a:	d11f      	bne.n	8006a7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a92:	041b      	lsls	r3, r3, #16
 8006a94:	43db      	mvns	r3, r3
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab6:	041b      	lsls	r3, r3, #16
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	0159      	lsls	r1, r3, #5
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	440b      	add	r3, r1
 8006ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <USB_DeactivateEndpoint+0x1b4>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	ec337800 	.word	0xec337800
 8006af8:	eff37800 	.word	0xeff37800

08006afc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08a      	sub	sp, #40	; 0x28
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f040 815c 	bne.w	8006dd6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d132      	bne.n	8006b8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	0151      	lsls	r1, r2, #5
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	440a      	add	r2, r1
 8006b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	0151      	lsls	r1, r2, #5
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	440a      	add	r2, r1
 8006b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b84:	0cdb      	lsrs	r3, r3, #19
 8006b86:	04db      	lsls	r3, r3, #19
 8006b88:	6113      	str	r3, [r2, #16]
 8006b8a:	e074      	b.n	8006c76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	0151      	lsls	r1, r2, #5
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	440a      	add	r2, r1
 8006ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba6:	0cdb      	lsrs	r3, r3, #19
 8006ba8:	04db      	lsls	r3, r3, #19
 8006baa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	0151      	lsls	r1, r2, #5
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	6959      	ldr	r1, [r3, #20]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	440b      	add	r3, r1
 8006be8:	1e59      	subs	r1, r3, #1
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bf2:	04d9      	lsls	r1, r3, #19
 8006bf4:	4b9d      	ldr	r3, [pc, #628]	; (8006e6c <USB_EPStartXfer+0x370>)
 8006bf6:	400b      	ands	r3, r1
 8006bf8:	69b9      	ldr	r1, [r7, #24]
 8006bfa:	0148      	lsls	r0, r1, #5
 8006bfc:	69f9      	ldr	r1, [r7, #28]
 8006bfe:	4401      	add	r1, r0
 8006c00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c04:	4313      	orrs	r3, r2
 8006c06:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c1e:	69b9      	ldr	r1, [r7, #24]
 8006c20:	0148      	lsls	r0, r1, #5
 8006c22:	69f9      	ldr	r1, [r7, #28]
 8006c24:	4401      	add	r1, r0
 8006c26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	78db      	ldrb	r3, [r3, #3]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d11f      	bne.n	8006c76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d14b      	bne.n	8006d14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d009      	beq.n	8006c98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	461a      	mov	r2, r3
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	78db      	ldrb	r3, [r3, #3]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d128      	bne.n	8006cf2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d110      	bne.n	8006cd2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	e00f      	b.n	8006cf2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	0151      	lsls	r1, r2, #5
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	440a      	add	r2, r1
 8006ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e12f      	b.n	8006f74 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	78db      	ldrb	r3, [r3, #3]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d015      	beq.n	8006d68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8117 	beq.w	8006f74 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	2101      	movs	r1, #1
 8006d58:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5c:	69f9      	ldr	r1, [r7, #28]
 8006d5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d62:	4313      	orrs	r3, r2
 8006d64:	634b      	str	r3, [r1, #52]	; 0x34
 8006d66:	e105      	b.n	8006f74 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d110      	bne.n	8006d9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	e00f      	b.n	8006dba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	68d9      	ldr	r1, [r3, #12]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	b298      	uxth	r0, r3
 8006dc8:	79fb      	ldrb	r3, [r7, #7]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	4603      	mov	r3, r0
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fa2b 	bl	800722a <USB_WritePacket>
 8006dd4:	e0ce      	b.n	8006f74 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	0151      	lsls	r1, r2, #5
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	440a      	add	r2, r1
 8006dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df0:	0cdb      	lsrs	r3, r3, #19
 8006df2:	04db      	lsls	r3, r3, #19
 8006df4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d126      	bne.n	8006e70 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e38:	69b9      	ldr	r1, [r7, #24]
 8006e3a:	0148      	lsls	r0, r1, #5
 8006e3c:	69f9      	ldr	r1, [r7, #28]
 8006e3e:	4401      	add	r1, r0
 8006e40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e44:	4313      	orrs	r3, r2
 8006e46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	0151      	lsls	r1, r2, #5
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	440a      	add	r2, r1
 8006e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e66:	6113      	str	r3, [r2, #16]
 8006e68:	e036      	b.n	8006ed8 <USB_EPStartXfer+0x3dc>
 8006e6a:	bf00      	nop
 8006e6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	695a      	ldr	r2, [r3, #20]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4413      	add	r3, r2
 8006e7a:	1e5a      	subs	r2, r3, #1
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e84:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	8afb      	ldrh	r3, [r7, #22]
 8006e96:	04d9      	lsls	r1, r3, #19
 8006e98:	4b39      	ldr	r3, [pc, #228]	; (8006f80 <USB_EPStartXfer+0x484>)
 8006e9a:	400b      	ands	r3, r1
 8006e9c:	69b9      	ldr	r1, [r7, #24]
 8006e9e:	0148      	lsls	r0, r1, #5
 8006ea0:	69f9      	ldr	r1, [r7, #28]
 8006ea2:	4401      	add	r1, r0
 8006ea4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	8af9      	ldrh	r1, [r7, #22]
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ec8:	69b9      	ldr	r1, [r7, #24]
 8006eca:	0148      	lsls	r0, r1, #5
 8006ecc:	69f9      	ldr	r1, [r7, #28]
 8006ece:	4401      	add	r1, r0
 8006ed0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d10d      	bne.n	8006efa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	68d9      	ldr	r1, [r3, #12]
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	460a      	mov	r2, r1
 8006ef8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	78db      	ldrb	r3, [r3, #3]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d128      	bne.n	8006f54 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d110      	bne.n	8006f34 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	0151      	lsls	r1, r2, #5
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	440a      	add	r2, r1
 8006f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e00f      	b.n	8006f54 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3720      	adds	r7, #32
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	1ff80000 	.word	0x1ff80000

08006f84 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	f040 80cd 	bne.w	8007140 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d132      	bne.n	8007014 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ff0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700c:	0cdb      	lsrs	r3, r3, #19
 800700e:	04db      	lsls	r3, r3, #19
 8007010:	6113      	str	r3, [r2, #16]
 8007012:	e04e      	b.n	80070b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702e:	0cdb      	lsrs	r3, r3, #19
 8007030:	04db      	lsls	r3, r3, #19
 8007032:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007052:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007056:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	695a      	ldr	r2, [r3, #20]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	429a      	cmp	r2, r3
 8007062:	d903      	bls.n	800706c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	440a      	add	r2, r1
 8007082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007086:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800708a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070a2:	6939      	ldr	r1, [r7, #16]
 80070a4:	0148      	lsls	r0, r1, #5
 80070a6:	6979      	ldr	r1, [r7, #20]
 80070a8:	4401      	add	r1, r0
 80070aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070ae:	4313      	orrs	r3, r2
 80070b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d11e      	bne.n	80070f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d009      	beq.n	80070d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070cc:	461a      	mov	r2, r3
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	e092      	b.n	800721c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007110:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007114:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d07e      	beq.n	800721c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	2101      	movs	r1, #1
 8007130:	fa01 f303 	lsl.w	r3, r1, r3
 8007134:	6979      	ldr	r1, [r7, #20]
 8007136:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800713a:	4313      	orrs	r3, r2
 800713c:	634b      	str	r3, [r1, #52]	; 0x34
 800713e:	e06d      	b.n	800721c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	440a      	add	r2, r1
 8007156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715a:	0cdb      	lsrs	r3, r3, #19
 800715c:	04db      	lsls	r3, r3, #19
 800715e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	0151      	lsls	r1, r2, #5
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	440a      	add	r2, r1
 8007176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800717a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800717e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007182:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ca:	6939      	ldr	r1, [r7, #16]
 80071cc:	0148      	lsls	r0, r1, #5
 80071ce:	6979      	ldr	r1, [r7, #20]
 80071d0:	4401      	add	r1, r0
 80071d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071d6:	4313      	orrs	r3, r2
 80071d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d10d      	bne.n	80071fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d009      	beq.n	80071fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	68d9      	ldr	r1, [r3, #12]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f8:	460a      	mov	r2, r1
 80071fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800721a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800722a:	b480      	push	{r7}
 800722c:	b089      	sub	sp, #36	; 0x24
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	4611      	mov	r1, r2
 8007236:	461a      	mov	r2, r3
 8007238:	460b      	mov	r3, r1
 800723a:	71fb      	strb	r3, [r7, #7]
 800723c:	4613      	mov	r3, r2
 800723e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007248:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800724c:	2b00      	cmp	r3, #0
 800724e:	d11a      	bne.n	8007286 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007250:	88bb      	ldrh	r3, [r7, #4]
 8007252:	3303      	adds	r3, #3
 8007254:	089b      	lsrs	r3, r3, #2
 8007256:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007258:	2300      	movs	r3, #0
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	e00f      	b.n	800727e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	031a      	lsls	r2, r3, #12
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4413      	add	r3, r2
 8007266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726a:	461a      	mov	r2, r3
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	3304      	adds	r3, #4
 8007276:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	3301      	adds	r3, #1
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	429a      	cmp	r2, r3
 8007284:	d3eb      	bcc.n	800725e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3724      	adds	r7, #36	; 0x24
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007294:	b480      	push	{r7}
 8007296:	b089      	sub	sp, #36	; 0x24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80072aa:	88fb      	ldrh	r3, [r7, #6]
 80072ac:	3303      	adds	r3, #3
 80072ae:	089b      	lsrs	r3, r3, #2
 80072b0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e00b      	b.n	80072d0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	3304      	adds	r3, #4
 80072c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	3301      	adds	r3, #1
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d3ef      	bcc.n	80072b8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80072d8:	69fb      	ldr	r3, [r7, #28]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3724      	adds	r7, #36	; 0x24
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d12c      	bne.n	800735c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	db12      	blt.n	800733a <USB_EPSetStall+0x54>
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00f      	beq.n	800733a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	440a      	add	r2, r1
 8007330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007338:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	e02b      	b.n	80073b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	db12      	blt.n	8007394 <USB_EPSetStall+0xae>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00f      	beq.n	8007394 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007392:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	785b      	ldrb	r3, [r3, #1]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d128      	bne.n	8007430 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	0151      	lsls	r1, r2, #5
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	440a      	add	r2, r1
 80073f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	78db      	ldrb	r3, [r3, #3]
 8007402:	2b03      	cmp	r3, #3
 8007404:	d003      	beq.n	800740e <USB_EPClearStall+0x4c>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	78db      	ldrb	r3, [r3, #3]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d138      	bne.n	8007480 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	e027      	b.n	8007480 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	440a      	add	r2, r1
 8007446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800744a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800744e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	78db      	ldrb	r3, [r3, #3]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d003      	beq.n	8007460 <USB_EPClearStall+0x9e>
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	78db      	ldrb	r3, [r3, #3]
 800745c:	2b02      	cmp	r3, #2
 800745e:	d10f      	bne.n	8007480 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	0151      	lsls	r1, r2, #5
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	440a      	add	r2, r1
 8007476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800747e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800748e:	b480      	push	{r7}
 8007490:	b085      	sub	sp, #20
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80074b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c8:	4313      	orrs	r3, r2
 80074ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074da:	b480      	push	{r7}
 80074dc:	b085      	sub	sp, #20
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074f4:	f023 0303 	bic.w	r3, r3, #3
 80074f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007508:	f023 0302 	bic.w	r3, r3, #2
 800750c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007536:	f023 0303 	bic.w	r3, r3, #3
 800753a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800754a:	f043 0302 	orr.w	r3, r3, #2
 800754e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4013      	ands	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007576:	68fb      	ldr	r3, [r7, #12]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	4013      	ands	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	0c1b      	lsrs	r3, r3, #16
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	4013      	ands	r3, r2
 80075da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	b29b      	uxth	r3, r3
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	4013      	ands	r3, r2
 8007618:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800761a:	68bb      	ldr	r3, [r7, #8]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	fa22 f303 	lsr.w	r3, r2, r3
 8007658:	01db      	lsls	r3, r3, #7
 800765a:	b2db      	uxtb	r3, r3
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4013      	ands	r3, r2
 8007674:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007676:	68bb      	ldr	r3, [r7, #8]
}
 8007678:	4618      	mov	r0, r3
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	f003 0301 	and.w	r3, r3, #1
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076be:	f023 0307 	bic.w	r3, r3, #7
 80076c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
	...

080076e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	460b      	mov	r3, r1
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	333c      	adds	r3, #60	; 0x3c
 80076fe:	3304      	adds	r3, #4
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4a26      	ldr	r2, [pc, #152]	; (80077a0 <USB_EP0_OutStart+0xb8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d90a      	bls.n	8007722 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800771c:	d101      	bne.n	8007722 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e037      	b.n	8007792 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007728:	461a      	mov	r2, r3
 800772a:	2300      	movs	r3, #0
 800772c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007750:	f043 0318 	orr.w	r3, r3, #24
 8007754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007764:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007768:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d10f      	bne.n	8007790 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800778e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	4f54300a 	.word	0x4f54300a

080077a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3301      	adds	r3, #1
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4a13      	ldr	r2, [pc, #76]	; (8007808 <USB_CoreReset+0x64>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d901      	bls.n	80077c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e01b      	b.n	80077fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	daf2      	bge.n	80077b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f043 0201 	orr.w	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3301      	adds	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4a09      	ldr	r2, [pc, #36]	; (8007808 <USB_CoreReset+0x64>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d901      	bls.n	80077ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e006      	b.n	80077fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d0f0      	beq.n	80077da <USB_CoreReset+0x36>

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	00030d40 	.word	0x00030d40

0800780c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007818:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800781c:	f002 f930 	bl	8009a80 <malloc>
 8007820:	4603      	mov	r3, r0
 8007822:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d105      	bne.n	8007836 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007832:	2302      	movs	r3, #2
 8007834:	e066      	b.n	8007904 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	7c1b      	ldrb	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d119      	bne.n	800787a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800784a:	2202      	movs	r2, #2
 800784c:	2181      	movs	r1, #129	; 0x81
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 ff9d 	bl	800978e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800785a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800785e:	2202      	movs	r2, #2
 8007860:	2101      	movs	r1, #1
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 ff93 	bl	800978e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2210      	movs	r2, #16
 8007874:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007878:	e016      	b.n	80078a8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800787a:	2340      	movs	r3, #64	; 0x40
 800787c:	2202      	movs	r2, #2
 800787e:	2181      	movs	r1, #129	; 0x81
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 ff84 	bl	800978e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800788c:	2340      	movs	r3, #64	; 0x40
 800788e:	2202      	movs	r2, #2
 8007890:	2101      	movs	r1, #1
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 ff7b 	bl	800978e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2210      	movs	r2, #16
 80078a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078a8:	2308      	movs	r3, #8
 80078aa:	2203      	movs	r2, #3
 80078ac:	2182      	movs	r1, #130	; 0x82
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f001 ff6d 	bl	800978e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	7c1b      	ldrb	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d109      	bne.n	80078f2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078e8:	2101      	movs	r1, #1
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f002 f83e 	bl	800996c <USBD_LL_PrepareReceive>
 80078f0:	e007      	b.n	8007902 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078f8:	2340      	movs	r3, #64	; 0x40
 80078fa:	2101      	movs	r1, #1
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f002 f835 	bl	800996c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	460b      	mov	r3, r1
 8007916:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800791c:	2181      	movs	r1, #129	; 0x81
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 ff5b 	bl	80097da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800792a:	2101      	movs	r1, #1
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 ff54 	bl	80097da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800793a:	2182      	movs	r1, #130	; 0x82
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 ff4c 	bl	80097da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00e      	beq.n	800797a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800796c:	4618      	mov	r0, r3
 800796e:	f002 f88f 	bl	8009a90 <free>
    pdev->pClassData = NULL;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800797a:	7bfb      	ldrb	r3, [r7, #15]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007994:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d03a      	beq.n	8007a24 <USBD_CDC_Setup+0xa0>
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	f040 8097 	bne.w	8007ae2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	88db      	ldrh	r3, [r3, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d029      	beq.n	8007a10 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	b25b      	sxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da11      	bge.n	80079ea <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80079d2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	88d2      	ldrh	r2, [r2, #6]
 80079d8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079da:	6939      	ldr	r1, [r7, #16]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	88db      	ldrh	r3, [r3, #6]
 80079e0:	461a      	mov	r2, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 fa9d 	bl	8008f22 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80079e8:	e082      	b.n	8007af0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	785a      	ldrb	r2, [r3, #1]
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	88db      	ldrh	r3, [r3, #6]
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007a00:	6939      	ldr	r1, [r7, #16]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 fab6 	bl	8008f7a <USBD_CtlPrepareRx>
    break;
 8007a0e:	e06f      	b.n	8007af0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	7850      	ldrb	r0, [r2, #1]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	4798      	blx	r3
    break;
 8007a22:	e065      	b.n	8007af0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b0b      	cmp	r3, #11
 8007a2a:	d84f      	bhi.n	8007acc <USBD_CDC_Setup+0x148>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <USBD_CDC_Setup+0xb0>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a65 	.word	0x08007a65
 8007a38:	08007adb 	.word	0x08007adb
 8007a3c:	08007acd 	.word	0x08007acd
 8007a40:	08007acd 	.word	0x08007acd
 8007a44:	08007acd 	.word	0x08007acd
 8007a48:	08007acd 	.word	0x08007acd
 8007a4c:	08007acd 	.word	0x08007acd
 8007a50:	08007acd 	.word	0x08007acd
 8007a54:	08007acd 	.word	0x08007acd
 8007a58:	08007acd 	.word	0x08007acd
 8007a5c:	08007a8d 	.word	0x08007a8d
 8007a60:	08007ab5 	.word	0x08007ab5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d107      	bne.n	8007a7e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a6e:	f107 030c 	add.w	r3, r7, #12
 8007a72:	2202      	movs	r2, #2
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fa53 	bl	8008f22 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007a7c:	e030      	b.n	8007ae0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 f9dd 	bl	8008e40 <USBD_CtlError>
        ret = USBD_FAIL;
 8007a86:	2303      	movs	r3, #3
 8007a88:	75fb      	strb	r3, [r7, #23]
      break;
 8007a8a:	e029      	b.n	8007ae0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d107      	bne.n	8007aa6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a96:	f107 030f 	add.w	r3, r7, #15
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 fa3f 	bl	8008f22 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007aa4:	e01c      	b.n	8007ae0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f001 f9c9 	bl	8008e40 <USBD_CtlError>
        ret = USBD_FAIL;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab2:	e015      	b.n	8007ae0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d00f      	beq.n	8007ade <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f9bd 	bl	8008e40 <USBD_CtlError>
        ret = USBD_FAIL;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007aca:	e008      	b.n	8007ade <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 f9b6 	bl	8008e40 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad8:	e002      	b.n	8007ae0 <USBD_CDC_Setup+0x15c>
      break;
 8007ada:	bf00      	nop
 8007adc:	e008      	b.n	8007af0 <USBD_CDC_Setup+0x16c>
      break;
 8007ade:	bf00      	nop
    }
    break;
 8007ae0:	e006      	b.n	8007af0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 f9ab 	bl	8008e40 <USBD_CtlError>
    ret = USBD_FAIL;
 8007aea:	2303      	movs	r3, #3
 8007aec:	75fb      	strb	r3, [r7, #23]
    break;
 8007aee:	bf00      	nop
  }

  return (uint8_t)ret;
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop

08007afc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e049      	b.n	8007bb2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	440b      	add	r3, r1
 8007b34:	3318      	adds	r3, #24
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d029      	beq.n	8007b90 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	3318      	adds	r3, #24
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	78f9      	ldrb	r1, [r7, #3]
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	460b      	mov	r3, r1
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	1a5b      	subs	r3, r3, r1
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4403      	add	r3, r0
 8007b5c:	3344      	adds	r3, #68	; 0x44
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b64:	fb03 f301 	mul.w	r3, r3, r1
 8007b68:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d110      	bne.n	8007b90 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b6e:	78fa      	ldrb	r2, [r7, #3]
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	3318      	adds	r3, #24
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b82:	78f9      	ldrb	r1, [r7, #3]
 8007b84:	2300      	movs	r3, #0
 8007b86:	2200      	movs	r2, #0
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fece 	bl	800992a <USBD_LL_Transmit>
 8007b8e:	e00f      	b.n	8007bb0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007bac:	78fa      	ldrb	r2, [r7, #3]
 8007bae:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e015      	b.n	8007c08 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 fee4 	bl	80099ae <USBD_LL_GetRxDataSize>
 8007be6:	4602      	mov	r2, r0
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c02:	4611      	mov	r1, r2
 8007c04:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3710      	adds	r7, #16
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c1e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d015      	beq.n	8007c56 <USBD_CDC_EP0_RxReady+0x46>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c30:	2bff      	cmp	r3, #255	; 0xff
 8007c32:	d010      	beq.n	8007c56 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007c42:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	22ff      	movs	r2, #255	; 0xff
 8007c52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2243      	movs	r2, #67	; 0x43
 8007c6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c6e:	4b03      	ldr	r3, [pc, #12]	; (8007c7c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	200000b4 	.word	0x200000b4

08007c80 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2243      	movs	r2, #67	; 0x43
 8007c8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007c8e:	4b03      	ldr	r3, [pc, #12]	; (8007c9c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	20000070 	.word	0x20000070

08007ca0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2243      	movs	r2, #67	; 0x43
 8007cac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007cae:	4b03      	ldr	r3, [pc, #12]	; (8007cbc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	200000f8 	.word	0x200000f8

08007cc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	220a      	movs	r2, #10
 8007ccc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007cce:	4b03      	ldr	r3, [pc, #12]	; (8007cdc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	2000002c 	.word	0x2000002c

08007ce0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e004      	b.n	8007cfe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b087      	sub	sp, #28
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d1c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	371c      	adds	r7, #28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d4c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d72:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d74:	2301      	movs	r3, #1
 8007d76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e01a      	b.n	8007dbc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d114      	bne.n	8007dba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007dae:	2181      	movs	r1, #129	; 0x81
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 fdba 	bl	800992a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e016      	b.n	8007e10 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7c1b      	ldrb	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007df4:	2101      	movs	r1, #1
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 fdb8 	bl	800996c <USBD_LL_PrepareReceive>
 8007dfc:	e007      	b.n	8007e0e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e04:	2340      	movs	r3, #64	; 0x40
 8007e06:	2101      	movs	r1, #1
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 fdaf 	bl	800996c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e025      	b.n	8007e7c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	79fa      	ldrb	r2, [r7, #7]
 8007e6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f001 fc25 	bl	80096c0 <USBD_LL_Init>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e010      	b.n	8007ebe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	f107 020e 	add.w	r2, r7, #14
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	4798      	blx	r3
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 fc42 	bl	8009758 <USBD_LL_Start>
 8007ed4:	4603      	mov	r3, r0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f00:	2303      	movs	r3, #3
 8007f02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	4611      	mov	r1, r2
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d007      	beq.n	8007f52 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
  }

  return USBD_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 ff2c 	bl	8008dcc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f82:	461a      	mov	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f90:	f003 031f 	and.w	r3, r3, #31
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d00e      	beq.n	8007fb6 <USBD_LL_SetupStage+0x5a>
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d302      	bcc.n	8007fa2 <USBD_LL_SetupStage+0x46>
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d014      	beq.n	8007fca <USBD_LL_SetupStage+0x6e>
 8007fa0:	e01d      	b.n	8007fde <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa18 	bl	80083e0 <USBD_StdDevReq>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb4:	e020      	b.n	8007ff8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa7c 	bl	80084bc <USBD_StdItfReq>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc8:	e016      	b.n	8007ff8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fab8 	bl	8008548 <USBD_StdEPReq>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73fb      	strb	r3, [r7, #15]
      break;
 8007fdc:	e00c      	b.n	8007ff8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fe4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 fc13 	bl	8009818 <USBD_LL_StallEP>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff6:	bf00      	nop
  }

  return ret;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b086      	sub	sp, #24
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	460b      	mov	r3, r1
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008010:	7afb      	ldrb	r3, [r7, #11]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d137      	bne.n	8008086 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800801c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008024:	2b03      	cmp	r3, #3
 8008026:	d14a      	bne.n	80080be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	429a      	cmp	r2, r3
 8008032:	d913      	bls.n	800805c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	1ad2      	subs	r2, r2, r3
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	68da      	ldr	r2, [r3, #12]
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	4293      	cmp	r3, r2
 800804c:	bf28      	it	cs
 800804e:	4613      	movcs	r3, r2
 8008050:	461a      	mov	r2, r3
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 ffad 	bl	8008fb4 <USBD_CtlContinueRx>
 800805a:	e030      	b.n	80080be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00a      	beq.n	800807e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800806e:	2b03      	cmp	r3, #3
 8008070:	d105      	bne.n	800807e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 ffa9 	bl	8008fd6 <USBD_CtlSendStatus>
 8008084:	e01b      	b.n	80080be <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d013      	beq.n	80080ba <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008098:	2b03      	cmp	r3, #3
 800809a:	d10e      	bne.n	80080ba <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	7afa      	ldrb	r2, [r7, #11]
 80080a6:	4611      	mov	r1, r2
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	4798      	blx	r3
 80080ac:	4603      	mov	r3, r0
 80080ae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	e002      	b.n	80080c0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e000      	b.n	80080c0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	460b      	mov	r3, r1
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080d6:	7afb      	ldrb	r3, [r7, #11]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d16a      	bne.n	80081b2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3314      	adds	r3, #20
 80080e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d155      	bne.n	8008198 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d914      	bls.n	8008122 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	1ad2      	subs	r2, r2, r3
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	461a      	mov	r2, r3
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f000 ff22 	bl	8008f58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008114:	2300      	movs	r3, #0
 8008116:	2200      	movs	r2, #0
 8008118:	2100      	movs	r1, #0
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f001 fc26 	bl	800996c <USBD_LL_PrepareReceive>
 8008120:	e03a      	b.n	8008198 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	429a      	cmp	r2, r3
 800812c:	d11c      	bne.n	8008168 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008136:	429a      	cmp	r2, r3
 8008138:	d316      	bcc.n	8008168 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008144:	429a      	cmp	r2, r3
 8008146:	d20f      	bcs.n	8008168 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008148:	2200      	movs	r2, #0
 800814a:	2100      	movs	r1, #0
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 ff03 	bl	8008f58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800815a:	2300      	movs	r3, #0
 800815c:	2200      	movs	r2, #0
 800815e:	2100      	movs	r1, #0
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f001 fc03 	bl	800996c <USBD_LL_PrepareReceive>
 8008166:	e017      	b.n	8008198 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800817a:	2b03      	cmp	r3, #3
 800817c:	d105      	bne.n	800818a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800818a:	2180      	movs	r1, #128	; 0x80
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f001 fb43 	bl	8009818 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 ff32 	bl	8008ffc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d123      	bne.n	80081ea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7ff fe9b 	bl	8007ede <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081b0:	e01b      	b.n	80081ea <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d013      	beq.n	80081e6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d10e      	bne.n	80081e6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	7afa      	ldrb	r2, [r7, #11]
 80081d2:	4611      	mov	r1, r2
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	4798      	blx	r3
 80081d8:	4603      	mov	r3, r0
 80081da:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	e002      	b.n	80081ec <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e000      	b.n	80081ec <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008220:	2b00      	cmp	r3, #0
 8008222:	d009      	beq.n	8008238 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	6852      	ldr	r2, [r2, #4]
 8008230:	b2d2      	uxtb	r2, r2
 8008232:	4611      	mov	r1, r2
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008238:	2340      	movs	r3, #64	; 0x40
 800823a:	2200      	movs	r2, #0
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 faa5 	bl	800978e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2240      	movs	r2, #64	; 0x40
 8008250:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008254:	2340      	movs	r3, #64	; 0x40
 8008256:	2200      	movs	r2, #0
 8008258:	2180      	movs	r1, #128	; 0x80
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 fa97 	bl	800978e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2240      	movs	r2, #64	; 0x40
 800826a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	78fa      	ldrb	r2, [r7, #3]
 8008286:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2204      	movs	r2, #4
 80082ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d105      	bne.n	80082de <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d10b      	bne.n	8008316 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6852      	ldr	r2, [r2, #4]
 8008390:	b2d2      	uxtb	r2, r2
 8008392:	4611      	mov	r1, r2
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
  }

  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b087      	sub	sp, #28
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	3301      	adds	r3, #1
 80083b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083c0:	8a3b      	ldrh	r3, [r7, #16]
 80083c2:	021b      	lsls	r3, r3, #8
 80083c4:	b21a      	sxth	r2, r3
 80083c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	b21b      	sxth	r3, r3
 80083ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083d0:	89fb      	ldrh	r3, [r7, #14]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
	...

080083e0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	d004      	beq.n	8008404 <USBD_StdDevReq+0x24>
 80083fa:	2b40      	cmp	r3, #64	; 0x40
 80083fc:	d002      	beq.n	8008404 <USBD_StdDevReq+0x24>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <USBD_StdDevReq+0x38>
 8008402:	e050      	b.n	80084a6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
 8008412:	4603      	mov	r3, r0
 8008414:	73fb      	strb	r3, [r7, #15]
    break;
 8008416:	e04b      	b.n	80084b0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	2b09      	cmp	r3, #9
 800841e:	d83c      	bhi.n	800849a <USBD_StdDevReq+0xba>
 8008420:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <USBD_StdDevReq+0x48>)
 8008422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008426:	bf00      	nop
 8008428:	0800847d 	.word	0x0800847d
 800842c:	08008491 	.word	0x08008491
 8008430:	0800849b 	.word	0x0800849b
 8008434:	08008487 	.word	0x08008487
 8008438:	0800849b 	.word	0x0800849b
 800843c:	0800845b 	.word	0x0800845b
 8008440:	08008451 	.word	0x08008451
 8008444:	0800849b 	.word	0x0800849b
 8008448:	08008473 	.word	0x08008473
 800844c:	08008465 	.word	0x08008465
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f9ce 	bl	80087f4 <USBD_GetDescriptor>
      break;
 8008458:	e024      	b.n	80084a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fb33 	bl	8008ac8 <USBD_SetAddress>
      break;
 8008462:	e01f      	b.n	80084a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fb70 	bl	8008b4c <USBD_SetConfig>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
      break;
 8008470:	e018      	b.n	80084a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fc0d 	bl	8008c94 <USBD_GetConfig>
      break;
 800847a:	e013      	b.n	80084a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fc3c 	bl	8008cfc <USBD_GetStatus>
      break;
 8008484:	e00e      	b.n	80084a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fc6a 	bl	8008d62 <USBD_SetFeature>
      break;
 800848e:	e009      	b.n	80084a4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fc79 	bl	8008d8a <USBD_ClrFeature>
      break;
 8008498:	e004      	b.n	80084a4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fccf 	bl	8008e40 <USBD_CtlError>
      break;
 80084a2:	bf00      	nop
    }
    break;
 80084a4:	e004      	b.n	80084b0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fcc9 	bl	8008e40 <USBD_CtlError>
    break;
 80084ae:	bf00      	nop
  }

  return ret;
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop

080084bc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d003      	beq.n	80084de <USBD_StdItfReq+0x22>
 80084d6:	2b40      	cmp	r3, #64	; 0x40
 80084d8:	d001      	beq.n	80084de <USBD_StdItfReq+0x22>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d12a      	bne.n	8008534 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e4:	3b01      	subs	r3, #1
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d81d      	bhi.n	8008526 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	889b      	ldrh	r3, [r3, #4]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d813      	bhi.n	800851c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
 8008502:	4603      	mov	r3, r0
 8008504:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	88db      	ldrh	r3, [r3, #6]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d110      	bne.n	8008530 <USBD_StdItfReq+0x74>
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10d      	bne.n	8008530 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fd5e 	bl	8008fd6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800851a:	e009      	b.n	8008530 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fc8e 	bl	8008e40 <USBD_CtlError>
      break;
 8008524:	e004      	b.n	8008530 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fc89 	bl	8008e40 <USBD_CtlError>
      break;
 800852e:	e000      	b.n	8008532 <USBD_StdItfReq+0x76>
      break;
 8008530:	bf00      	nop
    }
    break;
 8008532:	e004      	b.n	800853e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fc82 	bl	8008e40 <USBD_CtlError>
    break;
 800853c:	bf00      	nop
  }

  return ret;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	889b      	ldrh	r3, [r3, #4]
 800855a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008564:	2b20      	cmp	r3, #32
 8008566:	d004      	beq.n	8008572 <USBD_StdEPReq+0x2a>
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d002      	beq.n	8008572 <USBD_StdEPReq+0x2a>
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00a      	beq.n	8008586 <USBD_StdEPReq+0x3e>
 8008570:	e135      	b.n	80087de <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
 8008580:	4603      	mov	r3, r0
 8008582:	73fb      	strb	r3, [r7, #15]
    break;
 8008584:	e130      	b.n	80087e8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	785b      	ldrb	r3, [r3, #1]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d03e      	beq.n	800860c <USBD_StdEPReq+0xc4>
 800858e:	2b03      	cmp	r3, #3
 8008590:	d002      	beq.n	8008598 <USBD_StdEPReq+0x50>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d077      	beq.n	8008686 <USBD_StdEPReq+0x13e>
 8008596:	e11c      	b.n	80087d2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d002      	beq.n	80085a8 <USBD_StdEPReq+0x60>
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d015      	beq.n	80085d2 <USBD_StdEPReq+0x8a>
 80085a6:	e02b      	b.n	8008600 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00c      	beq.n	80085c8 <USBD_StdEPReq+0x80>
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b80      	cmp	r3, #128	; 0x80
 80085b2:	d009      	beq.n	80085c8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 f92d 	bl	8009818 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085be:	2180      	movs	r1, #128	; 0x80
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 f929 	bl	8009818 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80085c6:	e020      	b.n	800860a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fc38 	bl	8008e40 <USBD_CtlError>
        break;
 80085d0:	e01b      	b.n	800860a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	885b      	ldrh	r3, [r3, #2]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10e      	bne.n	80085f8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <USBD_StdEPReq+0xb0>
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b80      	cmp	r3, #128	; 0x80
 80085e4:	d008      	beq.n	80085f8 <USBD_StdEPReq+0xb0>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	88db      	ldrh	r3, [r3, #6]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d104      	bne.n	80085f8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 f910 	bl	8009818 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fcec 	bl	8008fd6 <USBD_CtlSendStatus>

        break;
 80085fe:	e004      	b.n	800860a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fc1c 	bl	8008e40 <USBD_CtlError>
        break;
 8008608:	bf00      	nop
      }
      break;
 800860a:	e0e7      	b.n	80087dc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008612:	2b02      	cmp	r3, #2
 8008614:	d002      	beq.n	800861c <USBD_StdEPReq+0xd4>
 8008616:	2b03      	cmp	r3, #3
 8008618:	d015      	beq.n	8008646 <USBD_StdEPReq+0xfe>
 800861a:	e02d      	b.n	8008678 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00c      	beq.n	800863c <USBD_StdEPReq+0xf4>
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	2b80      	cmp	r3, #128	; 0x80
 8008626:	d009      	beq.n	800863c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f001 f8f3 	bl	8009818 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008632:	2180      	movs	r1, #128	; 0x80
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 f8ef 	bl	8009818 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800863a:	e023      	b.n	8008684 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fbfe 	bl	8008e40 <USBD_CtlError>
        break;
 8008644:	e01e      	b.n	8008684 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d119      	bne.n	8008682 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008654:	2b00      	cmp	r3, #0
 8008656:	d004      	beq.n	8008662 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f8fa 	bl	8009856 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fcb7 	bl	8008fd6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
        }
        break;
 8008676:	e004      	b.n	8008682 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fbe0 	bl	8008e40 <USBD_CtlError>
        break;
 8008680:	e000      	b.n	8008684 <USBD_StdEPReq+0x13c>
        break;
 8008682:	bf00      	nop
      }
      break;
 8008684:	e0aa      	b.n	80087dc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868c:	2b02      	cmp	r3, #2
 800868e:	d002      	beq.n	8008696 <USBD_StdEPReq+0x14e>
 8008690:	2b03      	cmp	r3, #3
 8008692:	d032      	beq.n	80086fa <USBD_StdEPReq+0x1b2>
 8008694:	e097      	b.n	80087c6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d007      	beq.n	80086ac <USBD_StdEPReq+0x164>
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	2b80      	cmp	r3, #128	; 0x80
 80086a0:	d004      	beq.n	80086ac <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fbcb 	bl	8008e40 <USBD_CtlError>
          break;
 80086aa:	e091      	b.n	80087d0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da0b      	bge.n	80086cc <USBD_StdEPReq+0x184>
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	3310      	adds	r3, #16
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	4413      	add	r3, r2
 80086c8:	3304      	adds	r3, #4
 80086ca:	e00b      	b.n	80086e4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	4413      	add	r3, r2
 80086e2:	3304      	adds	r3, #4
 80086e4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	2202      	movs	r2, #2
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fc15 	bl	8008f22 <USBD_CtlSendData>
        break;
 80086f8:	e06a      	b.n	80087d0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80086fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	da11      	bge.n	8008726 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	f003 020f 	and.w	r2, r3, #15
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	440b      	add	r3, r1
 8008714:	3324      	adds	r3, #36	; 0x24
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d117      	bne.n	800874c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fb8e 	bl	8008e40 <USBD_CtlError>
            break;
 8008724:	e054      	b.n	80087d0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	f003 020f 	and.w	r2, r3, #15
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	440b      	add	r3, r1
 8008738:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d104      	bne.n	800874c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fb7b 	bl	8008e40 <USBD_CtlError>
            break;
 800874a:	e041      	b.n	80087d0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800874c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008750:	2b00      	cmp	r3, #0
 8008752:	da0b      	bge.n	800876c <USBD_StdEPReq+0x224>
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	3310      	adds	r3, #16
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	4413      	add	r3, r2
 8008768:	3304      	adds	r3, #4
 800876a:	e00b      	b.n	8008784 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	4413      	add	r3, r2
 8008782:	3304      	adds	r3, #4
 8008784:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <USBD_StdEPReq+0x24a>
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	2b80      	cmp	r3, #128	; 0x80
 8008790:	d103      	bne.n	800879a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e00e      	b.n	80087b8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f001 f878 	bl	8009894 <USBD_LL_IsStallEP>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2201      	movs	r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	e002      	b.n	80087b8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2202      	movs	r2, #2
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fbaf 	bl	8008f22 <USBD_CtlSendData>
          break;
 80087c4:	e004      	b.n	80087d0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fb39 	bl	8008e40 <USBD_CtlError>
        break;
 80087ce:	bf00      	nop
      }
      break;
 80087d0:	e004      	b.n	80087dc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fb33 	bl	8008e40 <USBD_CtlError>
      break;
 80087da:	bf00      	nop
    }
    break;
 80087dc:	e004      	b.n	80087e8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fb2d 	bl	8008e40 <USBD_CtlError>
    break;
 80087e6:	bf00      	nop
  }

  return ret;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	885b      	ldrh	r3, [r3, #2]
 800880e:	0a1b      	lsrs	r3, r3, #8
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	2b06      	cmp	r3, #6
 8008816:	f200 8128 	bhi.w	8008a6a <USBD_GetDescriptor+0x276>
 800881a:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <USBD_GetDescriptor+0x2c>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	0800883d 	.word	0x0800883d
 8008824:	08008855 	.word	0x08008855
 8008828:	08008895 	.word	0x08008895
 800882c:	08008a6b 	.word	0x08008a6b
 8008830:	08008a6b 	.word	0x08008a6b
 8008834:	08008a0b 	.word	0x08008a0b
 8008838:	08008a37 	.word	0x08008a37
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	7c12      	ldrb	r2, [r2, #16]
 8008848:	f107 0108 	add.w	r1, r7, #8
 800884c:	4610      	mov	r0, r2
 800884e:	4798      	blx	r3
 8008850:	60f8      	str	r0, [r7, #12]
    break;
 8008852:	e112      	b.n	8008a7a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	7c1b      	ldrb	r3, [r3, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10d      	bne.n	8008878 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	f107 0208 	add.w	r2, r7, #8
 8008868:	4610      	mov	r0, r2
 800886a:	4798      	blx	r3
 800886c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3301      	adds	r3, #1
 8008872:	2202      	movs	r2, #2
 8008874:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008876:	e100      	b.n	8008a7a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	f107 0208 	add.w	r2, r7, #8
 8008884:	4610      	mov	r0, r2
 8008886:	4798      	blx	r3
 8008888:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3301      	adds	r3, #1
 800888e:	2202      	movs	r2, #2
 8008890:	701a      	strb	r2, [r3, #0]
    break;
 8008892:	e0f2      	b.n	8008a7a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	885b      	ldrh	r3, [r3, #2]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b05      	cmp	r3, #5
 800889c:	f200 80ac 	bhi.w	80089f8 <USBD_GetDescriptor+0x204>
 80088a0:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <USBD_GetDescriptor+0xb4>)
 80088a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a6:	bf00      	nop
 80088a8:	080088c1 	.word	0x080088c1
 80088ac:	080088f5 	.word	0x080088f5
 80088b0:	08008929 	.word	0x08008929
 80088b4:	0800895d 	.word	0x0800895d
 80088b8:	08008991 	.word	0x08008991
 80088bc:	080089c5 	.word	0x080089c5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00b      	beq.n	80088e4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088e2:	e091      	b.n	8008a08 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 faaa 	bl	8008e40 <USBD_CtlError>
        err++;
 80088ec:	7afb      	ldrb	r3, [r7, #11]
 80088ee:	3301      	adds	r3, #1
 80088f0:	72fb      	strb	r3, [r7, #11]
      break;
 80088f2:	e089      	b.n	8008a08 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	7c12      	ldrb	r2, [r2, #16]
 800890c:	f107 0108 	add.w	r1, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008916:	e077      	b.n	8008a08 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fa90 	bl	8008e40 <USBD_CtlError>
        err++;
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	3301      	adds	r3, #1
 8008924:	72fb      	strb	r3, [r7, #11]
      break;
 8008926:	e06f      	b.n	8008a08 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	7c12      	ldrb	r2, [r2, #16]
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800894a:	e05d      	b.n	8008a08 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fa76 	bl	8008e40 <USBD_CtlError>
        err++;
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	3301      	adds	r3, #1
 8008958:	72fb      	strb	r3, [r7, #11]
      break;
 800895a:	e055      	b.n	8008a08 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	7c12      	ldrb	r2, [r2, #16]
 8008974:	f107 0108 	add.w	r1, r7, #8
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800897e:	e043      	b.n	8008a08 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fa5c 	bl	8008e40 <USBD_CtlError>
        err++;
 8008988:	7afb      	ldrb	r3, [r7, #11]
 800898a:	3301      	adds	r3, #1
 800898c:	72fb      	strb	r3, [r7, #11]
      break;
 800898e:	e03b      	b.n	8008a08 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	7c12      	ldrb	r2, [r2, #16]
 80089a8:	f107 0108 	add.w	r1, r7, #8
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089b2:	e029      	b.n	8008a08 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa42 	bl	8008e40 <USBD_CtlError>
        err++;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	3301      	adds	r3, #1
 80089c0:	72fb      	strb	r3, [r7, #11]
      break;
 80089c2:	e021      	b.n	8008a08 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00b      	beq.n	80089e8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7c12      	ldrb	r2, [r2, #16]
 80089dc:	f107 0108 	add.w	r1, r7, #8
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089e6:	e00f      	b.n	8008a08 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa28 	bl	8008e40 <USBD_CtlError>
        err++;
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	3301      	adds	r3, #1
 80089f4:	72fb      	strb	r3, [r7, #11]
      break;
 80089f6:	e007      	b.n	8008a08 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa20 	bl	8008e40 <USBD_CtlError>
      err++;
 8008a00:	7afb      	ldrb	r3, [r7, #11]
 8008a02:	3301      	adds	r3, #1
 8008a04:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a06:	bf00      	nop
    }
    break;
 8008a08:	e037      	b.n	8008a7a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	7c1b      	ldrb	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1a:	f107 0208 	add.w	r2, r7, #8
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4798      	blx	r3
 8008a22:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a24:	e029      	b.n	8008a7a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fa09 	bl	8008e40 <USBD_CtlError>
      err++;
 8008a2e:	7afb      	ldrb	r3, [r7, #11]
 8008a30:	3301      	adds	r3, #1
 8008a32:	72fb      	strb	r3, [r7, #11]
    break;
 8008a34:	e021      	b.n	8008a7a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	7c1b      	ldrb	r3, [r3, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10d      	bne.n	8008a5a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	f107 0208 	add.w	r2, r7, #8
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	4798      	blx	r3
 8008a4e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3301      	adds	r3, #1
 8008a54:	2207      	movs	r2, #7
 8008a56:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a58:	e00f      	b.n	8008a7a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f9ef 	bl	8008e40 <USBD_CtlError>
      err++;
 8008a62:	7afb      	ldrb	r3, [r7, #11]
 8008a64:	3301      	adds	r3, #1
 8008a66:	72fb      	strb	r3, [r7, #11]
    break;
 8008a68:	e007      	b.n	8008a7a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f9e7 	bl	8008e40 <USBD_CtlError>
    err++;
 8008a72:	7afb      	ldrb	r3, [r7, #11]
 8008a74:	3301      	adds	r3, #1
 8008a76:	72fb      	strb	r3, [r7, #11]
    break;
 8008a78:	bf00      	nop
  }

  if (err != 0U)
 8008a7a:	7afb      	ldrb	r3, [r7, #11]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d11e      	bne.n	8008abe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	88db      	ldrh	r3, [r3, #6]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d016      	beq.n	8008ab6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008a88:	893b      	ldrh	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00e      	beq.n	8008aac <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	88da      	ldrh	r2, [r3, #6]
 8008a92:	893b      	ldrh	r3, [r7, #8]
 8008a94:	4293      	cmp	r3, r2
 8008a96:	bf28      	it	cs
 8008a98:	4613      	movcs	r3, r2
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a9e:	893b      	ldrh	r3, [r7, #8]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	68f9      	ldr	r1, [r7, #12]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fa3c 	bl	8008f22 <USBD_CtlSendData>
 8008aaa:	e009      	b.n	8008ac0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f9c6 	bl	8008e40 <USBD_CtlError>
 8008ab4:	e004      	b.n	8008ac0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa8d 	bl	8008fd6 <USBD_CtlSendStatus>
 8008abc:	e000      	b.n	8008ac0 <USBD_GetDescriptor+0x2cc>
    return;
 8008abe:	bf00      	nop
    }
  }
}
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop

08008ac8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	889b      	ldrh	r3, [r3, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d130      	bne.n	8008b3c <USBD_SetAddress+0x74>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	88db      	ldrh	r3, [r3, #6]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d12c      	bne.n	8008b3c <USBD_SetAddress+0x74>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ae8:	d828      	bhi.n	8008b3c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	885b      	ldrh	r3, [r3, #2]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d104      	bne.n	8008b0a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f99c 	bl	8008e40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b08:	e01c      	b.n	8008b44 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	7bfa      	ldrb	r2, [r7, #15]
 8008b0e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fee8 	bl	80098ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa5a 	bl	8008fd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b30:	e008      	b.n	8008b44 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3a:	e003      	b.n	8008b44 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f97e 	bl	8008e40 <USBD_CtlError>
  }
}
 8008b44:	bf00      	nop
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	885b      	ldrh	r3, [r3, #2]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	4b4b      	ldr	r3, [pc, #300]	; (8008c90 <USBD_SetConfig+0x144>)
 8008b62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b64:	4b4a      	ldr	r3, [pc, #296]	; (8008c90 <USBD_SetConfig+0x144>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d905      	bls.n	8008b78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f966 	bl	8008e40 <USBD_CtlError>
    return USBD_FAIL;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e087      	b.n	8008c88 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d002      	beq.n	8008b88 <USBD_SetConfig+0x3c>
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d025      	beq.n	8008bd2 <USBD_SetConfig+0x86>
 8008b86:	e071      	b.n	8008c6c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008b88:	4b41      	ldr	r3, [pc, #260]	; (8008c90 <USBD_SetConfig+0x144>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d01c      	beq.n	8008bca <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008b90:	4b3f      	ldr	r3, [pc, #252]	; (8008c90 <USBD_SetConfig+0x144>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b9a:	4b3d      	ldr	r3, [pc, #244]	; (8008c90 <USBD_SetConfig+0x144>)
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff f9a7 	bl	8007ef4 <USBD_SetClassConfig>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d004      	beq.n	8008bba <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f944 	bl	8008e40 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008bb8:	e065      	b.n	8008c86 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa0b 	bl	8008fd6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2203      	movs	r2, #3
 8008bc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008bc8:	e05d      	b.n	8008c86 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa03 	bl	8008fd6 <USBD_CtlSendStatus>
    break;
 8008bd0:	e059      	b.n	8008c86 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008bd2:	4b2f      	ldr	r3, [pc, #188]	; (8008c90 <USBD_SetConfig+0x144>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d112      	bne.n	8008c00 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2202      	movs	r2, #2
 8008bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008be2:	4b2b      	ldr	r3, [pc, #172]	; (8008c90 <USBD_SetConfig+0x144>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bec:	4b28      	ldr	r3, [pc, #160]	; (8008c90 <USBD_SetConfig+0x144>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff f99a 	bl	8007f2c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f9ec 	bl	8008fd6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008bfe:	e042      	b.n	8008c86 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c00:	4b23      	ldr	r3, [pc, #140]	; (8008c90 <USBD_SetConfig+0x144>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d02a      	beq.n	8008c64 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff f988 	bl	8007f2c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008c1c:	4b1c      	ldr	r3, [pc, #112]	; (8008c90 <USBD_SetConfig+0x144>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c26:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <USBD_SetConfig+0x144>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff f961 	bl	8007ef4 <USBD_SetClassConfig>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00f      	beq.n	8008c5c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f8fe 	bl	8008e40 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff f96d 	bl	8007f2c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2202      	movs	r2, #2
 8008c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c5a:	e014      	b.n	8008c86 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f9ba 	bl	8008fd6 <USBD_CtlSendStatus>
    break;
 8008c62:	e010      	b.n	8008c86 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f9b6 	bl	8008fd6 <USBD_CtlSendStatus>
    break;
 8008c6a:	e00c      	b.n	8008c86 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f8e6 	bl	8008e40 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c74:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <USBD_SetConfig+0x144>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff f956 	bl	8007f2c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008c80:	2303      	movs	r3, #3
 8008c82:	73fb      	strb	r3, [r7, #15]
    break;
 8008c84:	bf00      	nop
  }

  return ret;
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20000230 	.word	0x20000230

08008c94 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	88db      	ldrh	r3, [r3, #6]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d004      	beq.n	8008cb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f8c9 	bl	8008e40 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008cae:	e021      	b.n	8008cf4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	db17      	blt.n	8008cea <USBD_GetConfig+0x56>
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	dd02      	ble.n	8008cc4 <USBD_GetConfig+0x30>
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d00b      	beq.n	8008cda <USBD_GetConfig+0x46>
 8008cc2:	e012      	b.n	8008cea <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3308      	adds	r3, #8
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f925 	bl	8008f22 <USBD_CtlSendData>
      break;
 8008cd8:	e00c      	b.n	8008cf4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f91d 	bl	8008f22 <USBD_CtlSendData>
      break;
 8008ce8:	e004      	b.n	8008cf4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f8a7 	bl	8008e40 <USBD_CtlError>
      break;
 8008cf2:	bf00      	nop
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d81e      	bhi.n	8008d50 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	88db      	ldrh	r3, [r3, #6]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d004      	beq.n	8008d24 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f88f 	bl	8008e40 <USBD_CtlError>
      break;
 8008d22:	e01a      	b.n	8008d5a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f043 0202 	orr.w	r2, r3, #2
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	330c      	adds	r3, #12
 8008d44:	2202      	movs	r2, #2
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f8ea 	bl	8008f22 <USBD_CtlSendData>
    break;
 8008d4e:	e004      	b.n	8008d5a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f874 	bl	8008e40 <USBD_CtlError>
    break;
 8008d58:	bf00      	nop
  }
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	885b      	ldrh	r3, [r3, #2]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d106      	bne.n	8008d82 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f92a 	bl	8008fd6 <USBD_CtlSendStatus>
  }
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d80b      	bhi.n	8008db8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	885b      	ldrh	r3, [r3, #2]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d10c      	bne.n	8008dc2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f910 	bl	8008fd6 <USBD_CtlSendStatus>
      }
      break;
 8008db6:	e004      	b.n	8008dc2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f840 	bl	8008e40 <USBD_CtlError>
      break;
 8008dc0:	e000      	b.n	8008dc4 <USBD_ClrFeature+0x3a>
      break;
 8008dc2:	bf00      	nop
  }
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	781a      	ldrb	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3301      	adds	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3301      	adds	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f7ff fad3 	bl	80083a2 <SWAPBYTE>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	461a      	mov	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f7ff fac6 	bl	80083a2 <SWAPBYTE>
 8008e16:	4603      	mov	r3, r0
 8008e18:	461a      	mov	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3301      	adds	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7ff fab9 	bl	80083a2 <SWAPBYTE>
 8008e30:	4603      	mov	r3, r0
 8008e32:	461a      	mov	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	80da      	strh	r2, [r3, #6]
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e4a:	2180      	movs	r1, #128	; 0x80
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fce3 	bl	8009818 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e52:	2100      	movs	r1, #0
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fcdf 	bl	8009818 <USBD_LL_StallEP>
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d036      	beq.n	8008ee6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e7c:	6938      	ldr	r0, [r7, #16]
 8008e7e:	f000 f836 	bl	8008eee <USBD_GetLen>
 8008e82:	4603      	mov	r3, r0
 8008e84:	3301      	adds	r3, #1
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e90:	7dfb      	ldrb	r3, [r7, #23]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	4413      	add	r3, r2
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	7812      	ldrb	r2, [r2, #0]
 8008e9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	2203      	movs	r2, #3
 8008eaa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008eb2:	e013      	b.n	8008edc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	4413      	add	r3, r2
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	613b      	str	r3, [r7, #16]
    idx++;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e7      	bne.n	8008eb4 <USBD_GetString+0x52>
 8008ee4:	e000      	b.n	8008ee8 <USBD_GetString+0x86>
    return;
 8008ee6:	bf00      	nop
  }
}
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008efe:	e005      	b.n	8008f0c <USBD_GetLen+0x1e>
  {
    len++;
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	3301      	adds	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f5      	bne.n	8008f00 <USBD_GetLen+0x12>
  }

  return len;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2202      	movs	r2, #2
 8008f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	2100      	movs	r1, #0
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fcee 	bl	800992a <USBD_LL_Transmit>

  return USBD_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fcdd 	bl	800992a <USBD_LL_Transmit>

  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2203      	movs	r2, #3
 8008f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fce1 	bl	800996c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fcd0 	bl	800996c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fc9c 	bl	800992a <USBD_LL_Transmit>

  return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2205      	movs	r2, #5
 8009008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800900c:	2300      	movs	r3, #0
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fcaa 	bl	800996c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009028:	2200      	movs	r2, #0
 800902a:	4912      	ldr	r1, [pc, #72]	; (8009074 <MX_USB_DEVICE_Init+0x50>)
 800902c:	4812      	ldr	r0, [pc, #72]	; (8009078 <MX_USB_DEVICE_Init+0x54>)
 800902e:	f7fe fef3 	bl	8007e18 <USBD_Init>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009038:	f7f7 ff96 	bl	8000f68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800903c:	490f      	ldr	r1, [pc, #60]	; (800907c <MX_USB_DEVICE_Init+0x58>)
 800903e:	480e      	ldr	r0, [pc, #56]	; (8009078 <MX_USB_DEVICE_Init+0x54>)
 8009040:	f7fe ff20 	bl	8007e84 <USBD_RegisterClass>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800904a:	f7f7 ff8d 	bl	8000f68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800904e:	490c      	ldr	r1, [pc, #48]	; (8009080 <MX_USB_DEVICE_Init+0x5c>)
 8009050:	4809      	ldr	r0, [pc, #36]	; (8009078 <MX_USB_DEVICE_Init+0x54>)
 8009052:	f7fe fe45 	bl	8007ce0 <USBD_CDC_RegisterInterface>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800905c:	f7f7 ff84 	bl	8000f68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009060:	4805      	ldr	r0, [pc, #20]	; (8009078 <MX_USB_DEVICE_Init+0x54>)
 8009062:	f7fe ff30 	bl	8007ec6 <USBD_Start>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800906c:	f7f7 ff7c 	bl	8000f68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009070:	bf00      	nop
 8009072:	bd80      	pop	{r7, pc}
 8009074:	20000150 	.word	0x20000150
 8009078:	20000410 	.word	0x20000410
 800907c:	20000038 	.word	0x20000038
 8009080:	2000013c 	.word	0x2000013c

08009084 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009088:	2200      	movs	r2, #0
 800908a:	4905      	ldr	r1, [pc, #20]	; (80090a0 <CDC_Init_FS+0x1c>)
 800908c:	4805      	ldr	r0, [pc, #20]	; (80090a4 <CDC_Init_FS+0x20>)
 800908e:	f7fe fe3c 	bl	8007d0a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009092:	4905      	ldr	r1, [pc, #20]	; (80090a8 <CDC_Init_FS+0x24>)
 8009094:	4803      	ldr	r0, [pc, #12]	; (80090a4 <CDC_Init_FS+0x20>)
 8009096:	f7fe fe51 	bl	8007d3c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800909a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800909c:	4618      	mov	r0, r3
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20000ee0 	.word	0x20000ee0
 80090a4:	20000410 	.word	0x20000410
 80090a8:	200006e0 	.word	0x200006e0

080090ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	6039      	str	r1, [r7, #0]
 80090c6:	71fb      	strb	r3, [r7, #7]
 80090c8:	4613      	mov	r3, r2
 80090ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b23      	cmp	r3, #35	; 0x23
 80090d0:	d84a      	bhi.n	8009168 <CDC_Control_FS+0xac>
 80090d2:	a201      	add	r2, pc, #4	; (adr r2, 80090d8 <CDC_Control_FS+0x1c>)
 80090d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d8:	08009169 	.word	0x08009169
 80090dc:	08009169 	.word	0x08009169
 80090e0:	08009169 	.word	0x08009169
 80090e4:	08009169 	.word	0x08009169
 80090e8:	08009169 	.word	0x08009169
 80090ec:	08009169 	.word	0x08009169
 80090f0:	08009169 	.word	0x08009169
 80090f4:	08009169 	.word	0x08009169
 80090f8:	08009169 	.word	0x08009169
 80090fc:	08009169 	.word	0x08009169
 8009100:	08009169 	.word	0x08009169
 8009104:	08009169 	.word	0x08009169
 8009108:	08009169 	.word	0x08009169
 800910c:	08009169 	.word	0x08009169
 8009110:	08009169 	.word	0x08009169
 8009114:	08009169 	.word	0x08009169
 8009118:	08009169 	.word	0x08009169
 800911c:	08009169 	.word	0x08009169
 8009120:	08009169 	.word	0x08009169
 8009124:	08009169 	.word	0x08009169
 8009128:	08009169 	.word	0x08009169
 800912c:	08009169 	.word	0x08009169
 8009130:	08009169 	.word	0x08009169
 8009134:	08009169 	.word	0x08009169
 8009138:	08009169 	.word	0x08009169
 800913c:	08009169 	.word	0x08009169
 8009140:	08009169 	.word	0x08009169
 8009144:	08009169 	.word	0x08009169
 8009148:	08009169 	.word	0x08009169
 800914c:	08009169 	.word	0x08009169
 8009150:	08009169 	.word	0x08009169
 8009154:	08009169 	.word	0x08009169
 8009158:	08009169 	.word	0x08009169
 800915c:	08009169 	.word	0x08009169
 8009160:	08009169 	.word	0x08009169
 8009164:	08009169 	.word	0x08009169
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009168:	bf00      	nop
  }

  return (USBD_OK);
 800916a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	4805      	ldr	r0, [pc, #20]	; (800919c <CDC_Receive_FS+0x24>)
 8009186:	f7fe fdd9 	bl	8007d3c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800918a:	4804      	ldr	r0, [pc, #16]	; (800919c <CDC_Receive_FS+0x24>)
 800918c:	f7fe fe1a 	bl	8007dc4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009190:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	20000410 	.word	0x20000410

080091a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80091b0:	4b0d      	ldr	r3, [pc, #52]	; (80091e8 <CDC_Transmit_FS+0x48>)
 80091b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e00b      	b.n	80091de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80091c6:	887b      	ldrh	r3, [r7, #2]
 80091c8:	461a      	mov	r2, r3
 80091ca:	6879      	ldr	r1, [r7, #4]
 80091cc:	4806      	ldr	r0, [pc, #24]	; (80091e8 <CDC_Transmit_FS+0x48>)
 80091ce:	f7fe fd9c 	bl	8007d0a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80091d2:	4805      	ldr	r0, [pc, #20]	; (80091e8 <CDC_Transmit_FS+0x48>)
 80091d4:	f7fe fdc6 	bl	8007d64 <USBD_CDC_TransmitPacket>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20000410 	.word	0x20000410

080091ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80091fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009202:	4618      	mov	r0, r3
 8009204:	371c      	adds	r7, #28
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
	...

08009210 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	6039      	str	r1, [r7, #0]
 800921a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2212      	movs	r2, #18
 8009220:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009222:	4b03      	ldr	r3, [pc, #12]	; (8009230 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009224:	4618      	mov	r0, r3
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	2000016c 	.word	0x2000016c

08009234 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2204      	movs	r2, #4
 8009244:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009246:	4b03      	ldr	r3, [pc, #12]	; (8009254 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	20000180 	.word	0x20000180

08009258 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d105      	bne.n	8009276 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	4907      	ldr	r1, [pc, #28]	; (800928c <USBD_FS_ProductStrDescriptor+0x34>)
 800926e:	4808      	ldr	r0, [pc, #32]	; (8009290 <USBD_FS_ProductStrDescriptor+0x38>)
 8009270:	f7ff fdf7 	bl	8008e62 <USBD_GetString>
 8009274:	e004      	b.n	8009280 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4904      	ldr	r1, [pc, #16]	; (800928c <USBD_FS_ProductStrDescriptor+0x34>)
 800927a:	4805      	ldr	r0, [pc, #20]	; (8009290 <USBD_FS_ProductStrDescriptor+0x38>)
 800927c:	f7ff fdf1 	bl	8008e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009280:	4b02      	ldr	r3, [pc, #8]	; (800928c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	200016e0 	.word	0x200016e0
 8009290:	0800a5d8 	.word	0x0800a5d8

08009294 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	4904      	ldr	r1, [pc, #16]	; (80092b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092a4:	4804      	ldr	r0, [pc, #16]	; (80092b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092a6:	f7ff fddc 	bl	8008e62 <USBD_GetString>
  return USBD_StrDesc;
 80092aa:	4b02      	ldr	r3, [pc, #8]	; (80092b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	200016e0 	.word	0x200016e0
 80092b8:	0800a5f0 	.word	0x0800a5f0

080092bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	6039      	str	r1, [r7, #0]
 80092c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	221a      	movs	r2, #26
 80092cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092ce:	f000 f843 	bl	8009358 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092d2:	4b02      	ldr	r3, [pc, #8]	; (80092dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	20000184 	.word	0x20000184

080092e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092ec:	79fb      	ldrb	r3, [r7, #7]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4907      	ldr	r1, [pc, #28]	; (8009314 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092f6:	4808      	ldr	r0, [pc, #32]	; (8009318 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092f8:	f7ff fdb3 	bl	8008e62 <USBD_GetString>
 80092fc:	e004      	b.n	8009308 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	4904      	ldr	r1, [pc, #16]	; (8009314 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009302:	4805      	ldr	r0, [pc, #20]	; (8009318 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009304:	f7ff fdad 	bl	8008e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009308:	4b02      	ldr	r3, [pc, #8]	; (8009314 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	200016e0 	.word	0x200016e0
 8009318:	0800a5f4 	.word	0x0800a5f4

0800931c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	6039      	str	r1, [r7, #0]
 8009326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d105      	bne.n	800933a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	4907      	ldr	r1, [pc, #28]	; (8009350 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009332:	4808      	ldr	r0, [pc, #32]	; (8009354 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009334:	f7ff fd95 	bl	8008e62 <USBD_GetString>
 8009338:	e004      	b.n	8009344 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	4904      	ldr	r1, [pc, #16]	; (8009350 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800933e:	4805      	ldr	r0, [pc, #20]	; (8009354 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009340:	f7ff fd8f 	bl	8008e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009344:	4b02      	ldr	r3, [pc, #8]	; (8009350 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	200016e0 	.word	0x200016e0
 8009354:	0800a600 	.word	0x0800a600

08009358 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <Get_SerialNum+0x44>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009364:	4b0e      	ldr	r3, [pc, #56]	; (80093a0 <Get_SerialNum+0x48>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800936a:	4b0e      	ldr	r3, [pc, #56]	; (80093a4 <Get_SerialNum+0x4c>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4413      	add	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d009      	beq.n	8009392 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800937e:	2208      	movs	r2, #8
 8009380:	4909      	ldr	r1, [pc, #36]	; (80093a8 <Get_SerialNum+0x50>)
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f000 f814 	bl	80093b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009388:	2204      	movs	r2, #4
 800938a:	4908      	ldr	r1, [pc, #32]	; (80093ac <Get_SerialNum+0x54>)
 800938c:	68b8      	ldr	r0, [r7, #8]
 800938e:	f000 f80f 	bl	80093b0 <IntToUnicode>
  }
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	1fff7a10 	.word	0x1fff7a10
 80093a0:	1fff7a14 	.word	0x1fff7a14
 80093a4:	1fff7a18 	.word	0x1fff7a18
 80093a8:	20000186 	.word	0x20000186
 80093ac:	20000196 	.word	0x20000196

080093b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	4613      	mov	r3, r2
 80093bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093c2:	2300      	movs	r3, #0
 80093c4:	75fb      	strb	r3, [r7, #23]
 80093c6:	e027      	b.n	8009418 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	0f1b      	lsrs	r3, r3, #28
 80093cc:	2b09      	cmp	r3, #9
 80093ce:	d80b      	bhi.n	80093e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	0f1b      	lsrs	r3, r3, #28
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	005b      	lsls	r3, r3, #1
 80093da:	4619      	mov	r1, r3
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	440b      	add	r3, r1
 80093e0:	3230      	adds	r2, #48	; 0x30
 80093e2:	b2d2      	uxtb	r2, r2
 80093e4:	701a      	strb	r2, [r3, #0]
 80093e6:	e00a      	b.n	80093fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	0f1b      	lsrs	r3, r3, #28
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	4619      	mov	r1, r3
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	440b      	add	r3, r1
 80093f8:	3237      	adds	r2, #55	; 0x37
 80093fa:	b2d2      	uxtb	r2, r2
 80093fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	011b      	lsls	r3, r3, #4
 8009402:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	3301      	adds	r3, #1
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4413      	add	r3, r2
 800940e:	2200      	movs	r2, #0
 8009410:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009412:	7dfb      	ldrb	r3, [r7, #23]
 8009414:	3301      	adds	r3, #1
 8009416:	75fb      	strb	r3, [r7, #23]
 8009418:	7dfa      	ldrb	r2, [r7, #23]
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	429a      	cmp	r2, r3
 800941e:	d3d3      	bcc.n	80093c8 <IntToUnicode+0x18>
  }
}
 8009420:	bf00      	nop
 8009422:	371c      	adds	r7, #28
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08a      	sub	sp, #40	; 0x28
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009434:	f107 0314 	add.w	r3, r7, #20
 8009438:	2200      	movs	r2, #0
 800943a:	601a      	str	r2, [r3, #0]
 800943c:	605a      	str	r2, [r3, #4]
 800943e:	609a      	str	r2, [r3, #8]
 8009440:	60da      	str	r2, [r3, #12]
 8009442:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800944c:	d147      	bne.n	80094de <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800944e:	2300      	movs	r3, #0
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	4b25      	ldr	r3, [pc, #148]	; (80094e8 <HAL_PCD_MspInit+0xbc>)
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	4a24      	ldr	r2, [pc, #144]	; (80094e8 <HAL_PCD_MspInit+0xbc>)
 8009458:	f043 0301 	orr.w	r3, r3, #1
 800945c:	6313      	str	r3, [r2, #48]	; 0x30
 800945e:	4b22      	ldr	r3, [pc, #136]	; (80094e8 <HAL_PCD_MspInit+0xbc>)
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	613b      	str	r3, [r7, #16]
 8009468:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800946a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800946e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009470:	2300      	movs	r3, #0
 8009472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009474:	2300      	movs	r3, #0
 8009476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009478:	f107 0314 	add.w	r3, r7, #20
 800947c:	4619      	mov	r1, r3
 800947e:	481b      	ldr	r0, [pc, #108]	; (80094ec <HAL_PCD_MspInit+0xc0>)
 8009480:	f7f8 fa06 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009484:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800948a:	2302      	movs	r3, #2
 800948c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800948e:	2300      	movs	r3, #0
 8009490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009492:	2303      	movs	r3, #3
 8009494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009496:	230a      	movs	r3, #10
 8009498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800949a:	f107 0314 	add.w	r3, r7, #20
 800949e:	4619      	mov	r1, r3
 80094a0:	4812      	ldr	r0, [pc, #72]	; (80094ec <HAL_PCD_MspInit+0xc0>)
 80094a2:	f7f8 f9f5 	bl	8001890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094a6:	4b10      	ldr	r3, [pc, #64]	; (80094e8 <HAL_PCD_MspInit+0xbc>)
 80094a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094aa:	4a0f      	ldr	r2, [pc, #60]	; (80094e8 <HAL_PCD_MspInit+0xbc>)
 80094ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b0:	6353      	str	r3, [r2, #52]	; 0x34
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	4b0c      	ldr	r3, [pc, #48]	; (80094e8 <HAL_PCD_MspInit+0xbc>)
 80094b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ba:	4a0b      	ldr	r2, [pc, #44]	; (80094e8 <HAL_PCD_MspInit+0xbc>)
 80094bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094c0:	6453      	str	r3, [r2, #68]	; 0x44
 80094c2:	4b09      	ldr	r3, [pc, #36]	; (80094e8 <HAL_PCD_MspInit+0xbc>)
 80094c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094ce:	2200      	movs	r2, #0
 80094d0:	2100      	movs	r1, #0
 80094d2:	2043      	movs	r0, #67	; 0x43
 80094d4:	f7f8 f98c 	bl	80017f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094d8:	2043      	movs	r0, #67	; 0x43
 80094da:	f7f8 f9b5 	bl	8001848 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094de:	bf00      	nop
 80094e0:	3728      	adds	r7, #40	; 0x28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	40023800 	.word	0x40023800
 80094ec:	40020000 	.word	0x40020000

080094f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009504:	4619      	mov	r1, r3
 8009506:	4610      	mov	r0, r2
 8009508:	f7fe fd28 	bl	8007f5c <USBD_LL_SetupStage>
}
 800950c:	bf00      	nop
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009526:	78fa      	ldrb	r2, [r7, #3]
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	4613      	mov	r3, r2
 800952c:	00db      	lsls	r3, r3, #3
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	78fb      	ldrb	r3, [r7, #3]
 800953c:	4619      	mov	r1, r3
 800953e:	f7fe fd60 	bl	8008002 <USBD_LL_DataOutStage>
}
 8009542:	bf00      	nop
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	460b      	mov	r3, r1
 8009554:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800955c:	78fa      	ldrb	r2, [r7, #3]
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4613      	mov	r3, r2
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	1a9b      	subs	r3, r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	3348      	adds	r3, #72	; 0x48
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	4619      	mov	r1, r3
 8009572:	f7fe fda9 	bl	80080c8 <USBD_LL_DataInStage>
}
 8009576:	bf00      	nop
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800958c:	4618      	mov	r0, r3
 800958e:	f7fe fead 	bl	80082ec <USBD_LL_SOF>
}
 8009592:	bf00      	nop
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095a2:	2301      	movs	r3, #1
 80095a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d001      	beq.n	80095b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095ae:	f7f7 fcdb 	bl	8000f68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095b8:	7bfa      	ldrb	r2, [r7, #15]
 80095ba:	4611      	mov	r1, r2
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fe5a 	bl	8008276 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe fe13 	bl	80081f4 <USBD_LL_Reset>
}
 80095ce:	bf00      	nop
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe fe55 	bl	8008296 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	6812      	ldr	r2, [r2, #0]
 80095fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095fe:	f043 0301 	orr.w	r3, r3, #1
 8009602:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d005      	beq.n	8009618 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800960c:	4b04      	ldr	r3, [pc, #16]	; (8009620 <HAL_PCD_SuspendCallback+0x48>)
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	4a03      	ldr	r2, [pc, #12]	; (8009620 <HAL_PCD_SuspendCallback+0x48>)
 8009612:	f043 0306 	orr.w	r3, r3, #6
 8009616:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	e000ed00 	.word	0xe000ed00

08009624 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe fe44 	bl	80082c0 <USBD_LL_Resume>
}
 8009638:	bf00      	nop
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009652:	78fa      	ldrb	r2, [r7, #3]
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe fe6f 	bl	800833a <USBD_LL_IsoOUTIncomplete>
}
 800965c:	bf00      	nop
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009676:	78fa      	ldrb	r2, [r7, #3]
 8009678:	4611      	mov	r1, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe fe50 	bl	8008320 <USBD_LL_IsoINIncomplete>
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe fe5c 	bl	8008354 <USBD_LL_DevConnected>
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe fe59 	bl	800836a <USBD_LL_DevDisconnected>
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d13c      	bne.n	800974a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80096d0:	4a20      	ldr	r2, [pc, #128]	; (8009754 <USBD_LL_Init+0x94>)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a1e      	ldr	r2, [pc, #120]	; (8009754 <USBD_LL_Init+0x94>)
 80096dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096e0:	4b1c      	ldr	r3, [pc, #112]	; (8009754 <USBD_LL_Init+0x94>)
 80096e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80096e8:	4b1a      	ldr	r3, [pc, #104]	; (8009754 <USBD_LL_Init+0x94>)
 80096ea:	2204      	movs	r2, #4
 80096ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80096ee:	4b19      	ldr	r3, [pc, #100]	; (8009754 <USBD_LL_Init+0x94>)
 80096f0:	2202      	movs	r2, #2
 80096f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096f4:	4b17      	ldr	r3, [pc, #92]	; (8009754 <USBD_LL_Init+0x94>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096fa:	4b16      	ldr	r3, [pc, #88]	; (8009754 <USBD_LL_Init+0x94>)
 80096fc:	2202      	movs	r2, #2
 80096fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009700:	4b14      	ldr	r3, [pc, #80]	; (8009754 <USBD_LL_Init+0x94>)
 8009702:	2200      	movs	r2, #0
 8009704:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009706:	4b13      	ldr	r3, [pc, #76]	; (8009754 <USBD_LL_Init+0x94>)
 8009708:	2200      	movs	r2, #0
 800970a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800970c:	4b11      	ldr	r3, [pc, #68]	; (8009754 <USBD_LL_Init+0x94>)
 800970e:	2200      	movs	r2, #0
 8009710:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009712:	4b10      	ldr	r3, [pc, #64]	; (8009754 <USBD_LL_Init+0x94>)
 8009714:	2201      	movs	r2, #1
 8009716:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009718:	4b0e      	ldr	r3, [pc, #56]	; (8009754 <USBD_LL_Init+0x94>)
 800971a:	2200      	movs	r2, #0
 800971c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800971e:	480d      	ldr	r0, [pc, #52]	; (8009754 <USBD_LL_Init+0x94>)
 8009720:	f7f9 faec 	bl	8002cfc <HAL_PCD_Init>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800972a:	f7f7 fc1d 	bl	8000f68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800972e:	2180      	movs	r1, #128	; 0x80
 8009730:	4808      	ldr	r0, [pc, #32]	; (8009754 <USBD_LL_Init+0x94>)
 8009732:	f7fa fc54 	bl	8003fde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009736:	2240      	movs	r2, #64	; 0x40
 8009738:	2100      	movs	r1, #0
 800973a:	4806      	ldr	r0, [pc, #24]	; (8009754 <USBD_LL_Init+0x94>)
 800973c:	f7fa fc08 	bl	8003f50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009740:	2280      	movs	r2, #128	; 0x80
 8009742:	2101      	movs	r1, #1
 8009744:	4803      	ldr	r0, [pc, #12]	; (8009754 <USBD_LL_Init+0x94>)
 8009746:	f7fa fc03 	bl	8003f50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	200018e0 	.word	0x200018e0

08009758 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800976e:	4618      	mov	r0, r3
 8009770:	f7f9 fbec 	bl	8002f4c <HAL_PCD_Start>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	4618      	mov	r0, r3
 800977c:	f000 f92a 	bl	80099d4 <USBD_Get_USB_Status>
 8009780:	4603      	mov	r3, r0
 8009782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009784:	7bbb      	ldrb	r3, [r7, #14]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	4608      	mov	r0, r1
 8009798:	4611      	mov	r1, r2
 800979a:	461a      	mov	r2, r3
 800979c:	4603      	mov	r3, r0
 800979e:	70fb      	strb	r3, [r7, #3]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70bb      	strb	r3, [r7, #2]
 80097a4:	4613      	mov	r3, r2
 80097a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097b6:	78bb      	ldrb	r3, [r7, #2]
 80097b8:	883a      	ldrh	r2, [r7, #0]
 80097ba:	78f9      	ldrb	r1, [r7, #3]
 80097bc:	f7f9 ffd0 	bl	8003760 <HAL_PCD_EP_Open>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 f904 	bl	80099d4 <USBD_Get_USB_Status>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	460b      	mov	r3, r1
 80097e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	4611      	mov	r1, r2
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fa f819 	bl	8003830 <HAL_PCD_EP_Close>
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	4618      	mov	r0, r3
 8009806:	f000 f8e5 	bl	80099d4 <USBD_Get_USB_Status>
 800980a:	4603      	mov	r3, r0
 800980c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800980e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009832:	78fa      	ldrb	r2, [r7, #3]
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f7fa f8f1 	bl	8003a1e <HAL_PCD_EP_SetStall>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f8c6 	bl	80099d4 <USBD_Get_USB_Status>
 8009848:	4603      	mov	r3, r0
 800984a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800984c:	7bbb      	ldrb	r3, [r7, #14]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b084      	sub	sp, #16
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	460b      	mov	r3, r1
 8009860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009870:	78fa      	ldrb	r2, [r7, #3]
 8009872:	4611      	mov	r1, r2
 8009874:	4618      	mov	r0, r3
 8009876:	f7fa f936 	bl	8003ae6 <HAL_PCD_EP_ClrStall>
 800987a:	4603      	mov	r3, r0
 800987c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 f8a7 	bl	80099d4 <USBD_Get_USB_Status>
 8009886:	4603      	mov	r3, r0
 8009888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988a:	7bbb      	ldrb	r3, [r7, #14]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	da0b      	bge.n	80098c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098b6:	68f9      	ldr	r1, [r7, #12]
 80098b8:	4613      	mov	r3, r2
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	1a9b      	subs	r3, r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	440b      	add	r3, r1
 80098c2:	333e      	adds	r3, #62	; 0x3e
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	e00b      	b.n	80098e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ce:	68f9      	ldr	r1, [r7, #12]
 80098d0:	4613      	mov	r3, r2
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	1a9b      	subs	r3, r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80098de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009906:	78fa      	ldrb	r2, [r7, #3]
 8009908:	4611      	mov	r1, r2
 800990a:	4618      	mov	r0, r3
 800990c:	f7f9 ff03 	bl	8003716 <HAL_PCD_SetAddress>
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	4618      	mov	r0, r3
 8009918:	f000 f85c 	bl	80099d4 <USBD_Get_USB_Status>
 800991c:	4603      	mov	r3, r0
 800991e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009920:	7bbb      	ldrb	r3, [r7, #14]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b086      	sub	sp, #24
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
 8009936:	460b      	mov	r3, r1
 8009938:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009948:	7af9      	ldrb	r1, [r7, #11]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	f7fa f81c 	bl	800398a <HAL_PCD_EP_Transmit>
 8009952:	4603      	mov	r3, r0
 8009954:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009956:	7dfb      	ldrb	r3, [r7, #23]
 8009958:	4618      	mov	r0, r3
 800995a:	f000 f83b 	bl	80099d4 <USBD_Get_USB_Status>
 800995e:	4603      	mov	r3, r0
 8009960:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009962:	7dbb      	ldrb	r3, [r7, #22]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	607a      	str	r2, [r7, #4]
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	460b      	mov	r3, r1
 800997a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800998a:	7af9      	ldrb	r1, [r7, #11]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	f7f9 ff98 	bl	80038c4 <HAL_PCD_EP_Receive>
 8009994:	4603      	mov	r3, r0
 8009996:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009998:	7dfb      	ldrb	r3, [r7, #23]
 800999a:	4618      	mov	r0, r3
 800999c:	f000 f81a 	bl	80099d4 <USBD_Get_USB_Status>
 80099a0:	4603      	mov	r3, r0
 80099a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099c0:	78fa      	ldrb	r2, [r7, #3]
 80099c2:	4611      	mov	r1, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7f9 ffc8 	bl	800395a <HAL_PCD_EP_GetRxCount>
 80099ca:	4603      	mov	r3, r0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4603      	mov	r3, r0
 80099dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099e2:	79fb      	ldrb	r3, [r7, #7]
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d817      	bhi.n	8009a18 <USBD_Get_USB_Status+0x44>
 80099e8:	a201      	add	r2, pc, #4	; (adr r2, 80099f0 <USBD_Get_USB_Status+0x1c>)
 80099ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ee:	bf00      	nop
 80099f0:	08009a01 	.word	0x08009a01
 80099f4:	08009a07 	.word	0x08009a07
 80099f8:	08009a0d 	.word	0x08009a0d
 80099fc:	08009a13 	.word	0x08009a13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]
    break;
 8009a04:	e00b      	b.n	8009a1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a06:	2303      	movs	r3, #3
 8009a08:	73fb      	strb	r3, [r7, #15]
    break;
 8009a0a:	e008      	b.n	8009a1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a10:	e005      	b.n	8009a1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a12:	2303      	movs	r3, #3
 8009a14:	73fb      	strb	r3, [r7, #15]
    break;
 8009a16:	e002      	b.n	8009a1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1c:	bf00      	nop
  }
  return usb_status;
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <__errno>:
 8009a2c:	4b01      	ldr	r3, [pc, #4]	; (8009a34 <__errno+0x8>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	200001a0 	.word	0x200001a0

08009a38 <__libc_init_array>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4e0d      	ldr	r6, [pc, #52]	; (8009a70 <__libc_init_array+0x38>)
 8009a3c:	4c0d      	ldr	r4, [pc, #52]	; (8009a74 <__libc_init_array+0x3c>)
 8009a3e:	1ba4      	subs	r4, r4, r6
 8009a40:	10a4      	asrs	r4, r4, #2
 8009a42:	2500      	movs	r5, #0
 8009a44:	42a5      	cmp	r5, r4
 8009a46:	d109      	bne.n	8009a5c <__libc_init_array+0x24>
 8009a48:	4e0b      	ldr	r6, [pc, #44]	; (8009a78 <__libc_init_array+0x40>)
 8009a4a:	4c0c      	ldr	r4, [pc, #48]	; (8009a7c <__libc_init_array+0x44>)
 8009a4c:	f000 fc4a 	bl	800a2e4 <_init>
 8009a50:	1ba4      	subs	r4, r4, r6
 8009a52:	10a4      	asrs	r4, r4, #2
 8009a54:	2500      	movs	r5, #0
 8009a56:	42a5      	cmp	r5, r4
 8009a58:	d105      	bne.n	8009a66 <__libc_init_array+0x2e>
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a60:	4798      	blx	r3
 8009a62:	3501      	adds	r5, #1
 8009a64:	e7ee      	b.n	8009a44 <__libc_init_array+0xc>
 8009a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a6a:	4798      	blx	r3
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	e7f2      	b.n	8009a56 <__libc_init_array+0x1e>
 8009a70:	0800a664 	.word	0x0800a664
 8009a74:	0800a664 	.word	0x0800a664
 8009a78:	0800a664 	.word	0x0800a664
 8009a7c:	0800a668 	.word	0x0800a668

08009a80 <malloc>:
 8009a80:	4b02      	ldr	r3, [pc, #8]	; (8009a8c <malloc+0xc>)
 8009a82:	4601      	mov	r1, r0
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	f000 b861 	b.w	8009b4c <_malloc_r>
 8009a8a:	bf00      	nop
 8009a8c:	200001a0 	.word	0x200001a0

08009a90 <free>:
 8009a90:	4b02      	ldr	r3, [pc, #8]	; (8009a9c <free+0xc>)
 8009a92:	4601      	mov	r1, r0
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	f000 b80b 	b.w	8009ab0 <_free_r>
 8009a9a:	bf00      	nop
 8009a9c:	200001a0 	.word	0x200001a0

08009aa0 <memset>:
 8009aa0:	4402      	add	r2, r0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d100      	bne.n	8009aaa <memset+0xa>
 8009aa8:	4770      	bx	lr
 8009aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8009aae:	e7f9      	b.n	8009aa4 <memset+0x4>

08009ab0 <_free_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	d045      	beq.n	8009b44 <_free_r+0x94>
 8009ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009abc:	1f0c      	subs	r4, r1, #4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bfb8      	it	lt
 8009ac2:	18e4      	addlt	r4, r4, r3
 8009ac4:	f000 f8e0 	bl	8009c88 <__malloc_lock>
 8009ac8:	4a1f      	ldr	r2, [pc, #124]	; (8009b48 <_free_r+0x98>)
 8009aca:	6813      	ldr	r3, [r2, #0]
 8009acc:	4610      	mov	r0, r2
 8009ace:	b933      	cbnz	r3, 8009ade <_free_r+0x2e>
 8009ad0:	6063      	str	r3, [r4, #4]
 8009ad2:	6014      	str	r4, [r2, #0]
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ada:	f000 b8d6 	b.w	8009c8a <__malloc_unlock>
 8009ade:	42a3      	cmp	r3, r4
 8009ae0:	d90c      	bls.n	8009afc <_free_r+0x4c>
 8009ae2:	6821      	ldr	r1, [r4, #0]
 8009ae4:	1862      	adds	r2, r4, r1
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	bf04      	itt	eq
 8009aea:	681a      	ldreq	r2, [r3, #0]
 8009aec:	685b      	ldreq	r3, [r3, #4]
 8009aee:	6063      	str	r3, [r4, #4]
 8009af0:	bf04      	itt	eq
 8009af2:	1852      	addeq	r2, r2, r1
 8009af4:	6022      	streq	r2, [r4, #0]
 8009af6:	6004      	str	r4, [r0, #0]
 8009af8:	e7ec      	b.n	8009ad4 <_free_r+0x24>
 8009afa:	4613      	mov	r3, r2
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	b10a      	cbz	r2, 8009b04 <_free_r+0x54>
 8009b00:	42a2      	cmp	r2, r4
 8009b02:	d9fa      	bls.n	8009afa <_free_r+0x4a>
 8009b04:	6819      	ldr	r1, [r3, #0]
 8009b06:	1858      	adds	r0, r3, r1
 8009b08:	42a0      	cmp	r0, r4
 8009b0a:	d10b      	bne.n	8009b24 <_free_r+0x74>
 8009b0c:	6820      	ldr	r0, [r4, #0]
 8009b0e:	4401      	add	r1, r0
 8009b10:	1858      	adds	r0, r3, r1
 8009b12:	4282      	cmp	r2, r0
 8009b14:	6019      	str	r1, [r3, #0]
 8009b16:	d1dd      	bne.n	8009ad4 <_free_r+0x24>
 8009b18:	6810      	ldr	r0, [r2, #0]
 8009b1a:	6852      	ldr	r2, [r2, #4]
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	4401      	add	r1, r0
 8009b20:	6019      	str	r1, [r3, #0]
 8009b22:	e7d7      	b.n	8009ad4 <_free_r+0x24>
 8009b24:	d902      	bls.n	8009b2c <_free_r+0x7c>
 8009b26:	230c      	movs	r3, #12
 8009b28:	602b      	str	r3, [r5, #0]
 8009b2a:	e7d3      	b.n	8009ad4 <_free_r+0x24>
 8009b2c:	6820      	ldr	r0, [r4, #0]
 8009b2e:	1821      	adds	r1, r4, r0
 8009b30:	428a      	cmp	r2, r1
 8009b32:	bf04      	itt	eq
 8009b34:	6811      	ldreq	r1, [r2, #0]
 8009b36:	6852      	ldreq	r2, [r2, #4]
 8009b38:	6062      	str	r2, [r4, #4]
 8009b3a:	bf04      	itt	eq
 8009b3c:	1809      	addeq	r1, r1, r0
 8009b3e:	6021      	streq	r1, [r4, #0]
 8009b40:	605c      	str	r4, [r3, #4]
 8009b42:	e7c7      	b.n	8009ad4 <_free_r+0x24>
 8009b44:	bd38      	pop	{r3, r4, r5, pc}
 8009b46:	bf00      	nop
 8009b48:	20000234 	.word	0x20000234

08009b4c <_malloc_r>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	1ccd      	adds	r5, r1, #3
 8009b50:	f025 0503 	bic.w	r5, r5, #3
 8009b54:	3508      	adds	r5, #8
 8009b56:	2d0c      	cmp	r5, #12
 8009b58:	bf38      	it	cc
 8009b5a:	250c      	movcc	r5, #12
 8009b5c:	2d00      	cmp	r5, #0
 8009b5e:	4606      	mov	r6, r0
 8009b60:	db01      	blt.n	8009b66 <_malloc_r+0x1a>
 8009b62:	42a9      	cmp	r1, r5
 8009b64:	d903      	bls.n	8009b6e <_malloc_r+0x22>
 8009b66:	230c      	movs	r3, #12
 8009b68:	6033      	str	r3, [r6, #0]
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	bd70      	pop	{r4, r5, r6, pc}
 8009b6e:	f000 f88b 	bl	8009c88 <__malloc_lock>
 8009b72:	4a21      	ldr	r2, [pc, #132]	; (8009bf8 <_malloc_r+0xac>)
 8009b74:	6814      	ldr	r4, [r2, #0]
 8009b76:	4621      	mov	r1, r4
 8009b78:	b991      	cbnz	r1, 8009ba0 <_malloc_r+0x54>
 8009b7a:	4c20      	ldr	r4, [pc, #128]	; (8009bfc <_malloc_r+0xb0>)
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	b91b      	cbnz	r3, 8009b88 <_malloc_r+0x3c>
 8009b80:	4630      	mov	r0, r6
 8009b82:	f000 f83d 	bl	8009c00 <_sbrk_r>
 8009b86:	6020      	str	r0, [r4, #0]
 8009b88:	4629      	mov	r1, r5
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f000 f838 	bl	8009c00 <_sbrk_r>
 8009b90:	1c43      	adds	r3, r0, #1
 8009b92:	d124      	bne.n	8009bde <_malloc_r+0x92>
 8009b94:	230c      	movs	r3, #12
 8009b96:	6033      	str	r3, [r6, #0]
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f000 f876 	bl	8009c8a <__malloc_unlock>
 8009b9e:	e7e4      	b.n	8009b6a <_malloc_r+0x1e>
 8009ba0:	680b      	ldr	r3, [r1, #0]
 8009ba2:	1b5b      	subs	r3, r3, r5
 8009ba4:	d418      	bmi.n	8009bd8 <_malloc_r+0x8c>
 8009ba6:	2b0b      	cmp	r3, #11
 8009ba8:	d90f      	bls.n	8009bca <_malloc_r+0x7e>
 8009baa:	600b      	str	r3, [r1, #0]
 8009bac:	50cd      	str	r5, [r1, r3]
 8009bae:	18cc      	adds	r4, r1, r3
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f000 f86a 	bl	8009c8a <__malloc_unlock>
 8009bb6:	f104 000b 	add.w	r0, r4, #11
 8009bba:	1d23      	adds	r3, r4, #4
 8009bbc:	f020 0007 	bic.w	r0, r0, #7
 8009bc0:	1ac3      	subs	r3, r0, r3
 8009bc2:	d0d3      	beq.n	8009b6c <_malloc_r+0x20>
 8009bc4:	425a      	negs	r2, r3
 8009bc6:	50e2      	str	r2, [r4, r3]
 8009bc8:	e7d0      	b.n	8009b6c <_malloc_r+0x20>
 8009bca:	428c      	cmp	r4, r1
 8009bcc:	684b      	ldr	r3, [r1, #4]
 8009bce:	bf16      	itet	ne
 8009bd0:	6063      	strne	r3, [r4, #4]
 8009bd2:	6013      	streq	r3, [r2, #0]
 8009bd4:	460c      	movne	r4, r1
 8009bd6:	e7eb      	b.n	8009bb0 <_malloc_r+0x64>
 8009bd8:	460c      	mov	r4, r1
 8009bda:	6849      	ldr	r1, [r1, #4]
 8009bdc:	e7cc      	b.n	8009b78 <_malloc_r+0x2c>
 8009bde:	1cc4      	adds	r4, r0, #3
 8009be0:	f024 0403 	bic.w	r4, r4, #3
 8009be4:	42a0      	cmp	r0, r4
 8009be6:	d005      	beq.n	8009bf4 <_malloc_r+0xa8>
 8009be8:	1a21      	subs	r1, r4, r0
 8009bea:	4630      	mov	r0, r6
 8009bec:	f000 f808 	bl	8009c00 <_sbrk_r>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d0cf      	beq.n	8009b94 <_malloc_r+0x48>
 8009bf4:	6025      	str	r5, [r4, #0]
 8009bf6:	e7db      	b.n	8009bb0 <_malloc_r+0x64>
 8009bf8:	20000234 	.word	0x20000234
 8009bfc:	20000238 	.word	0x20000238

08009c00 <_sbrk_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4c06      	ldr	r4, [pc, #24]	; (8009c1c <_sbrk_r+0x1c>)
 8009c04:	2300      	movs	r3, #0
 8009c06:	4605      	mov	r5, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	6023      	str	r3, [r4, #0]
 8009c0c:	f7f7 fab2 	bl	8001174 <_sbrk>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_sbrk_r+0x1a>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_sbrk_r+0x1a>
 8009c18:	602b      	str	r3, [r5, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	20001ce8 	.word	0x20001ce8

08009c20 <sniprintf>:
 8009c20:	b40c      	push	{r2, r3}
 8009c22:	b530      	push	{r4, r5, lr}
 8009c24:	4b17      	ldr	r3, [pc, #92]	; (8009c84 <sniprintf+0x64>)
 8009c26:	1e0c      	subs	r4, r1, #0
 8009c28:	b09d      	sub	sp, #116	; 0x74
 8009c2a:	681d      	ldr	r5, [r3, #0]
 8009c2c:	da08      	bge.n	8009c40 <sniprintf+0x20>
 8009c2e:	238b      	movs	r3, #139	; 0x8b
 8009c30:	602b      	str	r3, [r5, #0]
 8009c32:	f04f 30ff 	mov.w	r0, #4294967295
 8009c36:	b01d      	add	sp, #116	; 0x74
 8009c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c3c:	b002      	add	sp, #8
 8009c3e:	4770      	bx	lr
 8009c40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c48:	bf14      	ite	ne
 8009c4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c4e:	4623      	moveq	r3, r4
 8009c50:	9304      	str	r3, [sp, #16]
 8009c52:	9307      	str	r3, [sp, #28]
 8009c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c58:	9002      	str	r0, [sp, #8]
 8009c5a:	9006      	str	r0, [sp, #24]
 8009c5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c62:	ab21      	add	r3, sp, #132	; 0x84
 8009c64:	a902      	add	r1, sp, #8
 8009c66:	4628      	mov	r0, r5
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	f000 f869 	bl	8009d40 <_svfiprintf_r>
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	bfbc      	itt	lt
 8009c72:	238b      	movlt	r3, #139	; 0x8b
 8009c74:	602b      	strlt	r3, [r5, #0]
 8009c76:	2c00      	cmp	r4, #0
 8009c78:	d0dd      	beq.n	8009c36 <sniprintf+0x16>
 8009c7a:	9b02      	ldr	r3, [sp, #8]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	e7d9      	b.n	8009c36 <sniprintf+0x16>
 8009c82:	bf00      	nop
 8009c84:	200001a0 	.word	0x200001a0

08009c88 <__malloc_lock>:
 8009c88:	4770      	bx	lr

08009c8a <__malloc_unlock>:
 8009c8a:	4770      	bx	lr

08009c8c <__ssputs_r>:
 8009c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c90:	688e      	ldr	r6, [r1, #8]
 8009c92:	429e      	cmp	r6, r3
 8009c94:	4682      	mov	sl, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	4690      	mov	r8, r2
 8009c9a:	4699      	mov	r9, r3
 8009c9c:	d837      	bhi.n	8009d0e <__ssputs_r+0x82>
 8009c9e:	898a      	ldrh	r2, [r1, #12]
 8009ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ca4:	d031      	beq.n	8009d0a <__ssputs_r+0x7e>
 8009ca6:	6825      	ldr	r5, [r4, #0]
 8009ca8:	6909      	ldr	r1, [r1, #16]
 8009caa:	1a6f      	subs	r7, r5, r1
 8009cac:	6965      	ldr	r5, [r4, #20]
 8009cae:	2302      	movs	r3, #2
 8009cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8009cb8:	f109 0301 	add.w	r3, r9, #1
 8009cbc:	443b      	add	r3, r7
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	bf38      	it	cc
 8009cc2:	461d      	movcc	r5, r3
 8009cc4:	0553      	lsls	r3, r2, #21
 8009cc6:	d530      	bpl.n	8009d2a <__ssputs_r+0x9e>
 8009cc8:	4629      	mov	r1, r5
 8009cca:	f7ff ff3f 	bl	8009b4c <_malloc_r>
 8009cce:	4606      	mov	r6, r0
 8009cd0:	b950      	cbnz	r0, 8009ce8 <__ssputs_r+0x5c>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	f8ca 3000 	str.w	r3, [sl]
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce8:	463a      	mov	r2, r7
 8009cea:	6921      	ldr	r1, [r4, #16]
 8009cec:	f000 faa8 	bl	800a240 <memcpy>
 8009cf0:	89a3      	ldrh	r3, [r4, #12]
 8009cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	6126      	str	r6, [r4, #16]
 8009cfe:	6165      	str	r5, [r4, #20]
 8009d00:	443e      	add	r6, r7
 8009d02:	1bed      	subs	r5, r5, r7
 8009d04:	6026      	str	r6, [r4, #0]
 8009d06:	60a5      	str	r5, [r4, #8]
 8009d08:	464e      	mov	r6, r9
 8009d0a:	454e      	cmp	r6, r9
 8009d0c:	d900      	bls.n	8009d10 <__ssputs_r+0x84>
 8009d0e:	464e      	mov	r6, r9
 8009d10:	4632      	mov	r2, r6
 8009d12:	4641      	mov	r1, r8
 8009d14:	6820      	ldr	r0, [r4, #0]
 8009d16:	f000 fa9e 	bl	800a256 <memmove>
 8009d1a:	68a3      	ldr	r3, [r4, #8]
 8009d1c:	1b9b      	subs	r3, r3, r6
 8009d1e:	60a3      	str	r3, [r4, #8]
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	441e      	add	r6, r3
 8009d24:	6026      	str	r6, [r4, #0]
 8009d26:	2000      	movs	r0, #0
 8009d28:	e7dc      	b.n	8009ce4 <__ssputs_r+0x58>
 8009d2a:	462a      	mov	r2, r5
 8009d2c:	f000 faac 	bl	800a288 <_realloc_r>
 8009d30:	4606      	mov	r6, r0
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d1e2      	bne.n	8009cfc <__ssputs_r+0x70>
 8009d36:	6921      	ldr	r1, [r4, #16]
 8009d38:	4650      	mov	r0, sl
 8009d3a:	f7ff feb9 	bl	8009ab0 <_free_r>
 8009d3e:	e7c8      	b.n	8009cd2 <__ssputs_r+0x46>

08009d40 <_svfiprintf_r>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	461d      	mov	r5, r3
 8009d46:	898b      	ldrh	r3, [r1, #12]
 8009d48:	061f      	lsls	r7, r3, #24
 8009d4a:	b09d      	sub	sp, #116	; 0x74
 8009d4c:	4680      	mov	r8, r0
 8009d4e:	460c      	mov	r4, r1
 8009d50:	4616      	mov	r6, r2
 8009d52:	d50f      	bpl.n	8009d74 <_svfiprintf_r+0x34>
 8009d54:	690b      	ldr	r3, [r1, #16]
 8009d56:	b96b      	cbnz	r3, 8009d74 <_svfiprintf_r+0x34>
 8009d58:	2140      	movs	r1, #64	; 0x40
 8009d5a:	f7ff fef7 	bl	8009b4c <_malloc_r>
 8009d5e:	6020      	str	r0, [r4, #0]
 8009d60:	6120      	str	r0, [r4, #16]
 8009d62:	b928      	cbnz	r0, 8009d70 <_svfiprintf_r+0x30>
 8009d64:	230c      	movs	r3, #12
 8009d66:	f8c8 3000 	str.w	r3, [r8]
 8009d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d6e:	e0c8      	b.n	8009f02 <_svfiprintf_r+0x1c2>
 8009d70:	2340      	movs	r3, #64	; 0x40
 8009d72:	6163      	str	r3, [r4, #20]
 8009d74:	2300      	movs	r3, #0
 8009d76:	9309      	str	r3, [sp, #36]	; 0x24
 8009d78:	2320      	movs	r3, #32
 8009d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d7e:	2330      	movs	r3, #48	; 0x30
 8009d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d84:	9503      	str	r5, [sp, #12]
 8009d86:	f04f 0b01 	mov.w	fp, #1
 8009d8a:	4637      	mov	r7, r6
 8009d8c:	463d      	mov	r5, r7
 8009d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d92:	b10b      	cbz	r3, 8009d98 <_svfiprintf_r+0x58>
 8009d94:	2b25      	cmp	r3, #37	; 0x25
 8009d96:	d13e      	bne.n	8009e16 <_svfiprintf_r+0xd6>
 8009d98:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d9c:	d00b      	beq.n	8009db6 <_svfiprintf_r+0x76>
 8009d9e:	4653      	mov	r3, sl
 8009da0:	4632      	mov	r2, r6
 8009da2:	4621      	mov	r1, r4
 8009da4:	4640      	mov	r0, r8
 8009da6:	f7ff ff71 	bl	8009c8c <__ssputs_r>
 8009daa:	3001      	adds	r0, #1
 8009dac:	f000 80a4 	beq.w	8009ef8 <_svfiprintf_r+0x1b8>
 8009db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db2:	4453      	add	r3, sl
 8009db4:	9309      	str	r3, [sp, #36]	; 0x24
 8009db6:	783b      	ldrb	r3, [r7, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 809d 	beq.w	8009ef8 <_svfiprintf_r+0x1b8>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	9307      	str	r3, [sp, #28]
 8009dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8009dd2:	462f      	mov	r7, r5
 8009dd4:	2205      	movs	r2, #5
 8009dd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009dda:	4850      	ldr	r0, [pc, #320]	; (8009f1c <_svfiprintf_r+0x1dc>)
 8009ddc:	f7f6 fa08 	bl	80001f0 <memchr>
 8009de0:	9b04      	ldr	r3, [sp, #16]
 8009de2:	b9d0      	cbnz	r0, 8009e1a <_svfiprintf_r+0xda>
 8009de4:	06d9      	lsls	r1, r3, #27
 8009de6:	bf44      	itt	mi
 8009de8:	2220      	movmi	r2, #32
 8009dea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dee:	071a      	lsls	r2, r3, #28
 8009df0:	bf44      	itt	mi
 8009df2:	222b      	movmi	r2, #43	; 0x2b
 8009df4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009df8:	782a      	ldrb	r2, [r5, #0]
 8009dfa:	2a2a      	cmp	r2, #42	; 0x2a
 8009dfc:	d015      	beq.n	8009e2a <_svfiprintf_r+0xea>
 8009dfe:	9a07      	ldr	r2, [sp, #28]
 8009e00:	462f      	mov	r7, r5
 8009e02:	2000      	movs	r0, #0
 8009e04:	250a      	movs	r5, #10
 8009e06:	4639      	mov	r1, r7
 8009e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e0c:	3b30      	subs	r3, #48	; 0x30
 8009e0e:	2b09      	cmp	r3, #9
 8009e10:	d94d      	bls.n	8009eae <_svfiprintf_r+0x16e>
 8009e12:	b1b8      	cbz	r0, 8009e44 <_svfiprintf_r+0x104>
 8009e14:	e00f      	b.n	8009e36 <_svfiprintf_r+0xf6>
 8009e16:	462f      	mov	r7, r5
 8009e18:	e7b8      	b.n	8009d8c <_svfiprintf_r+0x4c>
 8009e1a:	4a40      	ldr	r2, [pc, #256]	; (8009f1c <_svfiprintf_r+0x1dc>)
 8009e1c:	1a80      	subs	r0, r0, r2
 8009e1e:	fa0b f000 	lsl.w	r0, fp, r0
 8009e22:	4318      	orrs	r0, r3
 8009e24:	9004      	str	r0, [sp, #16]
 8009e26:	463d      	mov	r5, r7
 8009e28:	e7d3      	b.n	8009dd2 <_svfiprintf_r+0x92>
 8009e2a:	9a03      	ldr	r2, [sp, #12]
 8009e2c:	1d11      	adds	r1, r2, #4
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	9103      	str	r1, [sp, #12]
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	db01      	blt.n	8009e3a <_svfiprintf_r+0xfa>
 8009e36:	9207      	str	r2, [sp, #28]
 8009e38:	e004      	b.n	8009e44 <_svfiprintf_r+0x104>
 8009e3a:	4252      	negs	r2, r2
 8009e3c:	f043 0302 	orr.w	r3, r3, #2
 8009e40:	9207      	str	r2, [sp, #28]
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	783b      	ldrb	r3, [r7, #0]
 8009e46:	2b2e      	cmp	r3, #46	; 0x2e
 8009e48:	d10c      	bne.n	8009e64 <_svfiprintf_r+0x124>
 8009e4a:	787b      	ldrb	r3, [r7, #1]
 8009e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e4e:	d133      	bne.n	8009eb8 <_svfiprintf_r+0x178>
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	1d1a      	adds	r2, r3, #4
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	9203      	str	r2, [sp, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	bfb8      	it	lt
 8009e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e60:	3702      	adds	r7, #2
 8009e62:	9305      	str	r3, [sp, #20]
 8009e64:	4d2e      	ldr	r5, [pc, #184]	; (8009f20 <_svfiprintf_r+0x1e0>)
 8009e66:	7839      	ldrb	r1, [r7, #0]
 8009e68:	2203      	movs	r2, #3
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f7f6 f9c0 	bl	80001f0 <memchr>
 8009e70:	b138      	cbz	r0, 8009e82 <_svfiprintf_r+0x142>
 8009e72:	2340      	movs	r3, #64	; 0x40
 8009e74:	1b40      	subs	r0, r0, r5
 8009e76:	fa03 f000 	lsl.w	r0, r3, r0
 8009e7a:	9b04      	ldr	r3, [sp, #16]
 8009e7c:	4303      	orrs	r3, r0
 8009e7e:	3701      	adds	r7, #1
 8009e80:	9304      	str	r3, [sp, #16]
 8009e82:	7839      	ldrb	r1, [r7, #0]
 8009e84:	4827      	ldr	r0, [pc, #156]	; (8009f24 <_svfiprintf_r+0x1e4>)
 8009e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e8a:	2206      	movs	r2, #6
 8009e8c:	1c7e      	adds	r6, r7, #1
 8009e8e:	f7f6 f9af 	bl	80001f0 <memchr>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d038      	beq.n	8009f08 <_svfiprintf_r+0x1c8>
 8009e96:	4b24      	ldr	r3, [pc, #144]	; (8009f28 <_svfiprintf_r+0x1e8>)
 8009e98:	bb13      	cbnz	r3, 8009ee0 <_svfiprintf_r+0x1a0>
 8009e9a:	9b03      	ldr	r3, [sp, #12]
 8009e9c:	3307      	adds	r3, #7
 8009e9e:	f023 0307 	bic.w	r3, r3, #7
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	9303      	str	r3, [sp, #12]
 8009ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea8:	444b      	add	r3, r9
 8009eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8009eac:	e76d      	b.n	8009d8a <_svfiprintf_r+0x4a>
 8009eae:	fb05 3202 	mla	r2, r5, r2, r3
 8009eb2:	2001      	movs	r0, #1
 8009eb4:	460f      	mov	r7, r1
 8009eb6:	e7a6      	b.n	8009e06 <_svfiprintf_r+0xc6>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	3701      	adds	r7, #1
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	250a      	movs	r5, #10
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec8:	3a30      	subs	r2, #48	; 0x30
 8009eca:	2a09      	cmp	r2, #9
 8009ecc:	d903      	bls.n	8009ed6 <_svfiprintf_r+0x196>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0c8      	beq.n	8009e64 <_svfiprintf_r+0x124>
 8009ed2:	9105      	str	r1, [sp, #20]
 8009ed4:	e7c6      	b.n	8009e64 <_svfiprintf_r+0x124>
 8009ed6:	fb05 2101 	mla	r1, r5, r1, r2
 8009eda:	2301      	movs	r3, #1
 8009edc:	4607      	mov	r7, r0
 8009ede:	e7f0      	b.n	8009ec2 <_svfiprintf_r+0x182>
 8009ee0:	ab03      	add	r3, sp, #12
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	4b11      	ldr	r3, [pc, #68]	; (8009f2c <_svfiprintf_r+0x1ec>)
 8009ee8:	a904      	add	r1, sp, #16
 8009eea:	4640      	mov	r0, r8
 8009eec:	f3af 8000 	nop.w
 8009ef0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ef4:	4681      	mov	r9, r0
 8009ef6:	d1d6      	bne.n	8009ea6 <_svfiprintf_r+0x166>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	065b      	lsls	r3, r3, #25
 8009efc:	f53f af35 	bmi.w	8009d6a <_svfiprintf_r+0x2a>
 8009f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f02:	b01d      	add	sp, #116	; 0x74
 8009f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f08:	ab03      	add	r3, sp, #12
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <_svfiprintf_r+0x1ec>)
 8009f10:	a904      	add	r1, sp, #16
 8009f12:	4640      	mov	r0, r8
 8009f14:	f000 f882 	bl	800a01c <_printf_i>
 8009f18:	e7ea      	b.n	8009ef0 <_svfiprintf_r+0x1b0>
 8009f1a:	bf00      	nop
 8009f1c:	0800a628 	.word	0x0800a628
 8009f20:	0800a62e 	.word	0x0800a62e
 8009f24:	0800a632 	.word	0x0800a632
 8009f28:	00000000 	.word	0x00000000
 8009f2c:	08009c8d 	.word	0x08009c8d

08009f30 <_printf_common>:
 8009f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f34:	4691      	mov	r9, r2
 8009f36:	461f      	mov	r7, r3
 8009f38:	688a      	ldr	r2, [r1, #8]
 8009f3a:	690b      	ldr	r3, [r1, #16]
 8009f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f40:	4293      	cmp	r3, r2
 8009f42:	bfb8      	it	lt
 8009f44:	4613      	movlt	r3, r2
 8009f46:	f8c9 3000 	str.w	r3, [r9]
 8009f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f4e:	4606      	mov	r6, r0
 8009f50:	460c      	mov	r4, r1
 8009f52:	b112      	cbz	r2, 8009f5a <_printf_common+0x2a>
 8009f54:	3301      	adds	r3, #1
 8009f56:	f8c9 3000 	str.w	r3, [r9]
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	0699      	lsls	r1, r3, #26
 8009f5e:	bf42      	ittt	mi
 8009f60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f64:	3302      	addmi	r3, #2
 8009f66:	f8c9 3000 	strmi.w	r3, [r9]
 8009f6a:	6825      	ldr	r5, [r4, #0]
 8009f6c:	f015 0506 	ands.w	r5, r5, #6
 8009f70:	d107      	bne.n	8009f82 <_printf_common+0x52>
 8009f72:	f104 0a19 	add.w	sl, r4, #25
 8009f76:	68e3      	ldr	r3, [r4, #12]
 8009f78:	f8d9 2000 	ldr.w	r2, [r9]
 8009f7c:	1a9b      	subs	r3, r3, r2
 8009f7e:	42ab      	cmp	r3, r5
 8009f80:	dc28      	bgt.n	8009fd4 <_printf_common+0xa4>
 8009f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f86:	6822      	ldr	r2, [r4, #0]
 8009f88:	3300      	adds	r3, #0
 8009f8a:	bf18      	it	ne
 8009f8c:	2301      	movne	r3, #1
 8009f8e:	0692      	lsls	r2, r2, #26
 8009f90:	d42d      	bmi.n	8009fee <_printf_common+0xbe>
 8009f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f96:	4639      	mov	r1, r7
 8009f98:	4630      	mov	r0, r6
 8009f9a:	47c0      	blx	r8
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d020      	beq.n	8009fe2 <_printf_common+0xb2>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	68e5      	ldr	r5, [r4, #12]
 8009fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8009fa8:	f003 0306 	and.w	r3, r3, #6
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	bf08      	it	eq
 8009fb0:	1aad      	subeq	r5, r5, r2
 8009fb2:	68a3      	ldr	r3, [r4, #8]
 8009fb4:	6922      	ldr	r2, [r4, #16]
 8009fb6:	bf0c      	ite	eq
 8009fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fbc:	2500      	movne	r5, #0
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	bfc4      	itt	gt
 8009fc2:	1a9b      	subgt	r3, r3, r2
 8009fc4:	18ed      	addgt	r5, r5, r3
 8009fc6:	f04f 0900 	mov.w	r9, #0
 8009fca:	341a      	adds	r4, #26
 8009fcc:	454d      	cmp	r5, r9
 8009fce:	d11a      	bne.n	800a006 <_printf_common+0xd6>
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	e008      	b.n	8009fe6 <_printf_common+0xb6>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	4652      	mov	r2, sl
 8009fd8:	4639      	mov	r1, r7
 8009fda:	4630      	mov	r0, r6
 8009fdc:	47c0      	blx	r8
 8009fde:	3001      	adds	r0, #1
 8009fe0:	d103      	bne.n	8009fea <_printf_common+0xba>
 8009fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	3501      	adds	r5, #1
 8009fec:	e7c3      	b.n	8009f76 <_printf_common+0x46>
 8009fee:	18e1      	adds	r1, r4, r3
 8009ff0:	1c5a      	adds	r2, r3, #1
 8009ff2:	2030      	movs	r0, #48	; 0x30
 8009ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ff8:	4422      	add	r2, r4
 8009ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a002:	3302      	adds	r3, #2
 800a004:	e7c5      	b.n	8009f92 <_printf_common+0x62>
 800a006:	2301      	movs	r3, #1
 800a008:	4622      	mov	r2, r4
 800a00a:	4639      	mov	r1, r7
 800a00c:	4630      	mov	r0, r6
 800a00e:	47c0      	blx	r8
 800a010:	3001      	adds	r0, #1
 800a012:	d0e6      	beq.n	8009fe2 <_printf_common+0xb2>
 800a014:	f109 0901 	add.w	r9, r9, #1
 800a018:	e7d8      	b.n	8009fcc <_printf_common+0x9c>
	...

0800a01c <_printf_i>:
 800a01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a020:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a024:	460c      	mov	r4, r1
 800a026:	7e09      	ldrb	r1, [r1, #24]
 800a028:	b085      	sub	sp, #20
 800a02a:	296e      	cmp	r1, #110	; 0x6e
 800a02c:	4617      	mov	r7, r2
 800a02e:	4606      	mov	r6, r0
 800a030:	4698      	mov	r8, r3
 800a032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a034:	f000 80b3 	beq.w	800a19e <_printf_i+0x182>
 800a038:	d822      	bhi.n	800a080 <_printf_i+0x64>
 800a03a:	2963      	cmp	r1, #99	; 0x63
 800a03c:	d036      	beq.n	800a0ac <_printf_i+0x90>
 800a03e:	d80a      	bhi.n	800a056 <_printf_i+0x3a>
 800a040:	2900      	cmp	r1, #0
 800a042:	f000 80b9 	beq.w	800a1b8 <_printf_i+0x19c>
 800a046:	2958      	cmp	r1, #88	; 0x58
 800a048:	f000 8083 	beq.w	800a152 <_printf_i+0x136>
 800a04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a050:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a054:	e032      	b.n	800a0bc <_printf_i+0xa0>
 800a056:	2964      	cmp	r1, #100	; 0x64
 800a058:	d001      	beq.n	800a05e <_printf_i+0x42>
 800a05a:	2969      	cmp	r1, #105	; 0x69
 800a05c:	d1f6      	bne.n	800a04c <_printf_i+0x30>
 800a05e:	6820      	ldr	r0, [r4, #0]
 800a060:	6813      	ldr	r3, [r2, #0]
 800a062:	0605      	lsls	r5, r0, #24
 800a064:	f103 0104 	add.w	r1, r3, #4
 800a068:	d52a      	bpl.n	800a0c0 <_printf_i+0xa4>
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6011      	str	r1, [r2, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	da03      	bge.n	800a07a <_printf_i+0x5e>
 800a072:	222d      	movs	r2, #45	; 0x2d
 800a074:	425b      	negs	r3, r3
 800a076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a07a:	486f      	ldr	r0, [pc, #444]	; (800a238 <_printf_i+0x21c>)
 800a07c:	220a      	movs	r2, #10
 800a07e:	e039      	b.n	800a0f4 <_printf_i+0xd8>
 800a080:	2973      	cmp	r1, #115	; 0x73
 800a082:	f000 809d 	beq.w	800a1c0 <_printf_i+0x1a4>
 800a086:	d808      	bhi.n	800a09a <_printf_i+0x7e>
 800a088:	296f      	cmp	r1, #111	; 0x6f
 800a08a:	d020      	beq.n	800a0ce <_printf_i+0xb2>
 800a08c:	2970      	cmp	r1, #112	; 0x70
 800a08e:	d1dd      	bne.n	800a04c <_printf_i+0x30>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	f043 0320 	orr.w	r3, r3, #32
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	e003      	b.n	800a0a2 <_printf_i+0x86>
 800a09a:	2975      	cmp	r1, #117	; 0x75
 800a09c:	d017      	beq.n	800a0ce <_printf_i+0xb2>
 800a09e:	2978      	cmp	r1, #120	; 0x78
 800a0a0:	d1d4      	bne.n	800a04c <_printf_i+0x30>
 800a0a2:	2378      	movs	r3, #120	; 0x78
 800a0a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0a8:	4864      	ldr	r0, [pc, #400]	; (800a23c <_printf_i+0x220>)
 800a0aa:	e055      	b.n	800a158 <_printf_i+0x13c>
 800a0ac:	6813      	ldr	r3, [r2, #0]
 800a0ae:	1d19      	adds	r1, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6011      	str	r1, [r2, #0]
 800a0b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e08c      	b.n	800a1da <_printf_i+0x1be>
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6011      	str	r1, [r2, #0]
 800a0c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0c8:	bf18      	it	ne
 800a0ca:	b21b      	sxthne	r3, r3
 800a0cc:	e7cf      	b.n	800a06e <_printf_i+0x52>
 800a0ce:	6813      	ldr	r3, [r2, #0]
 800a0d0:	6825      	ldr	r5, [r4, #0]
 800a0d2:	1d18      	adds	r0, r3, #4
 800a0d4:	6010      	str	r0, [r2, #0]
 800a0d6:	0628      	lsls	r0, r5, #24
 800a0d8:	d501      	bpl.n	800a0de <_printf_i+0xc2>
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	e002      	b.n	800a0e4 <_printf_i+0xc8>
 800a0de:	0668      	lsls	r0, r5, #25
 800a0e0:	d5fb      	bpl.n	800a0da <_printf_i+0xbe>
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	4854      	ldr	r0, [pc, #336]	; (800a238 <_printf_i+0x21c>)
 800a0e6:	296f      	cmp	r1, #111	; 0x6f
 800a0e8:	bf14      	ite	ne
 800a0ea:	220a      	movne	r2, #10
 800a0ec:	2208      	moveq	r2, #8
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0f4:	6865      	ldr	r5, [r4, #4]
 800a0f6:	60a5      	str	r5, [r4, #8]
 800a0f8:	2d00      	cmp	r5, #0
 800a0fa:	f2c0 8095 	blt.w	800a228 <_printf_i+0x20c>
 800a0fe:	6821      	ldr	r1, [r4, #0]
 800a100:	f021 0104 	bic.w	r1, r1, #4
 800a104:	6021      	str	r1, [r4, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d13d      	bne.n	800a186 <_printf_i+0x16a>
 800a10a:	2d00      	cmp	r5, #0
 800a10c:	f040 808e 	bne.w	800a22c <_printf_i+0x210>
 800a110:	4665      	mov	r5, ip
 800a112:	2a08      	cmp	r2, #8
 800a114:	d10b      	bne.n	800a12e <_printf_i+0x112>
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	07db      	lsls	r3, r3, #31
 800a11a:	d508      	bpl.n	800a12e <_printf_i+0x112>
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	6862      	ldr	r2, [r4, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	bfde      	ittt	le
 800a124:	2330      	movle	r3, #48	; 0x30
 800a126:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a12a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a12e:	ebac 0305 	sub.w	r3, ip, r5
 800a132:	6123      	str	r3, [r4, #16]
 800a134:	f8cd 8000 	str.w	r8, [sp]
 800a138:	463b      	mov	r3, r7
 800a13a:	aa03      	add	r2, sp, #12
 800a13c:	4621      	mov	r1, r4
 800a13e:	4630      	mov	r0, r6
 800a140:	f7ff fef6 	bl	8009f30 <_printf_common>
 800a144:	3001      	adds	r0, #1
 800a146:	d14d      	bne.n	800a1e4 <_printf_i+0x1c8>
 800a148:	f04f 30ff 	mov.w	r0, #4294967295
 800a14c:	b005      	add	sp, #20
 800a14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a152:	4839      	ldr	r0, [pc, #228]	; (800a238 <_printf_i+0x21c>)
 800a154:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a158:	6813      	ldr	r3, [r2, #0]
 800a15a:	6821      	ldr	r1, [r4, #0]
 800a15c:	1d1d      	adds	r5, r3, #4
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6015      	str	r5, [r2, #0]
 800a162:	060a      	lsls	r2, r1, #24
 800a164:	d50b      	bpl.n	800a17e <_printf_i+0x162>
 800a166:	07ca      	lsls	r2, r1, #31
 800a168:	bf44      	itt	mi
 800a16a:	f041 0120 	orrmi.w	r1, r1, #32
 800a16e:	6021      	strmi	r1, [r4, #0]
 800a170:	b91b      	cbnz	r3, 800a17a <_printf_i+0x15e>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	f022 0220 	bic.w	r2, r2, #32
 800a178:	6022      	str	r2, [r4, #0]
 800a17a:	2210      	movs	r2, #16
 800a17c:	e7b7      	b.n	800a0ee <_printf_i+0xd2>
 800a17e:	064d      	lsls	r5, r1, #25
 800a180:	bf48      	it	mi
 800a182:	b29b      	uxthmi	r3, r3
 800a184:	e7ef      	b.n	800a166 <_printf_i+0x14a>
 800a186:	4665      	mov	r5, ip
 800a188:	fbb3 f1f2 	udiv	r1, r3, r2
 800a18c:	fb02 3311 	mls	r3, r2, r1, r3
 800a190:	5cc3      	ldrb	r3, [r0, r3]
 800a192:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a196:	460b      	mov	r3, r1
 800a198:	2900      	cmp	r1, #0
 800a19a:	d1f5      	bne.n	800a188 <_printf_i+0x16c>
 800a19c:	e7b9      	b.n	800a112 <_printf_i+0xf6>
 800a19e:	6813      	ldr	r3, [r2, #0]
 800a1a0:	6825      	ldr	r5, [r4, #0]
 800a1a2:	6961      	ldr	r1, [r4, #20]
 800a1a4:	1d18      	adds	r0, r3, #4
 800a1a6:	6010      	str	r0, [r2, #0]
 800a1a8:	0628      	lsls	r0, r5, #24
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	d501      	bpl.n	800a1b2 <_printf_i+0x196>
 800a1ae:	6019      	str	r1, [r3, #0]
 800a1b0:	e002      	b.n	800a1b8 <_printf_i+0x19c>
 800a1b2:	066a      	lsls	r2, r5, #25
 800a1b4:	d5fb      	bpl.n	800a1ae <_printf_i+0x192>
 800a1b6:	8019      	strh	r1, [r3, #0]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	6123      	str	r3, [r4, #16]
 800a1bc:	4665      	mov	r5, ip
 800a1be:	e7b9      	b.n	800a134 <_printf_i+0x118>
 800a1c0:	6813      	ldr	r3, [r2, #0]
 800a1c2:	1d19      	adds	r1, r3, #4
 800a1c4:	6011      	str	r1, [r2, #0]
 800a1c6:	681d      	ldr	r5, [r3, #0]
 800a1c8:	6862      	ldr	r2, [r4, #4]
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f7f6 f80f 	bl	80001f0 <memchr>
 800a1d2:	b108      	cbz	r0, 800a1d8 <_printf_i+0x1bc>
 800a1d4:	1b40      	subs	r0, r0, r5
 800a1d6:	6060      	str	r0, [r4, #4]
 800a1d8:	6863      	ldr	r3, [r4, #4]
 800a1da:	6123      	str	r3, [r4, #16]
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1e2:	e7a7      	b.n	800a134 <_printf_i+0x118>
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	462a      	mov	r2, r5
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	47c0      	blx	r8
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	d0aa      	beq.n	800a148 <_printf_i+0x12c>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	079b      	lsls	r3, r3, #30
 800a1f6:	d413      	bmi.n	800a220 <_printf_i+0x204>
 800a1f8:	68e0      	ldr	r0, [r4, #12]
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	4298      	cmp	r0, r3
 800a1fe:	bfb8      	it	lt
 800a200:	4618      	movlt	r0, r3
 800a202:	e7a3      	b.n	800a14c <_printf_i+0x130>
 800a204:	2301      	movs	r3, #1
 800a206:	464a      	mov	r2, r9
 800a208:	4639      	mov	r1, r7
 800a20a:	4630      	mov	r0, r6
 800a20c:	47c0      	blx	r8
 800a20e:	3001      	adds	r0, #1
 800a210:	d09a      	beq.n	800a148 <_printf_i+0x12c>
 800a212:	3501      	adds	r5, #1
 800a214:	68e3      	ldr	r3, [r4, #12]
 800a216:	9a03      	ldr	r2, [sp, #12]
 800a218:	1a9b      	subs	r3, r3, r2
 800a21a:	42ab      	cmp	r3, r5
 800a21c:	dcf2      	bgt.n	800a204 <_printf_i+0x1e8>
 800a21e:	e7eb      	b.n	800a1f8 <_printf_i+0x1dc>
 800a220:	2500      	movs	r5, #0
 800a222:	f104 0919 	add.w	r9, r4, #25
 800a226:	e7f5      	b.n	800a214 <_printf_i+0x1f8>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1ac      	bne.n	800a186 <_printf_i+0x16a>
 800a22c:	7803      	ldrb	r3, [r0, #0]
 800a22e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a236:	e76c      	b.n	800a112 <_printf_i+0xf6>
 800a238:	0800a639 	.word	0x0800a639
 800a23c:	0800a64a 	.word	0x0800a64a

0800a240 <memcpy>:
 800a240:	b510      	push	{r4, lr}
 800a242:	1e43      	subs	r3, r0, #1
 800a244:	440a      	add	r2, r1
 800a246:	4291      	cmp	r1, r2
 800a248:	d100      	bne.n	800a24c <memcpy+0xc>
 800a24a:	bd10      	pop	{r4, pc}
 800a24c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a250:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a254:	e7f7      	b.n	800a246 <memcpy+0x6>

0800a256 <memmove>:
 800a256:	4288      	cmp	r0, r1
 800a258:	b510      	push	{r4, lr}
 800a25a:	eb01 0302 	add.w	r3, r1, r2
 800a25e:	d807      	bhi.n	800a270 <memmove+0x1a>
 800a260:	1e42      	subs	r2, r0, #1
 800a262:	4299      	cmp	r1, r3
 800a264:	d00a      	beq.n	800a27c <memmove+0x26>
 800a266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a26a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a26e:	e7f8      	b.n	800a262 <memmove+0xc>
 800a270:	4283      	cmp	r3, r0
 800a272:	d9f5      	bls.n	800a260 <memmove+0xa>
 800a274:	1881      	adds	r1, r0, r2
 800a276:	1ad2      	subs	r2, r2, r3
 800a278:	42d3      	cmn	r3, r2
 800a27a:	d100      	bne.n	800a27e <memmove+0x28>
 800a27c:	bd10      	pop	{r4, pc}
 800a27e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a282:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a286:	e7f7      	b.n	800a278 <memmove+0x22>

0800a288 <_realloc_r>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	4607      	mov	r7, r0
 800a28c:	4614      	mov	r4, r2
 800a28e:	460e      	mov	r6, r1
 800a290:	b921      	cbnz	r1, 800a29c <_realloc_r+0x14>
 800a292:	4611      	mov	r1, r2
 800a294:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a298:	f7ff bc58 	b.w	8009b4c <_malloc_r>
 800a29c:	b922      	cbnz	r2, 800a2a8 <_realloc_r+0x20>
 800a29e:	f7ff fc07 	bl	8009ab0 <_free_r>
 800a2a2:	4625      	mov	r5, r4
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a8:	f000 f814 	bl	800a2d4 <_malloc_usable_size_r>
 800a2ac:	42a0      	cmp	r0, r4
 800a2ae:	d20f      	bcs.n	800a2d0 <_realloc_r+0x48>
 800a2b0:	4621      	mov	r1, r4
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f7ff fc4a 	bl	8009b4c <_malloc_r>
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d0f2      	beq.n	800a2a4 <_realloc_r+0x1c>
 800a2be:	4631      	mov	r1, r6
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	f7ff ffbd 	bl	800a240 <memcpy>
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	f7ff fbf1 	bl	8009ab0 <_free_r>
 800a2ce:	e7e9      	b.n	800a2a4 <_realloc_r+0x1c>
 800a2d0:	4635      	mov	r5, r6
 800a2d2:	e7e7      	b.n	800a2a4 <_realloc_r+0x1c>

0800a2d4 <_malloc_usable_size_r>:
 800a2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d8:	1f18      	subs	r0, r3, #4
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	bfbc      	itt	lt
 800a2de:	580b      	ldrlt	r3, [r1, r0]
 800a2e0:	18c0      	addlt	r0, r0, r3
 800a2e2:	4770      	bx	lr

0800a2e4 <_init>:
 800a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e6:	bf00      	nop
 800a2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ea:	bc08      	pop	{r3}
 800a2ec:	469e      	mov	lr, r3
 800a2ee:	4770      	bx	lr

0800a2f0 <_fini>:
 800a2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f2:	bf00      	nop
 800a2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2f6:	bc08      	pop	{r3}
 800a2f8:	469e      	mov	lr, r3
 800a2fa:	4770      	bx	lr
